Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/InvestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.controller;\n\n\nimport com.antonromanov.arnote.exceptions.BadTickerException;\nimport com.antonromanov.arnote.exceptions.NoTradesForUserDateException;\nimport com.antonromanov.arnote.exceptions.UserNotFoundException;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.model.investing.*;\nimport com.antonromanov.arnote.model.investing.request.AddInstrumentRq;\nimport com.antonromanov.arnote.model.investing.request.DeltaToggleRq;\nimport com.antonromanov.arnote.model.investing.response.*;\nimport com.antonromanov.arnote.model.investing.response.enums.StockExchange;\nimport com.antonromanov.arnote.model.investing.response.enums.Targets;\nimport com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;\nimport com.antonromanov.arnote.model.wish.enums.DeltaMode;\nimport com.antonromanov.arnote.repositoty.BondsRepo;\nimport com.antonromanov.arnote.repositoty.CalendarRepo;\nimport com.antonromanov.arnote.repositoty.UsersRepo;\nimport com.antonromanov.arnote.services.investment.calc.CommonService;\nimport com.antonromanov.arnote.services.investment.calendar.CalendarService;\nimport com.antonromanov.arnote.services.investment.returns.ReturnsService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.*;\nimport javax.validation.constraints.NotNull;\nimport java.security.Principal;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport static com.antonromanov.arnote.utils.ArNoteUtils.*;\n\n\n/**\n * API для управления инвестициями.\n */\n@CrossOrigin()\n@RestController\n@RequestMapping(\"/investing\")\n@Slf4j\npublic class InvestController {\n\n    private final UsersRepo usersRepo;\n    private final BondsRepo bondsRepo;\n    private final CalendarService calendarService;\n    private final ReturnsService returnsService;\n    private final CommonService commonService;\n    private final CalendarRepo calendarRepo;\n\n\n    public InvestController(UsersRepo usersRepo, BondsRepo bondsRepo, ReturnsService returnsService,\n                            CalendarService calendarService, CommonService commonService, CalendarRepo calendarRepo) {\n        this.usersRepo = usersRepo;\n        this.bondsRepo = bondsRepo;\n        this.returnsService = returnsService;\n        this.calendarService = calendarService;\n        this.commonService = commonService;\n        this.calendarRepo = calendarRepo;\n    }\n\n    /**\n     * Консолидированные данные по бумагам.\n     *\n     * @param principal - пользователь.\n     * @return ConsolidatedInvestmentDataRs.\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/consolidated\")\n    public ConsolidatedInvestmentDataRs consolidatedBondsInfo(Principal principal,\n                                                              @RequestParam(required = false) String filter,\n                                                              @RequestParam(required = false) String sort)\n            throws UserNotFoundException {\n\n        log.info(\"============== CONSOLIDATED INVESTMENT TABLE ============== \");\n        log.info(\"PRINCIPAL: \" + principal.getName());\n        log.info(\"FILTER: \" + filter);\n        log.info(\"SORT: \" + sort);\n\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n\n        /*\n         * Логика такая:\n         *\n         * - если фильтр приходит не пустой - задаем и сохраняем новый фильтр.\n         * - если фильтр приходит не пустой, но он NONE, просто удаляем мапу с фильтрами из записи пользака.\n         * - если filter пришел пустой - выдаем то, что есть с той фильтрацией, что сохранена.\n         *\n         */\n        if (filter != null) {\n            if (InvestingFilterMode.valueOf(filter) == InvestingFilterMode.NONE) {\n                user.setInvestingFilterMode(null);\n            } else {\n                if (user.getInvestingFilterMode() != null && user.getInvestingFilterMode().size() > 0) {\n                    user.getInvestingFilterMode().put(InvestingFilterMode.valueOf(filter).getKey(), filter);\n                } else {\n                    Map<String, String> filterMap = new HashMap<>();\n                    filterMap.put(InvestingFilterMode.valueOf(filter).getKey(), filter);\n                    user.setInvestingFilterMode(filterMap);\n                }\n            }\n            user = usersRepo.saveAndFlush(user);\n        }\n\n        if (sort != null) {\n            if (InvestingSortMode.valueOf(sort) == InvestingSortMode.NONE) {\n                user.setInvestingSortMode(null);\n            } else {\n                user.setInvestingSortMode(InvestingSortMode.valueOf(sort));\n            }\n            user = usersRepo.saveAndFlush(user);\n        }\n\n\n        ArNoteUser finalUser = user;\n        log.info(\"USER FILTER MAP: \" + user.getInvestingFilterMode());\n        log.info(\"USER SORT MODE: \" + user.getInvestingSortMode());\n\n        return ConsolidatedInvestmentDataRs.builder()\n                .bonds(bondsRepo.findAllByUser(user)\n                        .stream()\n                        .map(bond -> prepareBondRs(bond))\n                        .filter(user.getInvestingFilterMode() != null ? complexPredicate(user.getInvestingFilterMode()) :\n                                s -> s.getTicker() != null)\n                        .sorted(user.getInvestingSortMode() == null ? InvestingSortMode.NONE.getComparator() :\n                                user.getInvestingSortMode().getComparator())\n                        .collect(Collectors.toList()))\n                .build();\n    }\n\n    /**\n     * Свечи. Временный контроллер\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/candles\")\n    public MoexDocumentRs candles(Principal principal,\n                                  @RequestParam(required = false) String filter,\n                                  @RequestParam(required = false) String sort)\n            throws UserNotFoundException { // todo: удалить потом этот контроллер\n\n        log.info(\"============== CANDLES ============== \");\n        log.info(\"PRINCIPAL: \" + principal.getName());\n\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n\n\n        return commonService.getCandles();\n    }\n\n    /**\n     * Консолидированные данные по доходности.\n     *\n     * @param principal - пользователь.\n     * @return - ConsolidatedReturnsRs\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/returns\")\n    public ConsolidatedReturnsRs returnsConsolidated(Principal principal) throws UserNotFoundException {\n\n        log.info(\"============== CONSOLIDATED RETURNS TABLE ============== \");\n        log.info(\"PRINCIPAL: \" + principal.getName());\n\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n\n        return ConsolidatedReturnsRs.builder()\n                .invested(returnsService.getTotalInvestment(user).orElse(0L))\n                .bondsReturns(returnsService.getTotalBondsReturns(user).orElse(0L))\n                .sharesDelta(returnsService.getSharesDelta(user).map(Double::longValue).orElse(0L))\n                .sharesReturns(returnsService.getTotalDivsReturn(user).orElse(0L))\n                .sum((returnsService.calculateTotalReturns(user)))\n                .targets(Stream.of(new Object[][]{\n                        {Targets.ONE_THOUSAND_ROUBLES, returnsService.calculateRequiredInvestments(user, Targets.ONE_THOUSAND_ROUBLES)},\n                        {Targets.FIVE_THOUSANDS_ROUBLES, returnsService.calculateRequiredInvestments(user, Targets.FIVE_THOUSANDS_ROUBLES)},\n                        {Targets.TEN_THOUSANDS_ROUBLES, returnsService.calculateRequiredInvestments(user, Targets.TEN_THOUSANDS_ROUBLES)},\n                        {Targets.THIRTY_THOUSANDS_ROUBLES, returnsService.calculateRequiredInvestments(user, Targets.THIRTY_THOUSANDS_ROUBLES)},\n                        {Targets.SIXTY_THOUSANDS_ROUBLES, returnsService.calculateRequiredInvestments(user, Targets.SIXTY_THOUSANDS_ROUBLES)},\n                }).collect(Collectors.toMap(data -> (Targets) data[0], data -> (Long) data[1])))\n                .build();\n    }\n\n    /**\n     * Тестовый контроллер для отладки дивов. А то какие-то странные цифры стали приходить.\n     *\n     * @param principal - пользователь.\n     * @return - ConsolidatedReturnsRs\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/divs\")\n    public DivsDetailsRs getDivsDetails(Principal principal) throws UserNotFoundException {\n\n        log.info(\"============== DIVS DETAILS ============== \");\n        log.info(\"PRINCIPAL: \" + principal.getName());\n\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        List<DivsDebug> res = returnsService.getDivsDebug(user);\n\n\n        return DivsDetailsRs.builder()\n                .divs(res)\n                .sum(res.stream()\n                        .map(DivsDebug::getDivs)\n                        .map(t -> t.stream()\n                                .map(DividendRs::getValue)\n                                .reduce((double) 0, Double::sum))\n                        .reduce((double) 0, Double::sum))\n                .build();\n    }\n\n    /**\n     * Найти инструменты по имени / тикеру или их куску.\n     *\n     * @param principal - пользак\n     * @param keyword   - искомое слово или часть его\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/search\")\n    public SearchResultsRs findInstrumentByName(Principal principal, @RequestParam @NotNull String keyword) throws UserNotFoundException {\n        log.info(\"============== FIND INSTRUMENT ============== \");\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"keyword: \" + keyword);\n        return commonService.findInstrument(keyword);\n    }\n\n    /**\n     * Получить текущую цену по тикеру\n     *\n     * @param principal - пользак\n     * @param ticker    - тикер.\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/price\")\n    public CurrentPriceRs getCurrentPriceByTickerAndStockExchange(Principal principal,\n                                                                  @RequestParam @NotNull String ticker,\n                                                                  @RequestParam @NotNull String stockExchange)\n            throws UserNotFoundException {\n\n        log.info(\"============== GET CURRENT PRICE BY TICKER ============== \");\n        ArNoteUser user = getLocalUserFromPrincipal(principal);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"ticker: \" + ticker);\n\n\n        return commonService.getCurrentPriceByTicker(ticker, StockExchange.valueOf(stockExchange), user);\n    }\n\n    /**\n     * Получить текущую цену по тикеру на конкретную дату\n     *\n     * @param principal    - пользак\n     * @param ticker       - тикер.\n     * @param purchaseDate - дата покупки.\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/price-by-date\")\n    public CurrentPriceWithStatusRs getCurrentPriceByTickerAndDate(Principal principal,\n                                                                   @RequestParam @NotNull String ticker,\n                                                                   @RequestParam @NotNull String purchaseDate) throws UserNotFoundException {\n\n        log.info(\"============== GET CURRENT PRICE BY TICKER AND PURCHASE DATE ============== \");\n        ArNoteUser user = getLocalUserFromPrincipal(principal);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"ticker: \" + ticker);\n        log.info(\"purchase date: \" + purchaseDate);\n\n        FoundInstrumentRs foundBond = commonService.findInstrument(ticker).getInstruments().stream()\n                .filter(fi -> ticker.equals(fi.getTicker()))\n                .findFirst().orElseThrow(() -> new BadTickerException(ticker));\n\n        try {\n            CurrentPriceRs temp = commonService.getCurrentPriceByTickerAndDate(foundBond, purchaseDate);\n            return CurrentPriceWithStatusRs.builder()\n                    .currentPrice(temp.getCurrentPrice())\n                    .currency(temp.getCurrency())\n                    .date(temp.getDate())\n                    .ticker(temp.getTicker())\n                    .status(\"OK\") // todo: заменить на константу или енум\n                    .build();\n        } catch (NoTradesForUserDateException e) { // todo: переделать!\n            return CurrentPriceWithStatusRs.builder()\n                    .status(e.getCode().getUiCode())\n                    .build();\n        }\n    }\n\n    /**\n     * Удалить бумагу\n     *\n     * @param principal - пользак\n     * @param ticker    - тикер удаляемой бумаги\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @DeleteMapping()\n    public ConsolidatedInvestmentDataRs deleteInstrument(Principal principal, @RequestParam @NotNull String ticker) throws UserNotFoundException {\n\n        log.info(\"============== DELETE PAPER ============== \");\n        ArNoteUser user = getLocalUserFromPrincipal(principal);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"ticker: \" + ticker);\n\n        Optional<Bond> bond = bondsRepo.findBondByUserAndTicker(user, ticker);\n        bond.ifPresent(bondsRepo::delete);\n\n        return ConsolidatedInvestmentDataRs.builder()\n                .bonds(bondsRepo.findAllByUser(user)\n                        .stream()\n                        .map(this::prepareBondRs)\n                        .collect(Collectors.toList()))\n                .build();\n    }\n\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/calendar\")\n    public CalendarRs getCalendar(Principal principal) throws UserNotFoundException {\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        return calendarService.getCalendar(ConsolidatedInvestmentDataRs.builder()\n                .bonds(bondsRepo.findAllByUser(user)\n                        .stream()\n                        .map(this::prepareBondRs)\n                        .collect(Collectors.toList()))\n                .build());\n    }\n\n    /**\n     * Добавить бумагу (с покупкой или в качестве плана).\n     *\n     * @param principal - пользак\n     * @param request   - реквест, содержащий даты и тикер.\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping()\n    public BondRs addInstrument(Principal principal, @RequestBody AddInstrumentRq request) throws UserNotFoundException {\n\n        log.info(\"============== ADD INSTRUMENT ============== \");\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"ticker: \" + request.getTicker());\n        Bond newOrUpdatedBond;\n\n        /*\n         * Проверяем что хотя бы один такой инструмент нашелся, иначе кидаем эксепшн.\n         */\n        FoundInstrumentRs foundInstrument = commonService.findInstrument(request.getTicker())\n                .getInstruments().stream()\n                .filter(fi -> request.getTicker().equals(fi.getTicker()))\n                .findFirst().orElseThrow(() -> new BadTickerException(request.getTicker()));\n\n        /*\n         * 1) Покупка фактическая (не ПЛАН)\n         * 2) Кол-во купленных бумаг > 0\n         * 3) Стоимость не пустая\n         * 4) Дата покупки не пустая\n         */\n        if (!request.isPlan() && (request.getLot() != 0 && request.getPrice() != null && request.getPurchaseDate() != null)) {\n\n            Optional<Bond> existingBond = bondsRepo.findBondByUserAndTicker(user, request.getTicker());\n\n            Purchase purchase = new Purchase();\n            purchase.setPrice(request.getPrice());\n            purchase.setLot(request.getLot());\n            purchase.setPurchaseDate(request.getPurchaseDate());\n\n            /*\n             * Если есть покупки по бумаге - добавляем в имеющуюся продажи\n             */\n            if (existingBond.isPresent()) {\n                /*\n                 * Если бумага уже была и она была в планах - переводим в статус ФАКТ.\n                 */\n                if (!existingBond.get().getIsBought()) {\n                    existingBond.get().setIsBought(true);\n                }\n                existingBond.get().getPurchaseList().add(purchase);\n                newOrUpdatedBond = bondsRepo.saveAndFlush(existingBond.get());\n            } else {\n                Bond b = new Bond();\n                b.setTicker(request.getTicker());\n                b.setIsBought(true);\n                b.setPurchaseList(Collections.singletonList(purchase));\n                b.setType(BondType.valueOf(request.getBondType()));\n                b.setUser(user);\n                b.setStockExchange(commonService.getInstrumentStockExchange(request.getTicker()));\n                newOrUpdatedBond = bondsRepo.saveAndFlush(b);\n            }\n        } else {\n            Bond b = new Bond();\n            b.setTicker(request.getTicker());\n            b.setIsBought(false);\n            b.setType(BondType.valueOf(request.getBondType()));\n            b.setUser(user);\n            b.setStockExchange(commonService.getInstrumentStockExchange(request.getTicker()));\n            newOrUpdatedBond = bondsRepo.saveAndFlush(b);\n        }\n\n        return BondRs.builder()\n                .ticker(newOrUpdatedBond.getTicker())\n                .isBought(newOrUpdatedBond.getIsBought())\n                .type(newOrUpdatedBond.getType().name())\n                .stockExchange(newOrUpdatedBond.getStockExchange().name())\n                .build();\n    }\n\n    /**\n     * Поменять режим подсчета Дельты.\n     *\n     * @param principal - пользак\n     * @param request   - реквест, содержащий даты и тикер.\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/toggledelta\") //todo: все эти тогглы и фильтры надо пихать в отдельный контроллер по хорошему\n    public ArNoteUser toggleDeltaMode(Principal principal, @RequestBody DeltaToggleRq request) throws UserNotFoundException { // todo: ошибку надо кинуть на фронт если deltaType придет пустой\n\n        log.info(\"============== TOGGLE DELTA CALCULATION  ============== \");\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        log.info(\"USER ID: \" + user.getId());\n        log.info(\"mode: \" + request.getDeltaType());\n\n        user.setDeltaMode(DeltaMode.valueOf(request.getDeltaType()));\n        user = usersRepo.saveAndFlush(user);\n        return user;\n    }\n\n    /**\n     * Получить настройки пользователя // todo: возможно сделать отдельный контроллер по пользаку и все это запихать туда\n     *\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/usersettings\") //todo: все эти тогглы и фильтры надо пихать в отдельный контроллер по хорошему\n    public ArNoteUser getUserSettings(Principal principal) throws UserNotFoundException {\n\n        log.info(\"============== GET USER SETTINGS  ============== \");\n        ArNoteUser user = usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n        log.info(\"USER: \" + user.getLogin());\n        return user;\n    }\n\n    /**\n     * Подготовить респонс бумаги.\n     *\n     * @param bond - данные по бумаге из БД.\n     * @return\n     */\n    private BondRs prepareBondRs(Bond bond) { // todo: почему это вообще в контроллере?\n\n        return BondRs.builder()\n                .id(bond.getId())\n                .ticker(bond.getTicker())\n                .type(bond.getType().name())\n                .isBought(bond.getIsBought())\n                .stockExchange(bond.getStockExchange().name())\n                .currentPrice(commonService.prepareCurrentPrice(bond))\n                .currency(commonService.getCurrency(bond))\n                .dividends(commonService.getDivsOrCoupons(bond))\n                .minLot(commonService.getLot(bond))\n                .finalPrice(commonService.getFinalPrice(bond))\n                .delta(commonService.prepareDelta(bond))\n                .description(commonService.getDescription(bond))\n                .build();\n    }\n\n    /**\n     * Достать юзера из Принципала\n     *\n     * @return LocalUser\n     */\n    public ArNoteUser getLocalUserFromPrincipal(Principal principal) throws UserNotFoundException { // todo: это можно запихать в аспект?\n        return usersRepo.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);\n    }\n}\n
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/InvestController.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/InvestController.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/InvestController.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/InvestController.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.controller;
+package com.antonromanov.arnote.sbdfvjbsdf.controller;
 
 
 import com.antonromanov.arnote.exceptions.BadTickerException;
@@ -26,7 +26,7 @@
 import java.util.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
+import static com.antonromanov.arnote.sbdfvjbsdf.utils.ArNoteUtils.*;
 
 
 /**
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/WebController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * Контроллер, отвечающий за фронтенд\n */\n@Controller\n@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\npublic class WebController {\n\n\t@RequestMapping(value = \"/\", method = {RequestMethod.GET, RequestMethod.POST})\n\tpublic String indexPage() {\n\t\treturn \"index\";\n\t}\n\n\t@RequestMapping(value = \"/investing\", method = {RequestMethod.GET})\n\tpublic String investPage() {\n\t\treturn \"index\";\n\t}\n\n\t@RequestMapping(value = \"/401\", method = {RequestMethod.GET, RequestMethod.POST})\n\tpublic String welcomePage() {\n\t\treturn \"index\";\n\t}\n\n}\n\n
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/WebController.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/WebController.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/WebController.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/WebController.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.controller;
+package com.antonromanov.arnote.sbdfvjbsdf.controller;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.CrossOrigin;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response;\n\nimport lombok.Builder;\n\n@Builder\npublic class ResponseStatus {\n\tprivate String status;\n\tprivate String errorMessage;\n\tprivate String okMessage;\n}\n
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseStatus.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseStatus.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseStatus.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseStatus.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.response;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response;
 
 import lombok.Builder;
 
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseParseResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response;\n\nimport lombok.Builder;\n\n@Builder\npublic class ResponseParseResult {\n\tprivate String status;\n\tprivate String errorMessage;\n\tprivate String okMessage;\n\tprivate Integer itemsAdded;\n}\n
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseParseResult.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseParseResult.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseParseResult.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/ResponseParseResult.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.response;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response;
 
 import lombok.Builder;
 
