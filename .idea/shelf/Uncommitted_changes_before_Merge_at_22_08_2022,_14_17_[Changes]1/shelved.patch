Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote;\n\nimport com.antonromanov.arnote.security.JWTAuthenticationFilter;\nimport com.antonromanov.arnote.security.JWTLoginFilter;\nimport com.antonromanov.arnote.security.UserDetailsServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport java.util.Arrays;\n\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n\t@Autowired\n\tUserDetailsServiceImpl userDetailsService;\n\n\n\t@Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp.csrf().disable().authorizeRequests()\n\t\t\t\t// No need authentication.\n\t\t\t\t.antMatchers(\"/\").permitAll()\n\t\t\t\t.antMatchers(\"/*.js\").permitAll()\n\t\t\t\t.antMatchers(HttpMethod.POST, \"/login\", \"/rest/wishes/users\").permitAll()\n\t\t\t\t.antMatchers(HttpMethod.GET, \"/login\", \"/favicon.ico\", \"/investing\", \"/401\", \"/months\").permitAll()\n\t\t\t\t// Need authentication.\n\t\t\t\t.anyRequest().authenticated()\n\t\t\t\t.and()\n\t\t\t\t.addFilterBefore(new JWTLoginFilter(\"/login\", authenticationManager()),\n\t\t\t\t\t\tUsernamePasswordAuthenticationFilter.class)\n\t\t\t\t.addFilterBefore(new JWTAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n\t\thttp.cors();\n\t}\n\n\t@Bean\n\tpublic CorsConfigurationSource corsConfigurationSource() {\n\t\tfinal CorsConfiguration configuration = new CorsConfiguration();\n\t\tconfiguration.setAllowedOrigins(Arrays.asList(\"*\"));\n\t\tconfiguration.setAllowedMethods(Arrays.asList(\"*\"));\n\t\tconfiguration.setAllowCredentials(true);\n\t\tconfiguration.addAllowedHeader(\"*\");\n\t\tconfiguration.addExposedHeader(\"Authorization, x-xsrf-token, Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, \" +\n\t\t\t\t\"Content-Type, Access-Control-Request-Method, Custom-Filter-Header\");\n\n\n\t\tfinal UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n\t\tsource.registerCorsConfiguration(\"/**\", configuration);\n\t\treturn source;\n\t}\n\n\t@Bean\n\tpublic BCryptPasswordEncoder passwordEncoder() {\n\t\treturn new BCryptPasswordEncoder();\n\t}\n\n\t@Override\n\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n\t\tauth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebSecurityConfig.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebSecurityConfig.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebSecurityConfig.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebSecurityConfig.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote;
+package com.antonromanov.arnote.sbdfvjbsdf;
 
 import com.antonromanov.arnote.security.JWTAuthenticationFilter;
 import com.antonromanov.arnote.security.JWTLoginFilter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com;\n\nimport com.antonromanov.arnote.bot.Bot;\nimport com.antonromanov.arnote.repositoty.UsersRepo;\nimport com.antonromanov.arnote.services.MainService;\nimport com.antonromanov.arnote.services.MainServiceImpl;\nimport com.antonromanov.arnote.services.investment.calc.shares.foreign.ForeignCalcServiceImpl;\nimport com.antonromanov.arnote.services.investment.calc.shares.moex.MoexCalculateServiceImpl;\nimport com.antonromanov.arnote.services.investment.calc.shares.common.CalculateFactory;\nimport com.google.common.cache.CacheBuilder;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.beans.factory.config.ServiceLocatorFactoryBean;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.concurrent.ConcurrentMapCacheManager;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.core.env.Environment;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.web.client.RestTemplate;\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\nimport org.telegram.telegrambots.updatesreceivers.DefaultBotSession;\nimport java.util.concurrent.TimeUnit;\n\n@SpringBootApplication\n@EnableAspectJAutoProxy(proxyTargetClass = true)\n@EnableCaching\npublic class Application {\n\n    public static void main(String[] args) {\n\n        ConfigurableApplicationContext appContext = SpringApplication.run(Application.class, args);\n        MainService srv = appContext.getBean(MainServiceImpl.class);\n        UsersRepo repo = appContext.getBean(UsersRepo.class);\n        Environment env = appContext.getBean(Environment.class);\n\n        try {\n            TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);\n            telegramBotsApi.registerBot(new Bot(srv, repo, env));\n        } catch (TelegramApiException e) {\n            e.printStackTrace(); // todo: это наверное как-то исправить надо, да?\n        }\n    }\n\n\n    @Bean\n    public BCryptPasswordEncoder bCryptPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    RestTemplate SimpleRestTemplate() {\n        return new RestTemplate();\n    }\n\n    @Bean(\"calcFactory\")\n    public FactoryBean serviceLocatorFactoryBean() {\n        ServiceLocatorFactoryBean factoryBean = new ServiceLocatorFactoryBean();\n        factoryBean.setServiceLocatorInterface(CalculateFactory.class);\n        return factoryBean;\n    }\n\n    @Bean(name = \"MOEX\")\n    @Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    public MoexCalculateServiceImpl moexCalculator() {\n        return new MoexCalculateServiceImpl();\n    }\n\n    @Bean(name = \"SPB\")\n    @Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    public ForeignCalcServiceImpl foreignCalculator() {\n        return new ForeignCalcServiceImpl();\n    }\n\n\n    @Bean(\"habrCacheManager\")\n    public CacheManager cacheManager() {\n        return new ConcurrentMapCacheManager() {\n            @Override\n            protected Cache createConcurrentMapCache(String name) {\n                return new ConcurrentMapCache(\n                        name,\n                        CacheBuilder.newBuilder()\n                                .expireAfterWrite(15, TimeUnit.MINUTES)\n                                .build().asMap(),\n                        false);\n            }\n        };\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/Application.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/Application.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/Application.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/Application.java	
@@ -1,6 +1,6 @@
-package com;
+package com.antonromanov.arnote.sbdfvjbsdf;
 
-import com.antonromanov.arnote.bot.Bot;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.Bot;
 import com.antonromanov.arnote.repositoty.UsersRepo;
 import com.antonromanov.arnote.services.MainService;
 import com.antonromanov.arnote.services.MainServiceImpl;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n//@Configuration\n//@EnableWebMvc\n//public class WebConfig implements WebMvcConfigurer {\npublic class WebConfig {\n\n//\t@Override\n//\tpublic void addCorsMappings(CorsRegistry registry) {\n//\t\tregistry.addMapping(\"/**\");\n//\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebConfig.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebConfig.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebConfig.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/WebConfig.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote;
+package com.antonromanov.arnote.sbdfvjbsdf;
 
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.CorsRegistry;
Index: src/main/java/com/antonromanov/arnote/entity/Wish.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/Wish.java b/src/main/java/com/antonromanov/arnote/entity/Wish.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/Wish.java	
+++ /dev/null	
@@ -1,111 +0,0 @@
-package com.antonromanov.arnote.entity;
-
-import javax.persistence.*;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import lombok.*;
-import java.util.Date;
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "wishes")
-public class Wish {
-
-    @Id
-    @Column(name="id", nullable = false)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "wishes_seq_gen")
-    @SequenceGenerator(name = "wishes_seq_gen", sequenceName ="wishes_id_seq", allocationSize = 1)
-    private long id;
-
-    @Column(name = "wish", nullable = true, length = 255)
-    private String wish; //todo: переименовать в классе в wishName
-
-    @Column(name = "price", nullable = true)
-    private Integer price;
-
-    @Column(name = "priority", nullable = true)
-    private Integer priority;
-
-    @Column(name = "archive", nullable = true)
-    private Boolean ac;
-
-    @Column(name = "description", nullable = true, length = 1024)
-    private String description;
-
-    @Column(name = "url", nullable = true, length = 1024)
-    private String url;
-
-    @JsonIgnore
-    @ManyToOne(cascade = CascadeType.ALL)
-    private LocalUser user;
-
-    @Column
-    private Integer priorityGroup;
-
-    @JsonIgnore
-    @Column
-    private Integer priorityGroupOrder;
-
-    @Column
-    @Temporal(TemporalType.DATE)
-    private Date creationDate;
-
-    @Column
-    @Temporal(TemporalType.DATE)
-    private Date realizationDate;
-
-    @Column
-    private Boolean realized;
-
-    @ManyToOne(cascade = CascadeType.ALL)
-    private WishGroup wishGroup;
-
-    public Wish setPriorityAndReturnWish(Integer priority) {
-        this.priority = priority;
-        return this;
-    }
-
-    public Wish(String wish, Integer price, Integer priority, Integer priorityGroup, Boolean ac, String description,
-                String url, LocalUser user, Date creationDate) {
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.priorityGroup = priorityGroup;
-        this.ac = ac;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-        this.creationDate = creationDate;
-    }
-
-    public Wish(long id, String wish, int price, int priority, boolean ac, String description, String url, LocalUser user) {
-
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.ac = ac;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-        this.id = id;
-
-    }
-
-    //todo: с таким большим количеством конструкторов явно надо что-то делать. Может быть добавить билдер в класс или добавить метод конвертации
-    public Wish(String wish, int price, int priority, boolean archive, String description, String url, LocalUser user) {
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.priorityGroup = null;
-        this.ac = archive;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-    }
-}
-
Index: src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarServiceImpl.java	
+++ /dev/null	
@@ -1,72 +0,0 @@
-package com.antonromanov.arnote.services.investment.calendar;
-
-import com.antonromanov.arnote.model.investing.BondType;
-import com.antonromanov.arnote.model.investing.CalendarRs;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedInvestmentDataRs;
-import com.antonromanov.arnote.model.investing.response.MonthDetailRs;
-import com.antonromanov.arnote.model.investing.response.ReturnsPerMonthRs;
-import com.antonromanov.arnote.model.investing.response.enums.Months;
-import org.springframework.stereotype.Service;
-import java.time.LocalDate;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import static com.antonromanov.arnote.utils.ArNoteUtils.monthNameToNumber;
-
-@Service
-public class CalendarServiceImpl implements CalendarService {
-
-    /**
-     * Отдать календарь выплат
-     *
-     * @return
-     */
-    @Override
-    public CalendarRs getCalendar(ConsolidatedInvestmentDataRs data) {
-
-        LinkedHashMap<Months, List<ReturnsPerMonthRs>> map = Stream.of(Months.values())
-                .collect(Collectors.toMap(p -> p, p -> collectReturns(data, p.getRussianName()), (v1, v2) -> v1, LinkedHashMap::new))
-                .entrySet()
-                .stream()
-                .filter(a->a.getValue().size()>0)
-                .collect(Collectors.toMap((Map.Entry::getKey), Map.Entry::getValue, (v1, v2)->v1, LinkedHashMap::new));
-
-        return CalendarRs.builder()
-                .calendar(map.entrySet()
-                        .stream()
-                        .map(e-> MonthDetailRs.builder()
-                                .monthRussianName(e.getKey().getRussianName())
-                                .monthEnglishName(e.getKey().getEnglishName())
-                                .data(e.getValue())
-                                .build())
-                        .collect(Collectors.toCollection(LinkedList::new)))
-                .build();
-    }
-
-    /**
-     * Собрать дивы / купоны упорядоченно.
-     *
-     * @return
-     */
-    @Override
-    public List<ReturnsPerMonthRs> collectReturns(ConsolidatedInvestmentDataRs data, String month) {
-
-        return data.getBonds()
-                .stream()
-                .flatMap(b -> b.getDividends().getDividendList().stream()
-                        .filter(divs -> LocalDate.parse(divs.getRegistryCloseDate()).getMonthValue() == monthNameToNumber(month))
-                        .filter(dd->LocalDate.parse(dd.getRegistryCloseDate()).getYear()==LocalDate.now().getYear()) // берем только текущий год
-                        .filter(divMo->LocalDate.parse(divMo.getRegistryCloseDate()).isAfter(LocalDate.now()))
-                        .map(d -> ReturnsPerMonthRs.builder()
-                                .type(BondType.valueOf(b.getType()))
-                                .ticker(b.getTicker())
-                                .value(d.getValue()* b.getMinLot())
-                                .currencyId(d.getCurrencyId())
-                                .registryCloseDate(d.getRegistryCloseDate())
-                                .build()))
-                .collect(Collectors.toList());
-    }
-}
Index: src/main/java/com/antonromanov/arnote/entity/finplan/Goal.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/finplan/Goal.java b/src/main/java/com/antonromanov/arnote/entity/finplan/Goal.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/finplan/Goal.java	
+++ /dev/null	
@@ -1,69 +0,0 @@
-package com.antonromanov.arnote.entity.finplan;
-
-import com.antonromanov.arnote.dto.rq.GoalRq;
-import com.antonromanov.arnote.dto.rq.IncomeRq;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import javax.persistence.*;
-import java.util.Date;
-
-
-/**
- * Трата.
- *
- */
-@Entity
-@Getter
-@Setter
-@Builder
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "goal")
-public class Goal {
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "goal_seq_gen")
-	@SequenceGenerator(name = "goal_seq_gen", sequenceName ="goal_id_seq", allocationSize = 1)
-	private Long id;
-
-	@Column(name = "description", nullable = true)
-	private String description; // Что за покупка вообще
-
-	@Column(name = "price", nullable = true)
-	private Integer price; // Общий платеж по кредиту
-
-	@Column(name = "start_date", nullable = true)
-	@Temporal(TemporalType.DATE)
-	private Date startDate; // Дата
-
-	@Column(name = "repayment", nullable = true)
-	private Long repayment; // Погашение кредита. Указывается ID кредита.
-
-	@ManyToOne(cascade = CascadeType.REFRESH)
-	private ArNoteUser user;
-
-	public static Goal $toDbEntity(GoalRq rq, ArNoteUser user){
-		return Goal.builder()
-				.id(rq.getId())
-				.description(rq.getDescription())
-				.price(rq.getPrice())
-				.startDate(rq.getStartDate())
-				.repayment(rq.getRepayment())
-				.user(user)
-				.build();
-	}
-
-	public static Goal $toDbEntityWithCheck(GoalRq rq, Goal existGoal, ArNoteUser user){
-		return Goal.builder()
-				.id(rq.getId())
-				.description(rq.getDescription() == null ? existGoal.description : rq.getDescription())
-				.price(rq.getPrice() == null ? existGoal.price : rq.getPrice())
-				.startDate(rq.getStartDate() == null ? existGoal.startDate : rq.getStartDate())
-				.repayment(existGoal.repayment)
-				.user(user)
-				.build();
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedReturnsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedReturnsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedReturnsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedReturnsRs.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.enums.Targets;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.util.Map;
-
-/**
- * Консолидированная таблица по доходности.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class ConsolidatedReturnsRs {
-    private Long invested; // инвестировано
-    private Long bondsReturns; // купоны с облигаций
-    private Long sharesReturns; // доходы с дивидендов
-    private Long sharesDelta; // Рост акций
-    private Long sum; // купоны + дивиденды + рост акций
-    Map<Targets, Long> targets; // сколько надо вложить для той или иной суммы
-}
Index: src/main/java/com/antonromanov/arnote/dto/request/MoveWishDto.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/dto/request/MoveWishDto.java b/src/main/java/com/antonromanov/arnote/dto/request/MoveWishDto.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/dto/request/MoveWishDto.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.dto.request;
-
-import com.antonromanov.arnote.enums.StepType;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-
-/**
- * DTO для перемещения желаний.
- */
-@Data
-public class MoveWishDto {
-    private long id;
-    private String month; //todo: может тоже енум (можно сделать двуязычный)???
-    private StepType step;
-}
Index: src/main/java/com/antonromanov/arnote/dto/request/UserDto.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/dto/request/UserDto.java b/src/main/java/com/antonromanov/arnote/dto/request/UserDto.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/dto/request/UserDto.java	
+++ /dev/null	
@@ -1,44 +0,0 @@
-package com.antonromanov.arnote.dto.request;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.Data;
-
-/**
- * DTO для добавления нового пользователя.
- */
-@Data
-public class UserDto {
-
-    /**
-     * ID пользователя.
-     */
-    private Long id;
-
-    /**
-     * Логин пользователя.
-     */
-    private String login;
-
-    /**
-     * Пароль пользователя не-шифрованный.
-     */
-    @JsonProperty(value = "pwd")
-    private String unSecurePassword;
-
-    /**
-     * Режим шифрования на фронте.
-     */
-    private Boolean userCryptoMode;
-
-
-    /**
-     * Email-адрес пользователя.
-     */
-    private String email;
-
-    /**
-     * Полное имя пользователя.
-     */
-    @JsonProperty(value = "fullname")
-    private String fullName; //todo: нормально переименовать
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/SecuritiesColumns.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/SecuritiesColumns.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/SecuritiesColumns.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/SecuritiesColumns.java	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.enums;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.UrlQueryParameters;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-@AllArgsConstructor
-@Getter
-public enum SecuritiesColumns implements UrlQueryParameters {
-    SECID("SECID"), PREVADMITTEDQUOTE("PREVADMITTEDQUOTE"), SECNAME("SECNAME"),
-    PREVLEGALCLOSEPRICE("PREVLEGALCLOSEPRICE"), COUPONVALUE("COUPONVALUE"),
-    COUPONPERCENT("COUPONPERCENT"), LOTVALUE("LOTVALUE"), COUPONPERIOD("COUPONPERIOD"),
-    CURRENCYID("CURRENCYID"), LOTSIZE("LOTSIZE"), NEXTCOUPON("NEXTCOUPON"), FACEUNIT("FACEUNIT");
-
-    private final String code;
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/UserNotFoundException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/UserNotFoundException.java b/src/main/java/com/antonromanov/arnote/exceptions/UserNotFoundException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/UserNotFoundException.java	
+++ /dev/null	
@@ -1,23 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class UserNotFoundException extends Exception {
-
-	private String message;
-
-	public UserNotFoundException(String email) {
-		this.message = "Пользователь с email - " + email + "не найден! ";
-	}
-
-	public UserNotFoundException(Throwable cause, String message) {
-		super(cause);
-		this.message = message;
-	}
-
-	public UserNotFoundException() {
-		super();
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/SearchCriteria.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/SearchCriteria.java b/src/main/java/com/antonromanov/arnote/model/wish/SearchCriteria.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/SearchCriteria.java	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class SearchCriteria {
-
-	private String key;
-	private String operation;
-	private Object value;
-
-	public SearchCriteria(String group, String group1, String group2) {
-		this.key = group;
-		this.operation = group1;
-		this.value = group2;
-	}
-
-
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondServiceImpl.java	
+++ /dev/null	
@@ -1,232 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.bonds;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.Purchase;
-import com.antonromanov.arnote.model.investing.cache.enums.CacheDictType;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.DividendRs;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import com.antonromanov.arnote.services.investment.cache.CacheService;
-import com.antonromanov.arnote.services.investment.requestservice.RequestService;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.stereotype.Service;
-import java.time.LocalDate;
-import java.time.format.DateTimeFormatter;
-import java.util.*;
-import static com.antonromanov.arnote.utils.ArNoteUtils.isInteger;
-
-/**
- * Расчет расчета различных данных по облигациям.
- */
-@Service
-@Slf4j
-public class BondServiceImpl implements BondCalcService {
-
-    private final List<String> BOARD_GROUP_LIST = Arrays.asList("58", "193", "7", "67", "207");
-    private final RequestService httpClient;
-    private final CacheService cacheService;
-
-    public BondServiceImpl(RequestService httpClient, CacheService cacheService) {
-        this.httpClient = httpClient;
-        this.cacheService = cacheService;
-    }
-
-    /**
-     * Подготовить список купонов в формате списка дивидендов.
-     *
-     * @return
-     */
-    @Override
-    public List<DividendRs> prepareCouponList(MoexRowsRs bondData) {
-
-        List<DividendRs> resultList = new ArrayList<>();
-
-        if (bondData != null && bondData.getCouponPeriod() != null && isInteger(bondData.getCouponPeriod())) {
-            int couponsCountPerYear = Math.toIntExact(365 / Integer.parseInt(bondData.getCouponPeriod()));
-
-            resultList.add(DividendRs.builder()
-                    .value(Double.valueOf(bondData.getCouponValue()))
-                    .currencyId(Currencies.search(bondData.getCurrencyId()))
-                    .registryCloseDate(bondData.getNextCoupon())
-                    .build());
-
-            for (int i = 1; i < couponsCountPerYear; i++) {
-                resultList.add(DividendRs.builder()
-                        .value(Double.valueOf(bondData.getCouponValue()))
-                        .currencyId(Currencies.search(bondData.getCurrencyId()))
-                        .registryCloseDate(LocalDate.parse(bondData.getNextCoupon())
-                                .plusDays(Integer.parseInt(bondData.getCouponPeriod())).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")))
-                        .build());
-            }
-            return resultList;
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Получить купоны по облигации.
-     *
-     * @return
-     */
-    @Override
-    public ConsolidatedDividendsRs getCoupons(Bond bond) {
-
-        return ConsolidatedDividendsRs.builder()
-                .dividendList(prepareCouponList(getBondDataByTicker(bond.getTicker()).orElse(null)))
-                .divSum((365 / getBondDataByTicker(bond.getTicker())
-                        .map(MoexRowsRs::getCouponPeriod)
-                        .map(Double::parseDouble).orElse(1D)) * ((getBondDataByTicker(bond.getTicker())
-                        .map(MoexRowsRs::getCouponValue)
-                        .map(Double::parseDouble)
-                        .map(v -> (int) Math.round(v))
-                        .orElse(0))))
-                .percent(getBondDataByTicker(bond.getTicker())
-                        .map(MoexRowsRs::getCouponPercent)
-                        .map(Double::parseDouble)
-                        .orElse(0D))
-                .build();
-    }
-
-    /**
-     * Получить минимальный лот облигации или сколько куплено уже.
-     *
-     * @return
-     */
-    @Override
-    public Integer getBondLot(Bond bond) {
-
-        if (!bond.getIsBought()) { // если это план по облигации
-            return getBondDataByTicker(bond.getTicker())
-                    .map(MoexRowsRs::getLotSize)
-                    .map(Integer::parseInt).orElse(0);
-        } else { // а если есть реальные покупки по облигации
-            /*
-             * Считаем сумму покупок (сколько всего купили бумаг то)
-             */
-            return bond.getPurchaseList().stream()
-                    .map(Purchase::getLot)
-                    .reduce(0, Integer::sum);
-        }
-    }
-
-    /**
-     * Получить текущую валюту облигации
-     *
-     * @param ticker - тикер бумаги.
-     * @return
-     */
-    @Override
-    public Currencies getBondCurrency(String ticker) {
-        return getBondDataByTicker(ticker)
-                .map(MoexRowsRs::getCurrencyId)
-                .map(Currencies::search)
-                .orElse(Currencies.RUB);
-
-    }
-
-    /**
-     * Получить имя облигации.
-     *
-     * @param ticker
-     * @return
-     */
-    @Override
-    public Optional<String> getBondName(String ticker) {
-        return getBondDataByTicker(ticker).map(MoexRowsRs::getSecName);
-    }
-
-    /**
-     * Получить текущую цену облигации
-     *
-     * @param ticker - тикер бумаги.
-     * @return
-     */
-    @Override
-    public Double getCurrentBondPrice(String ticker) {
-        /*return getBondDataByTicker(ticker)
-                .map(p -> (
-                        (Double.parseDouble(p.getLotValue()) * Double.parseDouble(p.getPrevLegalClosePrice())) / 100)
-                        * sharesCalcService.getCurrencyMultiplier(p.getCurrencyId())).orElse(0D);*/
-
-        return null;
-
-    }
-
-    /**
-     * Запросить Облигацию по тикеру.
-     *
-     * @param ticker - тикер
-     * @return
-     */
-    @Override
-    public Optional<MoexRowsRs> getBondDataByTicker(String ticker) {
-
-        return getBonds()
-                .getData()
-                .getRow()
-                .stream()
-                .filter(b -> ticker.equals(b.getSecid()))
-                .findFirst();
-    }
-
-    /**
-     * Подготовить финальную цену (цена * лот).
-     *
-     * @param bond
-     * @return
-     */
-    @Override
-    public Integer calculateFinalPrice(Bond bond) {
-            if (bond.getIsBought()) { // если это ФАКТ
-                return bond.getPurchaseList().stream()
-                        .map(p -> p.getLot() * p.getPrice())
-                        .reduce((double) 0, Double::sum).intValue();
-            } else { // если ПЛАН
-                return getBondLot(bond) * (getCurrentBondPrice(bond.getTicker()).intValue());
-            }
-
-
-    }
-
-    /**
-     * Запросить Облигации по всем доскам сразу.
-     *
-     * @return
-     */
-    @Override
-    public MoexDocumentRs getBonds() {
-
-        Iterator<String> it = BOARD_GROUP_LIST.iterator();
-        MoexDocumentRs result = new MoexDocumentRs();
-        while (it.hasNext()) {
-            if (result.getData() == null) {
-                result = getBondsByBoardGroup(it.next());
-            } else {
-                result.getData().getRow().addAll((getBondsByBoardGroup(it.next())).getData().getRow());
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Запросить Облигации.
-     *
-     * @return
-     */
-    @Override
-    public MoexDocumentRs getBondsByBoardGroup(String boardGroup) {
-        if (cacheService.checkDict(CacheDictType.BONDS_BY_BOARD_ID, boardGroup)) { //todo: посмотреть можно ли все-таки написать аннотацию под это дело самому
-            return cacheService.getDict(CacheDictType.BONDS_BY_BOARD_ID, boardGroup);
-        } else {
-            MoexDocumentRs doc = (MoexDocumentRs) httpClient
-                    .sendAndMarshall(MoexRestTemplateOperation.GET_BONDS, boardGroup, null);
-            cacheService.putToCache(CacheDictType.BONDS_BY_BOARD_ID, boardGroup, doc, MoexDocumentRs.class);
-            return doc;
-        }
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/request/DeltaToggleRq.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/request/DeltaToggleRq.java b/src/main/java/com/antonromanov/arnote/model/investing/request/DeltaToggleRq.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/request/DeltaToggleRq.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.model.investing.request;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import javax.validation.constraints.NotBlank;
-
-@AllArgsConstructor
-@Data
-@NoArgsConstructor
-public class DeltaToggleRq {
-    @NotBlank
-    private String deltaType;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/cache/CacheObject.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheObject.java b/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheObject.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheObject.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.services.investment.cache;
-
-
-import lombok.Getter;
-
-/**
- * Обобщенный объект для хранения в кэше разных сущностей
- */
-public class CacheObject<T> {
-
-    /**
-     * Хранимый объект.
-     */
-    @Getter
-    private T t;
-
-    /**
-     * Класс для последующего кастинга.
-     */
-    @Getter
-    private Class<T> clazz;
-
-    public CacheObject(T t, Class<T> clazz) {
-        this.t = t;
-        this.clazz = clazz;
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/cache/enums/CacheDictType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/cache/enums/CacheDictType.java b/src/main/java/com/antonromanov/arnote/model/investing/cache/enums/CacheDictType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/cache/enums/CacheDictType.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.model.investing.cache.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Тип справочников, которые кладем в кэш.
- */
-@AllArgsConstructor
-@Getter
-public enum CacheDictType {
-    BOARD_ID_BY_TICKER, LAST_QUOTES_BY_BOARD_ID, DIVS_BY_TICKER, BONDS_BY_BOARD_ID, HISTORY, TRADE_MODES, CURRENCY,
-    REALTIME_QUOTES, INSTRUMENT_NAME, CURRENCY_MULTIPLIER, FIND_SHARES_BY_BOARD_ID, REALTIME_QUOTES_WITH_RETENTION,
-    MINIMAL_LOT, CANDLES
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/SaveNewWishException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/SaveNewWishException.java b/src/main/java/com/antonromanov/arnote/exceptions/SaveNewWishException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/SaveNewWishException.java	
+++ /dev/null	
@@ -1,23 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class SaveNewWishException extends Exception {
-
-	private String message;
-
-	public SaveNewWishException(String json) {
-		this.message = "Ошибка сохранения нового желания с параметрами: " + json;
-	}
-
-	public SaveNewWishException(Throwable cause, String message) {
-		super(cause);
-		this.message = message;
-	}
-
-	public SaveNewWishException() {
-		super();
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/UsersRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/UsersRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/UsersRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/UsersRepo.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.transaction.annotation.Transactional;
-import java.util.Optional;
-
-public interface UsersRepo extends JpaRepository<ArNoteUser, Integer> {
-
-	Optional<ArNoteUser> findByLogin(String login);
-
-	Optional<ArNoteUser> findByEmail(String email);
-
-	Optional<ArNoteUser> findById(Long id);
-
-	@Transactional
-	void deleteById(Long id);
-
-}
Index: src/main/java/com/antonromanov/arnote/model/common/DayOfRest.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/common/DayOfRest.java b/src/main/java/com/antonromanov/arnote/model/common/DayOfRest.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/common/DayOfRest.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package com.antonromanov.arnote.model.common;
-
-import lombok.Data;
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement(name = "day")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class DayOfRest {
-
-    @XmlAttribute(name = "d")
-    String date;
-
-    @XmlAttribute(name = "t")
-    String type; // t (type) - тип дня: 1 - выходной день, 2 - рабочий и сокращенный (может быть использован для любого дня недели), 3 - рабочий день (суббота/воскресенье)
-
-    @XmlAttribute(name = "h")
-    String holiday; // номер праздника (ссылка на атрибут id тэга holiday)
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/JsonParseException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/JsonParseException.java b/src/main/java/com/antonromanov/arnote/exceptions/JsonParseException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/JsonParseException.java	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class JsonParseException  extends Exception {
-
-	private String message;
-
-	public JsonParseException(String json) {
-		this.message = "Ошибка парсинга json: " + json;
-	}
-
-
-	public JsonParseException(Throwable cause, String message) {
-		super(cause);
-		this.message = message;
-	}
-
-	public String getMessage() {
-		return message;
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/NoTradesForUserDateException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/NoTradesForUserDateException.java b/src/main/java/com/antonromanov/arnote/exceptions/NoTradesForUserDateException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/NoTradesForUserDateException.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-import com.antonromanov.arnote.exceptions.enums.ErrorCodes;
-
-/**
- * Ошибка возникающая, если пользак запрашивает данные торгов на выходной, праздник или просто на этот день нет торгов.
- */
-public class NoTradesForUserDateException extends Exception {
-
-
-	private ErrorCodes code;
-
-	public NoTradesForUserDateException(ErrorCodes code) {
-		this.code = code;
-	}
-
-
-	public NoTradesForUserDateException() {
-		super();
-	}
-
-	public ErrorCodes getCode() {
-		return code;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/Wish.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/Wish.java b/src/main/java/com/antonromanov/arnote/model/wish/Wish.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/Wish.java	
+++ /dev/null	
@@ -1,104 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import javax.persistence.*;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import java.util.Date;
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "wishes")
-public class Wish {
-
-    @Id
-    @Column(name="id", nullable = false)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "wishes_seq_gen")
-    @SequenceGenerator(name = "wishes_seq_gen", sequenceName ="wishes_id_seq", allocationSize = 1)
-    private long id;
-
-    @Column(name = "wish")
-    private String wish;
-
-    @Column(name = "price", nullable = true)
-    private Integer price;
-
-    @Column(name = "priority", nullable = true)
-    private Integer priority;
-
-    @Column(name = "archive", nullable = true)
-    private Boolean ac;
-
-    @Column(name = "description", nullable = true, length = 1024)
-    private String description;
-
-    @Column(name = "url", nullable = true, length = 1024)
-    private String url;
-
-    @ManyToOne(cascade = CascadeType.MERGE)
-    private ArNoteUser user;
-
-    @Column
-    private Integer priorityGroup;
-
-    @Column
-    private Integer priorityGroupOrder;
-
-    @Column
-    @Temporal(TemporalType.DATE)
-    private Date creationDate;
-
-    @Column
-    @Temporal(TemporalType.DATE)
-    private Date realizationDate;
-
-    @Column
-    private Boolean realized;
-
-    @ManyToOne(cascade = CascadeType.ALL)
-    private WishGroup wishGroup;
-
-
-    public Wish(String wish, Integer price, Integer priority, Integer priorityGroup, Boolean ac, String description,
-                String url, ArNoteUser user, Date creationDate) {
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.priorityGroup = priorityGroup;
-        this.ac = ac;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-        this.creationDate = creationDate;
-    }
-
-    public Wish(long id, String wish, int price, int priority, boolean ac, String description, String url, ArNoteUser user) {
-
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.ac = ac;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-        this.id = id;
-
-    }
-
-    //Todo: с таким большим количеством конструкторов явно надо что-то делать. Может быть добавить билдер в класс или добавить метод конвертации
-    public Wish(String wish, int price, int priority, boolean archive, String description, String url, ArNoteUser user) {
-        this.wish = wish;
-        this.price = price;
-        this.priority = priority;
-        this.priorityGroup = null;
-        this.ac = archive;
-        this.description = description;
-        this.url = url;
-        this.user = user;
-    }
-}
-
Index: src/main/java/com/antonromanov/arnote/model/investing/response/serializers/IssMetaSerializer.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/IssMetaSerializer.java b/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/IssMetaSerializer.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/IssMetaSerializer.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.serializers;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import java.io.IOException;
-
-public class IssMetaSerializer extends JsonSerializer<Boolean> {
-
-    @Override
-    public void serialize(Boolean value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
-        jsonGenerator.writeString(value ? "on" : "off");
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/enums/Currencies.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Currencies.java b/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Currencies.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Currencies.java	
+++ /dev/null	
@@ -1,29 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.Arrays;
-
-@AllArgsConstructor
-@Getter
-public enum Currencies {
-    RUB("SUR", "RUB", null),
-    USD("USD", null,"USD/RUB"),
-    GBP("GBP", null,null),
-    EUR("EUR", null,"EUR/RUB");
-
-    private final String code;
-    private final String secondName; // второе имя на всякий случай
-    private final String transfer; // перевод из валюты в валюты
-
-    public static String getTransferByCodes(String name){
-        return search(name).transfer;
-    }
-
-    public static Currencies search(String name){
-        return Arrays.stream(Currencies.values())
-                .filter(e->e.code.equals(name) || (e.secondName!=null && e.secondName.equals(name)))
-                .findFirst()
-                .orElse(null);
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooDivRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooDivRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooDivRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooDivRs.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import java.time.LocalDate;
-
-/**
- * ДТО для ответа по дивам от Яху.
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooDivRs {
-    private Double amount; // значение
-    private LocalDate date; // дата
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/shares/foreign/ForeignCalcServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/foreign/ForeignCalcServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/foreign/ForeignCalcServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/foreign/ForeignCalcServiceImpl.java	
+++ /dev/null	
@@ -1,461 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.shares.foreign;
-
-import com.antonromanov.arnote.exceptions.MoexRequestException;
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.Purchase;
-import com.antonromanov.arnote.model.investing.cache.enums.CacheDictType;
-import com.antonromanov.arnote.model.investing.external.requests.ForeignRequests;
-import com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.CurrentPriceRs;
-import com.antonromanov.arnote.model.investing.response.DeltaRs;
-import com.antonromanov.arnote.model.investing.response.DividendRs;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.enums.TinkoffDeltaFinalValuesType;
-import com.antonromanov.arnote.model.investing.response.foreignstocks.AlphavantageSearchListRs;
-import com.antonromanov.arnote.model.investing.response.foreignstocks.AlphavantageSearchRs;
-import com.antonromanov.arnote.model.investing.response.foreignstocks.alphaadvantage.CompanyOverviewRs;
-import com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo.YahooDivRs;
-import com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo.YahooRealTimeQuoteRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDataRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo.MoexDetailInfoRs;
-import com.antonromanov.arnote.model.wish.enums.DeltaMode;
-import com.antonromanov.arnote.services.investment.cache.CacheService;
-import com.antonromanov.arnote.services.investment.calc.shares.SharesCalcService;
-import com.antonromanov.arnote.services.investment.requestservice.RequestService;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import lombok.extern.slf4j.Slf4j;
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import java.time.LocalDate;
-import java.time.Period;
-import java.time.ZoneId;
-import java.time.format.DateTimeFormatter;
-import java.util.*;
-import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
-
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-import static org.apache.commons.lang3.StringUtils.isBlank;
-
-/**
- * Имплементация расчетного сервиса для работы с иностранными бумагами.
- */
-@Slf4j
-public class ForeignCalcServiceImpl implements SharesCalcService {
-
-    @Autowired
-    private RequestService httpClient;
-
-    @Autowired
-    private CacheService cacheService;
-
-    private final String FOREIGN_KEY_FOR_CACHE = "|FOREIGN";
-    private final String ALFA_ADVANTAGE_API_KEY = "3PV5BRWZZZM1T2BA";
-
-    @Override
-    public MoexDocumentRs getCandles(String ticker, LocalDate fromDate, LocalDate tillDate) {
-        return null;
-    }
-
-    @Override
-    public ConsolidatedDividendsRs getDivsByTicker(String ticker) {
-        return null;
-    }
-
-    @Override
-    public Optional<Double> getCurrentQuoteByTicker(String ticker) {
-        return Optional.empty();
-    }
-
-    /**
-     * Запросить текущую цену акции по тикеру. Та, что обновляется раз в 15 минут с торгов.
-     *
-     * @return
-     */
-    @Override
-    public CurrentPriceRs getRealTimeQuote(String ticker) {
-
-        if (cacheService.checkDict(CacheDictType.REALTIME_QUOTES, ticker)) {
-            return cacheService.getDict(CacheDictType.REALTIME_QUOTES, ticker);
-        } else {
-
-            YahooRealTimeQuoteRs response = httpClient.sendAndMarshallForeignRequest(ForeignRequests.GET_REALTIME_QUOTE,
-                    new LinkedList<>(Collections.singletonList(ticker)), YahooRealTimeQuoteRs.class);
-
-            /*
-             * Все ценники все же переводим в рубли.
-             */
-            String currency = response.getQuoteSummary().getResult().get(0).getPrice().getCurrency();
-            Double currentPrice = getCurrencyMultiplier(currency) *
-                    response.getQuoteSummary().getResult().get(0).getPrice().getRegularMarketPrice().getRaw();
-            Double priceChange = getCurrencyMultiplier(currency) *
-                    response.getQuoteSummary().getResult().get(0).getPrice().getRegularMarketChange().getRaw();
-            Double priceChangePrt = getCurrencyMultiplier(currency) *
-                    response.getQuoteSummary().getResult().get(0).getPrice().getRegularMarketChangePercent().getRaw();
-
-            LocalDate priceDate = parseStringEpochMilDate(String.valueOf(response
-                    .getQuoteSummary()
-                    .getResult()
-                    .get(0)
-                    .getPrice()
-                    .getRegularMarketTime()));
-
-            CurrentPriceRs result = CurrentPriceRs.builder()
-                    .currentPrice(currentPrice)
-                    .currency(Currencies.search(currency))
-                    .minLot(1)
-                    .ticker(ticker)
-                    .date(priceDate)
-                    .time(parseEpochMilToTime(response
-                            .getQuoteSummary()
-                            .getResult()
-                            .get(0)
-                            .getPrice()
-                            .getRegularMarketTime()))
-                    .lastChange(priceChange)
-                    .lastChangePrcnt(priceChangePrt*100)
-                    .build();
-
-            cacheService.putToCache(CacheDictType.REALTIME_QUOTES, ticker, result, CurrentPriceRs.class);
-            return result;
-        }
-    }
-
-    @Override
-    public MoexDocumentRs getCurrentQuoteByBoardId(String boardId) {
-        return null;
-    }
-
-    @Override
-    public Optional<MoexDetailInfoRs> getDetailInfo(String ticker) {
-        return Optional.empty();
-    }
-
-    @Override
-    public String getBoardId(String ticker) {
-        return null;
-    }
-
-    /**
-     * Запросить имя инструмента.
-     *
-     * @param ticker - тикер.
-     * @return
-     */
-    @Override
-    public String getInstrumentName(String boardId, String ticker) {
-        if (cacheService.checkDict(CacheDictType.INSTRUMENT_NAME, ticker)) {
-            return cacheService.getDict(CacheDictType.INSTRUMENT_NAME, ticker);
-        } else {
-
-            CompanyOverviewRs companyInfo = httpClient.sendAndMarshallForeignRequest(ForeignRequests.GET_INSTRUMENT_NAME,
-                    new LinkedList<>(Arrays.asList(ticker, "OVERVIEW", ALFA_ADVANTAGE_API_KEY)), CompanyOverviewRs.class);
-
-            cacheService.putToCache(CacheDictType.INSTRUMENT_NAME, ticker, companyInfo.getName(), String.class);
-            return companyInfo.getName();
-        }
-    }
-
-    /**
-     * Запросить и посчитать дельту.
-     *
-     * @param ticker            - тикер.
-     * @param currentStockPrice - текущая рыночная ставка (цена)
-     * @param purchaseList      - список покупок (цен) пользователя
-     * @return
-     */
-    @Override
-    public DeltaRs calculateDelta(String ticker, Double currentStockPrice, List<Purchase> purchaseList,
-                                  DeltaMode deltaMode) {
-        if (!isBlank(ticker) && (currentStockPrice != null && currentStockPrice > 0)) {
-
-            MoexDocumentRs doc = getHistory(ticker, null, null);
-
-            /*
-             * Как считаем:
-             *
-             * deltaInRubles = текущая цена - (цена по самой ранней дате)
-             * deltaPeriod = Миллисекунды от (текущая дата - (самая ранняя дата истории))
-             * tinkoffDelta = (сумма покупок * текущую цену рынка) - (Сумма(лот * цену по каждой покупке))
-             */
-
-            return DeltaRs.builder()
-                    .tinkoffDelta(getTcsDeltaValues(purchaseList, currentStockPrice)
-                            .get(TinkoffDeltaFinalValuesType.DELTA_FINAL))
-                    .tinkoffDeltaPercent(getTcsDeltaValues(purchaseList, currentStockPrice)
-                            .get(TinkoffDeltaFinalValuesType.DELTA_PERCENT))
-                    .deltaInRubles((doc.getData()
-                            .getRow()
-                            .stream()
-                            .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                            .map(dv -> Double.valueOf(dv.getLegalClosePrice()))
-                            .map(Math::round)
-                            .map(n -> currentStockPrice - n)
-                            .orElse(0D)))
-                    .totalPercent(doc.getData()
-                            .getRow()
-                            .stream()
-                            .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                            .map(dv -> Double.valueOf(dv.getLegalClosePrice()))
-                            .map(n -> ((currentStockPrice - n) / n) * 100)
-                            .orElse(0D))
-                    .deltaPeriod(doc.getData()
-                            .getRow()
-                            .stream()
-                            .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                            .map(r -> {
-                                Period period = Period.between(LocalDate.parse(r.getTradeDate()), LocalDate.now());
-                                int diffInDays = Math.abs(period.getDays());
-                                return TimeUnit.DAYS.toMillis(diffInDays);
-                            })
-                            .orElse(0L))
-                    .build();
-        } else {
-            return null;
-        }
-    }
-
-    @Override
-    public Integer calculateFinalPrice(Bond bond) {
-        if (bond.getIsBought()) { // если это ФАКТ
-            return bond.getPurchaseList().stream()
-                    .map(p -> p.getLot() * p.getPrice())
-                    .reduce((double) 0, Double::sum).intValue();
-        } else { // если ПЛАН
-            return (int) Math.round(((getRealTimeQuote(bond.getTicker()
-            )).getCurrentPrice()) * getMinimalLot(bond.getTicker(), bond.getUser()));
-        }
-    }
-
-    /**
-     * Подготовить дивиденды.
-     *
-     * @return
-     */
-    @Override
-    public ConsolidatedDividendsRs getDividends(Bond bond) {
-
-        if (cacheService.checkDict(CacheDictType.DIVS_BY_TICKER, bond.getTicker())) {
-            return cacheService.getDict(CacheDictType.DIVS_BY_TICKER, bond.getTicker());
-        } else {
-
-            LocalDate nowMinus2yYears = LocalDate.now().minusYears(2).withMonth(1).withDayOfMonth(1);
-            LocalDate nowDate = LocalDate.now().withMonth(12).withDayOfMonth(31);
-            ZoneId zoneId = ZoneId.systemDefault();
-            long nowMinus2YearsInEpochMili = nowMinus2yYears.atStartOfDay(zoneId).toEpochSecond();
-            long nowDateInEpochMili = nowDate.atStartOfDay(zoneId).toEpochSecond();
-
-            Optional<String> response = httpClient.sendForeignRequest(ForeignRequests.GET_DIVS,
-                    new LinkedList<>(Arrays.asList(bond.getTicker(), String.valueOf(nowMinus2YearsInEpochMili),
-                            String.valueOf(nowDateInEpochMili), "1mo", "true", "div%7Csplit")));
-
-            Map<String, Object> divList = response.map(r -> {
-                JSONObject obj = new JSONObject(response.get()).getJSONObject("chart");
-                JSONArray result = obj.getJSONArray("result");
-                try {
-                    return result.getJSONObject(0).getJSONObject("events").getJSONObject("dividends").toMap();
-                } catch (Exception e) {
-                    return new HashMap<String, Object>();
-                }
-            }).orElse(new HashMap<>());
-
-            ConsolidatedDividendsRs resultDivs;
-            if (divList.size()<1) {
-                 resultDivs = ConsolidatedDividendsRs.builder()
-                         .dividendList(null)
-                         .build();
-            } else {
-                String currencyInfo = response.map(r -> {
-                    JSONObject obj = new JSONObject(response.get()).getJSONObject("chart");
-                    JSONArray result = obj.getJSONArray("result");
-                    return result.getJSONObject(0).getJSONObject("meta").getString("currency");
-                }).orElseThrow(MoexRequestException::new);
-
-                Map<LocalDate, YahooDivRs> divListBasedOnLocalDatesAsKey = divList.entrySet().stream()
-                        .map(o -> {
-                            ObjectMapper mapper = new ObjectMapper();
-                            Map<String, Double> valueMap = mapper.convertValue(o.getValue(), Map.class);
-                            return new AbstractMap
-                                    .SimpleEntry<LocalDate, YahooDivRs>(parseStringEpochMilDate(o.getKey()),
-                                    YahooDivRs.builder()
-                                            .amount(valueMap.get("amount"))
-                                            .date(parseStringEpochMilDate(String.valueOf(valueMap.get("date"))))
-                                            .build());
-                        })
-                        .collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue));
-
-                Map<LocalDate, YahooDivRs> mapSorted = new TreeMap<LocalDate, YahooDivRs>(divListBasedOnLocalDatesAsKey);
-
-                resultDivs = ConsolidatedDividendsRs.builder()
-                        .dividendList(mapSorted.entrySet()
-                                .parallelStream()
-                                .map(e -> DividendRs.builder()
-                                        .registryCloseDate(e.getValue().getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")))
-                                        .currencyId(Currencies.search(currencyInfo))
-                                        .value(e.getValue().getAmount() * getCurrencyMultiplier(currencyInfo))
-                                        .build())
-                                .collect(Collectors.toList()))
-                        .build();
-            }
-
-            resultDivs.calculateSum();
-            resultDivs.calculatePercent(getHistory(bond.getTicker(), null, null));
-            cacheService.putToCache(CacheDictType.DIVS_BY_TICKER, bond.getTicker(), resultDivs, ConsolidatedDividendsRs.class);
-            return resultDivs;
-        }
-    }
-
-    /**
-     * Подготовить данные по валюте.
-     *
-     * @return
-     */
-    @Override
-    public String getCurrencyOfShare(String ticker) {
-        if (cacheService.checkDict(CacheDictType.CURRENCY, ticker)) {
-            return cacheService.getDict(CacheDictType.CURRENCY, ticker);
-        } else {
-            String cur = getRealTimeQuote(ticker).getCurrency() == null ?
-                    Currencies.USD.getCode() :
-                    getRealTimeQuote(ticker).getCurrency().getCode();
-            cacheService.putToCache(CacheDictType.CURRENCY, ticker, cur, String.class);
-            return cur;
-        }
-    }
-
-    @Override
-    public Integer getMinimalLot(String ticker, ArNoteUser user) {
-        return 1;
-    }
-
-    /**
-     * Запросить исторические данные.
-     *
-     * @return
-     */
-    @Override
-    public MoexDocumentRs getHistory(String ticker, String boardId, LocalDate forDate) {
-
-        if (cacheService.checkDict(CacheDictType.HISTORY, ticker + FOREIGN_KEY_FOR_CACHE)) {
-            return cacheService.getDict(CacheDictType.HISTORY, ticker + FOREIGN_KEY_FOR_CACHE);
-        } else {
-
-            LocalDate earlyDate = LocalDate.now().minusYears(10).withMonth(1).withDayOfMonth(1);
-            ZoneId zoneId = ZoneId.systemDefault();
-            long earlyDateEpochMili = earlyDate.atStartOfDay(zoneId).toEpochSecond();
-            long nowDateInEpochMili = (LocalDate.now()).atStartOfDay(zoneId).toEpochSecond();
-
-            Optional<String> response = httpClient.sendForeignRequest(ForeignRequests.GET_HISTORY,
-                    new LinkedList<>(Arrays.asList(ticker, String.valueOf(earlyDateEpochMili),
-                            String.valueOf(nowDateInEpochMili), "1d")));
-
-            LinkedHashMap<LocalDate, Double> mapInForeignFormat = response.map(r -> {
-                JSONObject obj = new JSONObject(r).getJSONObject("chart");
-                JSONArray internalResult = obj.getJSONArray("result");
-                JSONArray timestampArray = internalResult.getJSONObject(0).getJSONArray("timestamp");
-                JSONArray quotesArray = internalResult
-                        .getJSONObject(0)
-                        .getJSONObject("indicators")
-                        .getJSONArray("quote")
-                        .getJSONObject(0)
-                        .getJSONArray("close");
-
-                LinkedHashMap<LocalDate, Double> quotesMap = new LinkedHashMap<>();
-                for (int i = 0; i < timestampArray.length(); i++) {
-                    quotesMap.put(parseStringEpochMilDate(timestampArray.get(i).toString()), quotesArray.getDouble(i));
-                }
-                return quotesMap;
-            }).orElseThrow(MoexRequestException::new);
-
-            MoexDocumentRs doc = new MoexDocumentRs();
-            MoexDataRs data = new MoexDataRs();
-            Double curMultiplier = getCurrencyMultiplier(getCurrencyOfShare(ticker));
-            data.setRow(mapInForeignFormat.entrySet().stream()
-                    .map(es -> {
-                        MoexRowsRs row = new MoexRowsRs();
-                        row.setSecid(ticker);
-                        row.setTradeDate(es.getKey().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
-                        row.setLegalClosePrice(String.valueOf(es.getValue() * curMultiplier));
-                        row.setCurrencyId("SUR");
-                        return row;
-                    })
-                    .collect(Collectors.toCollection(ArrayList::new)));
-            doc.setData(data);
-            cacheService.putToCache(CacheDictType.HISTORY, ticker + FOREIGN_KEY_FOR_CACHE, doc, MoexDocumentRs.class);
-            return doc;
-        }
-    }
-
-    @Override
-    public Double getCurrencyMultiplier(String currency) {
-
-        if (cacheService.checkDict(CacheDictType.CURRENCY_MULTIPLIER, currency)) {
-            return cacheService.getDict(CacheDictType.CURRENCY_MULTIPLIER, currency);
-        } else {
-
-            CommonMoexDoc doc = httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_CURRENCY_CHANGE_COURSES, null, null);
-
-            Double curMult = calculateCurrencyMultiplier(doc, currency);
-            cacheService.putToCache(CacheDictType.CURRENCY_MULTIPLIER, currency, curMult, Double.class);
-            return curMult;
-        }
-    }
-
-    @Override
-    public MoexDocumentRs findSharesByBoardId(String boardId) {
-        return null;
-    }
-
-    @Override
-    public List<String> getTradeModes() {
-        return null;
-    }
-
-    /**
-     * Найти буржуйскую бумагу по ключевому слову. Возвращает только акции.
-     *
-     * @param keyword
-     * @return
-     */
-    @Override
-    public MoexDocumentRs findInstrumentsByName(String keyword) {
-        AlphavantageSearchListRs response = httpClient.sendAndMarshallForeignRequest(ForeignRequests.FIND_INSTRUMENT,
-                new LinkedList<>(Arrays.asList(keyword, "SYMBOL_SEARCH", ALFA_ADVANTAGE_API_KEY)), AlphavantageSearchListRs.class);
-
-        if (response!=null && response.getBestMatches() != null && response.getBestMatches().size()>0) {
-            List<AlphavantageSearchRs> filteredList = response.getBestMatches().stream()
-                    .filter(Objects::nonNull)
-                    .filter(sec -> "Equity".equalsIgnoreCase(sec.getType()))
-                    .collect(Collectors.toList());
-
-            MoexDocumentRs document = new MoexDocumentRs();
-            MoexDataRs documentData = new MoexDataRs();
-
-
-            ArrayList<MoexRowsRs> rows = filteredList.stream()
-                    .map(r -> {
-                        MoexRowsRs row = new MoexRowsRs();
-                        row.setSecid(r.getSymbol());
-                        row.setCurrencyId(r.getCurrency());
-                        row.setSecName(r.getName());
-                        return row;
-                    })
-                    .filter(row -> Currencies.search(row.getCurrencyId()) != null)
-                    .collect(Collectors.toCollection(ArrayList::new));
-
-            documentData.setRow(rows);
-            document.setData(documentData);
-            return document;
-        } else {
-            return new MoexDocumentRs();
-        }
-
-    }
-}
Index: src/main/java/com/antonromanov/arnote/entity/Salary.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/Salary.java b/src/main/java/com/antonromanov/arnote/entity/Salary.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/Salary.java	
+++ /dev/null	
@@ -1,55 +0,0 @@
-package com.antonromanov.arnote.entity;
-
-import com.antonromanov.arnote.dto.request.NewSalaryRq;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.utils.JSONTemplate;
-import lombok.*;
-import javax.persistence.*;
-import java.time.LocalDateTime;
-import java.util.Date;
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "salary")
-public class Salary {
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "salary_seq_gen")
-	@SequenceGenerator(name = "salary_seq_gen", sequenceName ="salary_id_seq", allocationSize = 1)
-	private long id;
-
-	@Column(name = "fullslary", nullable = true)
-	private Integer fullSlary; //todo: переименовать
-
-	@Column(name = "residualsalary", nullable = true)
-	private Integer residualSalary;
-
-	@Column(name = "date", nullable = true)
-	@Temporal(TemporalType.DATE)
-	private Date salarydate; //todo: переименовать
-
-	@Column
-	private LocalDateTime salaryTimeStamp;
-
-	@ManyToOne(cascade = CascadeType.ALL)
-	private LocalUser user;
-
-	public Salary(Integer fullSlary, Integer residualSalary) {
-		this.fullSlary = fullSlary;
-		this.residualSalary = residualSalary;
-	}
-
-	public Salary(NewSalaryRq newSalaryRq, LocalUser user) {
-		this.fullSlary = newSalaryRq.getFullSalary();
-		this.residualSalary = newSalaryRq.getResidualSalary();
-		this.user = user;
-		Date currentDate = new Date();
-		this.setSalarydate(currentDate);
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/SearchRq.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/SearchRq.java b/src/main/java/com/antonromanov/arnote/model/wish/SearchRq.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/SearchRq.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * Входное ДТО для поиска желаний.
- */
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class SearchRq {
-    private String wishName;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandler.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandler.java b/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandler.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandler.java	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package com.antonromanov.arnote.services.investment.xmlparse;
-
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import org.springframework.http.ResponseEntity;
-import java.util.Optional;
-
-public interface XmlHandler {
-    Optional<ConsolidatedDividendsRs> parse (ResponseEntity<String> response);
-    CommonMoexDoc marshall(ResponseEntity<String> response, Class<?> moexClass);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailDataRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailDataRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailDataRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailDataRs.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo;
-
-import lombok.Data;
-
-import javax.xml.bind.annotation.*;
-import java.util.ArrayList;
-
-
-@XmlRootElement(name = "data")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexInstrumentDetailDataRs {
-    @XmlAttribute(name = "id")
-    private String id;
-
-    @XmlElementWrapper(name = "rows")
-    @XmlElement(name = "row")
-    ArrayList<MoexInstrumentDetailRowsRs> rowsList = new ArrayList <> ();
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/alphaadvantage/CompanyOverviewRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/alphaadvantage/CompanyOverviewRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/alphaadvantage/CompanyOverviewRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/alphaadvantage/CompanyOverviewRs.java	
+++ /dev/null	
@@ -1,36 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.alphaadvantage;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * ДТО для информации о бумаге.
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class CompanyOverviewRs {
-
-    @JsonProperty(value = "Symbol")
-    private String ticker;
-    @JsonProperty(value = "AssetType")
-    private String assetType;
-    @JsonProperty(value = "Name")
-    private String name;
-    @JsonProperty(value = "Description")
-    private String description;
-    @JsonProperty(value = "Exchange")
-    private String exchange;
-    @JsonProperty(value = "Currency")
-    private String currency;
-    @JsonProperty(value = "Country")
-    private String country;
-    @JsonProperty(value = "Sector")
-    private String sector;
-    @JsonProperty(value = "Industry")
-    private String industry;
-}
Index: src/main/java/com/antonromanov/arnote/model/common/enums/CalendarType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/common/enums/CalendarType.java b/src/main/java/com/antonromanov/arnote/model/common/enums/CalendarType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/common/enums/CalendarType.java	
+++ /dev/null	
@@ -1,24 +0,0 @@
-package com.antonromanov.arnote.model.common.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.Arrays;
-
-
-@AllArgsConstructor
-@Getter
-public enum CalendarType {
-    WEEKEND(1, "Выходной"),
-    WORK (2, "рабочий и сокращенный"),
-    WORK_WEEKEND (2, "рабочий день (суббота/воскресенье)");
-
-    private final Integer id;
-    private final String description;
-
-    public static CalendarType searchByIdType(String id){
-        return Arrays.stream(CalendarType.values())
-                .filter(e->e.id == Integer.parseInt(id))
-                .findFirst()
-                .orElse(null);
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDataForBoardIdRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDataForBoardIdRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDataForBoardIdRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDataForBoardIdRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.boardid;
-
-import lombok.Data;
-
-import javax.xml.bind.annotation.*;
-import java.util.ArrayList;
-
-
-@XmlRootElement(name = "data")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexDataForBoardIdRs {
-
-    @XmlElementWrapper(name = "rows")
-    @XmlElement(name = "row")
-    ArrayList<MoexRowsForBoardIdRs> rowList = new ArrayList <> ();
-
-}
Index: src/main/java/com/antonromanov/arnote/dto/request/NewSalaryRq.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/dto/request/NewSalaryRq.java b/src/main/java/com/antonromanov/arnote/dto/request/NewSalaryRq.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/dto/request/NewSalaryRq.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.antonromanov.arnote.dto.request;
-
-import lombok.Data;
-
-/**
- * Используется для добавления новой зарплаты.
- */
-@Data
-public class NewSalaryRq {
-    private int fullSalary;
-    private int residualSalary;
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/JsonNullException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/JsonNullException.java b/src/main/java/com/antonromanov/arnote/exceptions/JsonNullException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/JsonNullException.java	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class JsonNullException extends Exception {
-
-	private String message;
-
-	public JsonNullException(String message) {
-		this.message = message;
-	}
-
-	public JsonNullException(Throwable cause, String message) {
-		super(cause);
-		this.message = message;
-	}
-
-	public String getMessage() {
-		return message;
-	}
-
-
-}
Index: src/main/java/com/antonromanov/arnote/controller/StatisticController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/StatisticController.java b/src/main/java/com/antonromanov/arnote/controller/StatisticController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/StatisticController.java	
+++ /dev/null	
@@ -1,75 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.response.SumEntity;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.web.bind.annotation.CrossOrigin;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-import java.security.Principal;
-import java.util.Optional;
-
-/**
- * REST-контроллер получения статистических данных.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/statistic")
-@Slf4j
-@AllArgsConstructor
-@Data
-public class StatisticController {
-
-    private final MainService mainService;
-    private final UsersRepo usersRepo;
-    private final Utils utils;
-
-    /**
-     * Получить статистику по всем желаниям
-     *
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping("/sum")
-    public SumEntity getSum(Principal principal) throws UserNotFoundException {
-
-        LocalUser localUser = utils.getUserFromPrincipal(principal);
-
-        return Optional.ofNullable(mainService.getLastSalary(localUser))
-                .map(ls -> {
-                    int days;
-                    int implementedSumAllTime;
-                    int implementedSumMonth;
-
-                    int realizedWishesSize = (int) (mainService.getAllRealizedWishes(localUser)).stream()
-                            .filter(wf -> wf.getRealizationDate() != null && wf.getCreationDate() != null)
-                            .map(w -> (w.getRealizationDate().getTime() - w.getCreationDate().getTime()))
-                            .count();
-
-                    days = (realizedWishesSize == 0) ? 0 : (30 / realizedWishesSize);
-                    implementedSumAllTime = mainService.getImplementedSum(localUser, 1).orElse(0);
-                    implementedSumMonth = mainService.getImplementedSum(localUser, 2).orElse(0);
-
-                    return SumEntity.builder()
-                            .all(mainService.getSumForAllWishes(localUser))
-                            .allPeriodForImplementation(mainService.calculateImplementationPeriod(mainService.getSumForAllWishes(localUser), localUser))
-                            .priorityPeriodForImplementation(mainService.calculateImplementationPeriod(mainService.getSumForPriorityWishes(localUser), localUser))
-                            .lastSalary(mainService.getLastSalary(localUser).getResidualSalary())
-                            .averageImplementationTime(days)
-                            .implementedSumAllTime(implementedSumAllTime)
-                            .implementedSumMonth(implementedSumMonth)
-                            .priority(mainService.getSumForPriorityWishes(localUser)).build();
-                })
-                .orElseThrow(() -> new RuntimeException()); //todo: тут надо нормальный эксепшн бросить
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/ArNoteUser.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/ArNoteUser.java b/src/main/java/com/antonromanov/arnote/model/ArNoteUser.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/ArNoteUser.java	
+++ /dev/null	
@@ -1,158 +0,0 @@
-package com.antonromanov.arnote.model;
-
-
-import com.antonromanov.arnote.model.investing.InvestingSortMode;
-import com.antonromanov.arnote.model.wish.SortMode;
-import com.antonromanov.arnote.model.wish.enums.DeltaMode;
-import com.antonromanov.arnote.model.wish.enums.FilterMode;
-import com.vladmihalcea.hibernate.type.json.JsonBinaryType;
-import lombok.Getter;
-import lombok.Setter;
-import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
-import javax.persistence.*;
-import java.time.LocalDateTime;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
-@Entity
-@Getter
-@Setter
-@Table(name = "users")
-public class ArNoteUser {
-
-	public ArNoteUser(String login, Role userRole, String pwd, boolean usercryptomode, String email, String fullname) {
-		this.login = login;
-		this.pwd = pwd;
-		this.userCryptoMode = usercryptomode;
-		this.userRole = userRole;
-		this.email = email;
-		this.fullname = fullname;
-	}
-
-	public enum Role { USER, ADMIN }
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "users_seq_gen")
-	@SequenceGenerator(name = "users_seq_gen", sequenceName ="users_id_seq", allocationSize = 1)
-	private long id;
-
-	/**
-	 * Логин пользователя.
-	 */
-	@Column
-	private String login;
-
-	/**
-	 * Пароль пользователя.
-	 */
-	@Column
-	private String pwd;
-
-	/**
-	 * Роль пользователя.
-	 */
-	@Enumerated(EnumType.STRING)
-	private Role userRole = Role.USER;
-
-	/**
-	 * Режим шифрования на фронте.
-	 */
-	@Column(nullable = false, columnDefinition = "boolean default false")
-	private Boolean userCryptoMode;
-
-	/**
-	 * Дата создания пользователя.
-	 */
-	@Column
-	@Temporal(TemporalType.DATE)
-	private Date creationDate;
-
-	/**
-	 * Email-адрес пользователя.
-	 */
-	@Column
-	private String email;
-
-	/**
-	 * Полное имя пользователя.
-	 */
-	@Column
-	private String fullname; //todo: нормально переименовать
-
-	/**
-	 * Режим отображения - таблица или помесячная группировка.
-	 */
-	@Column
-	private String viewMode;
-
-	/**
-	 * Какую дельту отдаем пользователю. Варианта два:
-	 *
-	 * 1) tinkoffDelta = (сумма покупок * текущую цену рынка) - (Сумма(лот * цену по каждой покупке))
-	 * 2) candleDayDelta = (цена текущая - цена закрытия вчера) * кол-во акций в портфеле
-	 *
-	 * Какой отображаем?
-	 */
-	@Enumerated(EnumType.STRING)
-	private DeltaMode deltaMode;
-
-	/**
-	 * Режим сортировки
-	 */
-	@Enumerated(EnumType.STRING)
-	private SortMode sortMode;
-
-	/**
-	 * Режим фильтрации.
-	 */
-	@Enumerated(EnumType.STRING)
-	private FilterMode filterMode;
-
-
-	@Column
-	private LocalDateTime lastOperationTime;
-
-	@Column
-	private String lastOperation;
-
-	/**
-	 * Режим сортировки для ценных бумаг
-	 */
-	@Enumerated(EnumType.STRING)
-	private InvestingSortMode investingSortMode;
-
-	/**
-	 * Режим фильтрации для ценных бумаг
-	 */
-	@Type(type = "jsonb")
-	@Column(columnDefinition = "jsonb")
-	private Map<String, String> investingFilterMode = new HashMap<>();
-
-
-	@Override
-	public String toString() {
-		return "LocalUser{" +
-				"id=" + id +
-				", login='" + login + '\'' +
-				", pwd='" + pwd + '\'' +
-				", userRole=" + userRole +
-				", userCryptoMode=" + userCryptoMode +
-				", creationDate=" + creationDate +
-				", email='" + email + '\'' +
-				", fullname='" + fullname + '\'' +
-				'}';
-	}
-
-	public ArNoteUser(String login, String pw) {
-		this.login = login;
-		this.pwd = pw;
-		this.userCryptoMode = false;
-	}
-
-	public ArNoteUser() {
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/Bond.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/Bond.java b/src/main/java/com/antonromanov/arnote/model/investing/Bond.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/Bond.java	
+++ /dev/null	
@@ -1,48 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.response.enums.StockExchange;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-import javax.persistence.*;
-import java.util.ArrayList;
-import java.util.List;
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@Table(name = "bond")
-public class Bond {
-
-    @Id
-    @Column(name = "id")
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "bonds_seq_gen")
-    @SequenceGenerator(name = "bonds_seq_gen", sequenceName = "bonds_id_seq", allocationSize = 1)
-    private long id;
-
-    @Column
-    private String ticker; // биржевой тикер
-
-    @Column
-    @Enumerated(EnumType.STRING)
-    private BondType type; // тип бумаги - облигация, фонд, акция
-
-    @Column
-    @Enumerated(EnumType.STRING)
-    private StockExchange stockExchange; // Биржа
-
-    @Column
-    private Boolean isBought; // факт / План
-
-    @ManyToOne(cascade = CascadeType.DETACH)
-    private ArNoteUser user;
-
-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
-    @JoinColumn(name = "post_id")
-    private List<Purchase> purchaseList = new ArrayList<>();
-}
-
Index: src/main/java/com/antonromanov/arnote/model/investing/cache/CachedStorage.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/cache/CachedStorage.java b/src/main/java/com/antonromanov/arnote/model/investing/cache/CachedStorage.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/cache/CachedStorage.java	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package com.antonromanov.arnote.model.investing.cache;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import java.time.LocalTime;
-import java.util.UUID;
-
-/**
- * Сущность, хранящая в кэше все нужные нам данные, полученные с биржи.
- *
- * Какие мы используем запросы:
- *
- * - calculateService.getCurrentQuote - Тек. цена бумаги - Optional<Double> -
- * - calculateService.getCurrency - Данные по валюте - String
- * - calculateService.getDividends - Дивиденды - ConsolidatedDividendsRs
- * - calculateService.getMinimalLot - Минимальный лот - Integer
- * - calculateService.calculateFinalPrice - Финальная цена - Integer
- * - calculateService.getDelta - дельта - DeltaRs
- * - calculateService.prepareBoardId - board_id - String
- * - calculateService.getInstrumentName - Имя инструмента - Optional<String>
- */
-@AllArgsConstructor
-@Data
-public class CachedStorage {
-    private final UUID uuid; // уникальной идентификатор записи
-    private final int count; // попробуем использовать для сохранения статистики
-    private final LocalTime creationTime;
-}
Index: src/main/java/com/antonromanov/arnote/email/EmailSender.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/email/EmailSender.java b/src/main/java/com/antonromanov/arnote/email/EmailSender.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/email/EmailSender.java	
+++ /dev/null	
@@ -1,53 +0,0 @@
-package com.antonromanov.arnote.email;
-
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.PropertySource;
-import org.springframework.mail.javamail.JavaMailSender;
-import org.springframework.mail.javamail.MimeMessageHelper;
-import org.springframework.stereotype.Component;
-import javax.mail.MessagingException;
-import javax.mail.internet.MimeMessage;
-
-
-@PropertySource("classpath:application.properties")
-@Component
-public class EmailSender {
-
-
-	private static org.slf4j.Logger LOGGER = LoggerFactory.getLogger("console_logger");
-
-	@Value("${email.address}")
-	private String fromAddress;
-
-	@Autowired
-	private JavaMailSender sender;
-
-	public EmailStatus sendPlainText(String to, String subject, String text) {
-		return sendM(to, subject, text, false);
-	}
-
-	private EmailStatus sendM(String to, String subject, String text, Boolean isHtml) {
-
-		try {
-			MimeMessage mail = sender.createMimeMessage();
-			MimeMessageHelper helper = new MimeMessageHelper(mail, true);
-			helper.setTo(to);
-			helper.setFrom(fromAddress);
-			helper.setSubject(subject);
-			helper.setText(text, isHtml);
-			sender.send(mail);
-			LOGGER.info("Send email '{}' to: {}", subject, to);
-			return new EmailStatus(to, subject, text).success();
-
-		} catch (MessagingException mailException) {
-			mailException.printStackTrace();
-			LOGGER.error(String.format("Problem with sending email to: {}, error message: {}", to, mailException.getMessage()));
-			return new EmailStatus(to, subject, text).error(mailException.getMessage());
-		}
-	}
-
-
-
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMarshalingException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMarshalingException.java b/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMarshalingException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMarshalingException.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class MoexXmlResponseMarshalingException extends RuntimeException {
-
-	private String message;
-
-	public MoexXmlResponseMarshalingException() {
-		this.message = "Ошибка маршеллинга данных от биржи!";
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/services/MultiThreadConsolidatedCalculation.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/MultiThreadConsolidatedCalculation.java b/src/main/java/com/antonromanov/arnote/services/MultiThreadConsolidatedCalculation.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/MultiThreadConsolidatedCalculation.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.services;
-
-public class MultiThreadConsolidatedCalculation implements Runnable {
-
-    int j = 0;
-
-    @Override
-    public void run() {
-        for (int i = 0; i < 1000; i++) {
-            try {
-                Thread.sleep(200);
-                j = j + 1;
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/NoDataYetException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/NoDataYetException.java b/src/main/java/com/antonromanov/arnote/exceptions/NoDataYetException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/NoDataYetException.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class NoDataYetException extends Exception {
-
-	private String message;
-
-	public NoDataYetException(Boolean switcher) { //todo: переделать на енам
-		if (switcher){
-			this.message = "ERR-01";	// Еще нет желаний
-		} else {
-			this.message = "ERR-02"; // Еще нет зарплаты
-		}
-	}
-
-	public NoDataYetException(Throwable cause, String message) {
-		super(cause);
-		this.message = message;
-	}
-
-	public NoDataYetException() {
-		super();
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRegularMarketPriceRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRegularMarketPriceRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRegularMarketPriceRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRegularMarketPriceRs.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * ДТО для ответа по текущей ставке от Яху
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooRegularMarketPriceRs {
-    private Double raw;
-    private String fmt;
-}
Index: src/main/java/com/antonromanov/arnote/services/FinPlanService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/FinPlanService.java b/src/main/java/com/antonromanov/arnote/services/FinPlanService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/FinPlanService.java	
+++ /dev/null	
@@ -1,198 +0,0 @@
-package com.antonromanov.arnote.services;
-
-import com.antonromanov.arnote.dto.rq.*;
-import com.antonromanov.arnote.dto.rs.*;
-import com.antonromanov.arnote.dto.rs.FinalBalanceCalculationsRs;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import java.security.Principal;
-
-public interface FinPlanService {
-    /**
-     * Запросить консолидированную таблицу из кэша.
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    FinPlanListRs getFinPlanTableFromCache(Principal principal) throws UserNotFoundException;
-
-    /**
-     * Запросить консолидированную таблицу из БД.
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    FinPlanListRs getFinPlanTableFromDb(Principal principal) throws UserNotFoundException;
-
-    /**
-     * Добавить кредит.
-     *
-     * @param principal
-     * @param request
-     * @return
-     */
-    AddCreditRs addCredit(Principal principal, CreditRq request) throws UserNotFoundException;
-
-    /**
-     * Удалить кредит.
-     *
-     * @param principal
-     * @param id
-     * @return
-     */
-    AddCreditRs deleteLoan(Principal principal, Long id) ;
-
-    /**
-     * Запросить список кредитов.
-     *
-     * @param principal
-     * @return
-     */
-    FullLoansListRs getFullLoansList(Principal principal) throws UserNotFoundException;
-
-    /**
-     * Редактировать кредит.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     */
-    AddCreditRs editLoan(CreditRq payload, Principal principal) throws UserNotFoundException;
-
-    /**
-     * Добавить доход
-     *
-     * @param payload
-     * @param principal
-     * @return
-     */
-    SingleOperationRs addIncome(IncomeRq payload, Principal principal) throws UserNotFoundException;
-
-    /**
-     * Удалить доход
-     *
-     * @param principal - юзер
-     * @return
-     */
-    SingleOperationRs deleteIncome(Principal principal, IncomesForDeleteRq req) throws UserNotFoundException;
-
-    /**
-     * Редактировать доход.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     */
-    SingleOperationRs editIncome(IncomeRq payload, Principal principal) throws UserNotFoundException;
-
-    /**
-     * Получить данные по кредиту по ID.
-     * @param id
-     * @param principal
-     * @return
-     */
-    CreditRs getLoanById(Long id, Principal principal) throws UserNotFoundException;
-
-    /**
-     * Деталка по остаткам.
-     * @param payload
-     * @param principal
-     * @return
-     */
-    FinalBalanceCalculationsRs getRemainsDetailInfo(GetRemainsDetailInfoRq payload, Principal principal) throws UserNotFoundException;
-
-    SingleOperationRs addGoal(GoalRq payload, Principal principal) throws UserNotFoundException;
-
-    FullLoansListRs getLoanByDate(LoanByDateRq payload, Principal principal);
-
-    /**
-     * Редактировать цель.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     */
-    SingleOperationRs editGoal(GoalRq payload, Principal principal) throws UserNotFoundException;
-
-    /**
-     * Удалить цель.
-     *
-     * @param principal
-     * @param id
-     * @return
-     */
-    AddCreditRs deleteGoal(Principal principal, Long id) throws UserNotFoundException;
-
-    /**
-     * Получить список ЗП по пользаку.
-     * @param principal
-     * @return
-     */
-    SalaryListRs getSalariesList(Principal principal) throws UserNotFoundException;
-
-    /**
-     * Редактировать зарплату.
-     *
-     * @param principal
-     * @param payload
-     * @return
-     */
-    SingleOperationRs editSalary(Principal principal, SalaryRq payload) throws UserNotFoundException;
-
-    /**
-     * Добавить новую ЗП.
-     * @param principal
-     * @param payload
-     * @return
-     */
-    SingleOperationRs addSalary(Principal principal, SalaryRq payload);
-
-    /**
-     * Удалить ЗП.
-     *
-     * @param principal
-     * @param id
-     * @return
-     */
-    SingleOperationRs deleteSalary(Principal principal, Long id);
-
-    /**
-     * Добавить фриз.
-     *
-     * @param principal
-     * @param request
-     * @return
-     */
-    SingleOperationRs addFreeze(Principal principal, FreezeRq request);
-
-    /**
-     * Удалить фриз.
-     *
-     * @param principal
-     * @param year
-     * @param month
-     * @return
-     */
-    SingleOperationRs deleteFreeze(Principal principal, Long year, Long month);
-
-    /**
-     * Получить свободные слоты по кредитам.
-     *
-     * @param principal
-     * @param payload
-     * @return
-     */
-    FreeLoanSlotsRs getLoansSlots(Principal principal, LoanByDateRq payload) throws UserNotFoundException;
-
-    /**
-     * Стартовать вычисления консолидированной таблицы.
-     *
-     * @param principal
-     * @return
-     */
-    void startCalculation(Principal principal);
-
-    /**
-     * Получить статус потока
-     */
-    Integer getThreadStatus();
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParamsAdapter.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParamsAdapter.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParamsAdapter.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParamsAdapter.java	
+++ /dev/null	
@@ -1,35 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import com.antonromanov.arnote.model.investing.response.serializers.IssMetaSerializer;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonValue;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-/**
- * Параметры URL (которые после ? идут)
- */
-@Data
-@AllArgsConstructor
-@Builder
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public class UrlRequestParamsAdapter {
-    @JsonSerialize(using = IssMetaSerializer.class)
-    @JsonProperty("iss.meta")
-    private Boolean issMeta;
-    @JsonProperty("iss.dp")
-    private String issDp;
-    @JsonProperty("iss.only")
-    private String issOnly;
-    @JsonProperty("securities.columns")
-    private String securitiesColumns;
-    @JsonProperty("boards.columns")
-    private String boardsColumns;
-    @JsonProperty("marketdata.columns")
-    private String marketDataColumns;
-    private String from;
-
-}
Index: src/main/java/com/antonromanov/arnote/controller/SalaryController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/SalaryController.java b/src/main/java/com/antonromanov/arnote/controller/SalaryController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/SalaryController.java	
+++ /dev/null	
@@ -1,73 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.request.NewSalaryRq;
-import com.antonromanov.arnote.dto.response.SumEntity;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.entity.Salary;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.web.bind.annotation.*;
-import java.security.Principal;
-import static com.antonromanov.arnote.utils.Utils.createGsonBuilder;
-
-/**
- * REST-контроллер работы с зарплатой.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/salary")
-@Slf4j
-@AllArgsConstructor
-@Data
-public class SalaryController {
-
-    private final MainService mainService;
-    private final UsersRepo usersRepo;
-    private final Utils utils;
-
-    /**
-     * Получить последнюю зарплату.
-     *
-     * @param principal - JWT-пользователь.
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping()
-    public SumEntity getLastSalary(Principal principal) throws UserNotFoundException {
-        LocalUser localUser = utils.getUserFromPrincipal(principal);
-        return SumEntity.builder()
-                .all(mainService.getSumForAllWishes(localUser))
-                .allPeriodForImplementation(mainService.calculateImplementationPeriod(mainService.getSumForAllWishes(localUser), localUser))
-                .priorityPeriodForImplementation(mainService.calculateImplementationPeriod(mainService.getSumForPriorityWishes(localUser), localUser))
-                .lastSalary(mainService.getLastSalary(localUser).getResidualSalary())
-                .priority(mainService.getSumForPriorityWishes(localUser)).build();
-    }
-
-    /**
-     * Добавить новую зарплату.
-     *
-     * @param principal
-     * @param newSalary
-     * @return
-     * @throws UserNotFoundException
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping()
-    public Salary addSalary(Principal principal, @RequestBody NewSalaryRq newSalary) throws UserNotFoundException {
-
-        log.info("==================== ADD SALARY ======================== ");
-        log.info("PAYLOAD: " + createGsonBuilder().toJson(newSalary));
-        log.info("PRINCIPAL: " + principal.getName());
-
-        LocalUser localUser = utils.getUserFromPrincipal(principal);
-        log.info("======================================================== ");
-        return mainService.saveSalary(new Salary(newSalary, localUser));
-
-
-    }
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/CalendarRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/CalendarRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/CalendarRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/CalendarRepo.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.entity.common.CalendarEntity;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
-
-
-
-@Repository
-public interface CalendarRepo extends JpaRepository<CalendarEntity, Long>{
-
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/enums/ErrorCodes.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/enums/ErrorCodes.java b/src/main/java/com/antonromanov/arnote/exceptions/enums/ErrorCodes.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/enums/ErrorCodes.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.exceptions.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Коды ошибок (в будущем - под рефакторинг)
- */
-@Getter
-@AllArgsConstructor
-public enum ErrorCodes {
-    ERR_O1("ERR-01", "У пользователя еще нет желаний", null), //todo: uiCode точно нужен????
-    ERR_O2("ERR-02", "Ошибка загрузки зарплат или их просто нет", 5004),
-    ERR_O3("ERR-03", "У пользователя еще нет ценных бумаг", null),
-    ERR_O4("ERR-04", "Максимальное число возможных кредитов - 5!", 5001),
-    ERR_O5("ERR-05", "Доходность в этом месяце уже заведена. Отредактируйте ее", 5002),
-    ERR_O6("ERR-06", "SQL ошибка", 5003),
-    ERR_O7("ERR-07", "На выходной день или праздник нет торгов!", 5005),
-    ERR_O8("ERR-08", "Нет данных по торгам на эту дату!", 5006);
-
-    private final String uiCode; //код, который потребляет фронт на текущий момент - потом переделаем
-    private final String description; // Описание пока чисто для меня
-    private final Integer digitalCode; // числовой код
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/common/CommonMoexDoc.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/common/CommonMoexDoc.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/common/CommonMoexDoc.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/common/CommonMoexDoc.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.common;
-
-public interface CommonMoexDoc {
-}
Index: src/main/java/com/antonromanov/arnote/entity/LocalUser.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/LocalUser.java b/src/main/java/com/antonromanov/arnote/entity/LocalUser.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/LocalUser.java	
+++ /dev/null	
@@ -1,147 +0,0 @@
-package com.antonromanov.arnote.entity;
-
-import com.antonromanov.arnote.dto.request.UserDto;
-import com.antonromanov.arnote.enums.FilterMode;
-import com.antonromanov.arnote.enums.SortMode;
-import lombok.Getter;
-import lombok.Setter;
-import javax.persistence.*;
-import java.time.LocalDateTime;
-import java.util.Date;
-
-@Entity
-@Getter
-@Setter
-@Table(name = "users")
-public class LocalUser {
-
-	public enum Role { USER, ADMIN }
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "users_seq_gen")
-	@SequenceGenerator(name = "users_seq_gen", sequenceName ="users_id_seq", allocationSize = 1)
-	private long id;
-
-	/**
-	 * Логин пользователя.
-	 */
-	@Column
-	private String login;
-
-	/**
-	 * Пароль пользователя.
-	 */
-	@Column
-	private String pwd;
-
-	/**
-	 * Роль пользователя.
-	 */
-	@Enumerated(EnumType.STRING)
-	private Role userRole = Role.USER;
-
-	/**
-	 * Режим шифрования на фронте.
-	 */
-	@Column(nullable = false, columnDefinition = "boolean default false")
-	private Boolean userCryptoMode;
-
-	/**
-	 * Дата создания пользователя.
-	 */
-	@Column
-	@Temporal(TemporalType.DATE)
-	private Date creationDate;
-
-	/**
-	 * Email-адрес пользователя.
-	 */
-	@Column
-	private String email;
-
-	/**
-	 * Полное имя пользователя.
-	 */
-	@Column
-	private String fullname; //todo: нормально переименовать
-
-	/**
-	 * Режим отображения - таблица или помесячная группировка.
-	 */
-	@Column
-	private String viewMode;
-
-	/**
-	 * Режим сортировки
-	 */
-	@Enumerated(EnumType.STRING)
-	private SortMode treeSortMode;
-
-	/**
-	 * Режим сортировки основной таблицы.
-	 */
-	@Enumerated(EnumType.STRING)
-	private SortMode tableSortMode;
-
-	/**
-	 * Режим фильтрации.
-	 */
-	@Enumerated(EnumType.STRING)
-	private FilterMode filterMode;
-
-	@Column
-	private LocalDateTime lastOperationTime;
-
-	@Column
-	private String lastOperation;
-
-	/**
-	 * Последний запрос желаний для главной табоицы был с приоритетом или нет?
-	 */
-	@Column
-	private Boolean lastRequestWithPriority;
-
-	@Override
-	public String toString() {
-		return "LocalUser{" +
-				"id=" + id +
-				", login='" + login + '\'' +
-				", pwd='" + pwd + '\'' +
-				", userRole=" + userRole +
-				", userCryptoMode=" + userCryptoMode +
-				", creationDate=" + creationDate +
-				", email='" + email + '\'' +
-				", fullname='" + fullname + '\'' +
-				'}';
-	}
-
-	public LocalUser(String login, Role userRole, String pwd, boolean usercryptomode, String email, String fullname) { //todo: переименовать usercryptomode и fullname
-		this.login = login;
-		this.pwd = pwd;
-		this.userCryptoMode = usercryptomode;
-		this.userRole = userRole;
-		this.email = email;
-		this.fullname = fullname;
-	}
-
-	public LocalUser(String login, String pw) {
-		this.login = login;
-		this.pwd = pw;
-		this.userCryptoMode = false;
-		this.userRole = Role.USER;
-	}
-
-	public LocalUser() { //todo: ломбок
-	}
-
-	public LocalUser(UserDto newUser, String securePw) {
-		this.login = newUser.getLogin();
-		this.pwd = securePw;
-		this.userCryptoMode = newUser.getUserCryptoMode();
-		this.userRole = Role.USER;
-		this.email = newUser.getEmail();
-		this.fullname = newUser.getFullName();
-		this.viewMode = "TABLE"; //todo: вынести в ЕНУМ
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedInvestmentDataRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedInvestmentDataRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedInvestmentDataRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedInvestmentDataRs.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-import java.util.List;
-
-/**
- * Консолидированная инвест-таблица.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class ConsolidatedInvestmentDataRs {
-    private List<BondRs> bonds;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandlerImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandlerImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandlerImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/xmlparse/XmlHandlerImpl.java	
+++ /dev/null	
@@ -1,83 +0,0 @@
-package com.antonromanov.arnote.services.investment.xmlparse;
-
-import com.antonromanov.arnote.exceptions.MoexXmlResponseMarshalingException;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.DividendRs;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Service;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-import org.xml.sax.InputSource;
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
-
-@Service
-@Slf4j
-public class XmlHandlerImpl implements XmlHandler {
-
-    @Override
-    public Optional<ConsolidatedDividendsRs> parse(ResponseEntity<String> response) {
-
-        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
-        List<DividendRs> divList = new ArrayList<>();
-        try {
-            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
-            Document doc = dBuilder.parse(new InputSource(new StringReader(response.getBody())));
-            doc.getDocumentElement().normalize();
-            NodeList nodeList = doc.getElementsByTagName("rows");
-            NodeList rows = nodeList.item(0).getChildNodes();
-
-            for (int i = 0; i < rows.getLength(); i++) {
-                Node nNode = rows.item(i + 1);
-                if (nNode != null && nNode.getNodeType() == Node.ELEMENT_NODE) {
-                    Element element = (Element) nNode;
-                    divList.add(DividendRs.builder()
-                            .currencyId(Currencies.RUB)
-                            .value(Double.valueOf(element.getAttribute("value")))
-                            .registryCloseDate(element.getAttribute("registryclosedate"))
-                            .build());
-                }
-            }
-
-            ConsolidatedDividendsRs result = ConsolidatedDividendsRs
-                    .builder()
-                    .dividendList(divList)
-                    .build();
-
-            result.calculateSum();
-
-            return Optional.of(result);
-        } catch (Exception e) {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public CommonMoexDoc marshall(ResponseEntity<String> response, Class<?> moexClass) {
-        if (response.getBody() == null) {
-            log.error("Ошибка маршелинга - ответ пришел, но бади пустое!");
-            throw new MoexXmlResponseMarshalingException();
-        } else {
-            try {
-                JAXBContext jaxbContext = JAXBContext.newInstance(moexClass);
-                Unmarshaller un = jaxbContext.createUnmarshaller();
-                return (CommonMoexDoc) un.unmarshal(new InputSource(new StringReader(response.getBody())));
-            } catch (JAXBException e) {
-                log.error("Ошибка маршелинга: {}", e.getMessage());
-                throw new MoexXmlResponseMarshalingException();
-            }
-        }
-    }
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/AddNewCreditException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/AddNewCreditException.java b/src/main/java/com/antonromanov/arnote/exceptions/AddNewCreditException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/AddNewCreditException.java	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-import com.antonromanov.arnote.exceptions.enums.ErrorCodes;
-
-public class AddNewCreditException extends RuntimeException {
-
-	private ErrorCodes code;
-
-	public AddNewCreditException() {
-		this.code = ErrorCodes.ERR_O4;
-	}
-
-	public ErrorCodes getCode() {
-		return code;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRealTimeQuoteRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRealTimeQuoteRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRealTimeQuoteRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooRealTimeQuoteRs.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * ДТО для ответа по текущей ставке от Яху
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooRealTimeQuoteRs {
-    private YahooQuoteSummeryRs quoteSummary;
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMappingException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMappingException.java b/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMappingException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/MoexXmlResponseMappingException.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class MoexXmlResponseMappingException extends RuntimeException {
-
-    private String message;
-
-    public MoexXmlResponseMappingException(String what) {
-        this.message = "Данные с биржи успешно пришли, их маршелинг прошел, но мы не смогли достать из них: " + what;
-    }
-
-    public String getMessage() {
-        return message;
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/SearchResultsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/SearchResultsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/SearchResultsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/SearchResultsRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import java.util.List;
-
-/**
- * Результат поиска бумаг.
- */
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
-public class SearchResultsRs {
-   private List<FoundInstrumentRs> instruments;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexRowsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexRowsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexRowsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexRowsRs.java	
+++ /dev/null	
@@ -1,124 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.currentquote;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement(name = "row")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class MoexRowsRs {
-
-        @XmlAttribute(name = "SECID")
-        private String secid;
-
-        @XmlAttribute(name = "PREVADMITTEDQUOTE")
-        private String prevAdmittedQuote;
-
-        @XmlAttribute(name = "SECNAME")
-        private String secName; // название бумаги
-
-        @XmlAttribute(name = "TRADEDATE")
-        private String tradeDate; // дата торговли
-
-        @XmlAttribute(name = "LEGALCLOSEPRICE")
-        private String legalClosePrice; // ставка закрытия
-
-        @XmlAttribute(name = "PREVLEGALCLOSEPRICE")
-        private String prevLegalClosePrice; // Официальная цена закрытия предыдущего дня
-
-        @XmlAttribute(name = "COUPONVALUE")
-        private String couponValue; // Сумма купона, в валюте номинала
-
-        @XmlAttribute(name = "COUPONPERCENT")
-        private String couponPercent; // Ставка купона, %
-
-        @XmlAttribute(name = "LOTVALUE")
-        private String lotValue; // Номинальная стоимость лота, в валюте номинала
-
-        @XmlAttribute(name = "LOTSIZE")
-        private String lotSize; // минимальный размер лота
-
-        @XmlAttribute(name = "COUPONPERIOD")
-        private String couponPeriod; // Длительность купона
-
-        @XmlAttribute(name = "CURRENCYID")
-        private String currencyId; // Длительность купона
-
-        @XmlAttribute(name = "NEXTCOUPON")
-        private String nextCoupon; // Дата выплаты следующего купона
-
-        @XmlAttribute(name = "FACEUNIT")
-        private String faceUnit; // Денежная еденица купона
-
-
-
-        //============= КУРСЫ ВАЛЮТ ================
-
-        @XmlAttribute(name = "tradedate")
-        private String tradeDateForCurrencies;
-
-        @XmlAttribute(name = "tradetime")
-        private String tradeTime;
-
-        @XmlAttribute(name = "secid")
-        private String currencyExchangeType;
-
-        @XmlAttribute(name = "rate")
-        private String rate;
-
-        //============= ТОРГОВЫЕ РЕЖИМЫ ================
-
-        @XmlAttribute(name = "boardid")
-        private String boardId;
-
-        @XmlAttribute(name = "title")
-        private String title;
-
-        @XmlAttribute(name = "is_traded")
-        private String isTraded;
-
-        //========== 15-МИНУТНОЕ ОБНОВЛЕНИЕ ЦЕНЫ ===========
-
-        @XmlAttribute(name = "LAST")
-        private String last15MinuteQuote; // последняя ставка
-
-        @XmlAttribute(name = "BOARDID")
-        private String tradeMode; // последняя ставка
-
-        @XmlAttribute(name = "UPDATETIME")
-        private String updateTime;
-
-        @XmlAttribute(name = "LASTCHANGE")
-        private String lastChange; // последнее изменение цены относительно присланного 15 минут назад. Скорее всего в рублях
-
-        @XmlAttribute(name = "LASTCHANGEPRCNT")
-        private String lastChangePrcnt; // последнее изменение цены относительно присланного 15 минут назад в процентах
-
-        @XmlAttribute(name = "LCURRENTPRICE")
-        private String lCurrentPrice; // используем, если LAST пришел пустой
-
-        //========== СВЕЧИ ===========
-
-        @XmlAttribute(name = "open")
-        private String open; // цена открытия
-
-        @XmlAttribute(name = "close")
-        private String close; // цена закрытия
-
-        @XmlAttribute(name = "high")
-        private String high; // хаи за период
-
-        @XmlAttribute(name = "low")
-        private String low; // низы за период
-
-        @XmlAttribute(name = "end")
-        private String end; // время/дата завершения торгов
-
-
-
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDocumentRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDocumentRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDocumentRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDocumentRs.java	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.currentquote;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import lombok.Data;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-
-@XmlRootElement(name = "document")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexDocumentRs implements CommonMoexDoc {
-    @XmlElement(name = "data")
-    MoexDataRs data;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/cache/CacheService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheService.java b/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheService.java	
+++ /dev/null	
@@ -1,77 +0,0 @@
-package com.antonromanov.arnote.services.investment.cache;
-
-import com.antonromanov.arnote.model.investing.cache.enums.CacheDictType;
-import java.time.LocalDateTime;
-import java.util.List;
-
-/**
- * Сервис кеширования.
- */
-public interface CacheService {
-
-    /**
-     * Режимы торгов хранятся в списке и без ключа. Поэтому оставим эти методы для них.
-     * @param tradeModes
-     */
-    void putTradeModes(List<String> tradeModes);
-    List<String> getTradeModes();
-
-
-//   ================  МЕТОДЫ ДЛЯ РАБОТЫ С КЭШОМ БЕЗ ВРЕМЕНИ ХРАНЕНИЯ ====================
-
-    /**
-     * Добавить объект в кэш.
-     *
-     * @param dictionaryType - тип словаря. То есть, что именно сохраняем, какой справочник.
-     * @param obj - собственно сам инстанс объекта, который сохраняем.
-     * @param aClass - класс инстанса.
-     * @param key - ключ по которому сохраняем. Например борды по тикеру.
-     */
-    <T> void putToCache(CacheDictType dictionaryType, String key, T obj, Class<T> aClass);
-
-    /**
-     * Достать справочник из кэша
-     *
-     * @param dictionaryType
-     *
-     *
-     */
-    <T> T getDict(CacheDictType dictionaryType, String key);
-
-    /**
-     * Проверка, что кэш не пустой по ключу и словарю.
-     * @param dictionaryType
-     * @param key
-     * @return
-     */
-    Boolean checkDict(CacheDictType dictionaryType, String key);
-
-    //   ===================  МЕТОДЫ ДЛЯ РАБОТЫ С КЭШОМ С ПРОТУХАНИЕМ ПО ВРЕМЕНИ ====================
-
-    /**
-     * Добавить объект в кэш с временем хранения.
-     *
-     * @param dictionaryType - тип словаря. То есть, что именно сохраняем, какой справочник.
-     * @param obj - собственно сам инстанс объекта, который сохраняем.
-     * @param aClass - класс инстанса.
-     * @param key - ключ по которому сохраняем. Например борды по тикеру.
-     */
-    <T> void putToCacheWithRetentionTime(CacheDictType dictionaryType, String key, T obj, Class<T> aClass, LocalDateTime timestamp);
-
-    /**
-     * Достать справочник с ограничением по времени из кэша
-     *
-     * @param dictionaryType
-     *
-     *
-     */
-    <T> T getDictWithRetention(CacheDictType dictionaryType, String key);
-
-    /**
-     * Проверка, что кэш не пустой по ключу и словарю и что он не протух.
-     * @param dictionaryType
-     * @param key
-     * @return
-     */
-    Boolean checkDictWithRetention(CacheDictType dictionaryType, String key);
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsService.java b/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsService.java	
+++ /dev/null	
@@ -1,66 +0,0 @@
-package com.antonromanov.arnote.services.investment.returns;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.response.DivsDebug;
-import com.antonromanov.arnote.model.investing.response.enums.Targets;
-
-import java.util.List;
-import java.util.Optional;
-
-public interface ReturnsService {
-    /**
-     * Запросить общую сумму инвестированного.
-     * @param user - текущий авторизовавшийся пользователь
-     * @return
-     */
-    Optional<Long> getTotalInvestment(ArNoteUser user);
-
-    /**
-     * Получить дельту по акциям пользователя.
-     * @param user
-     * @return
-     */
-    Optional<Double> getSharesDelta(ArNoteUser user);
-
-    /**
-     * Получить дельту только по КУПЛЕННЫМ акциям пользователя.
-     * @param user
-     * @return
-     */
-    Optional<Double> getSharesDeltaForBought(ArNoteUser user);
-
-    /**
-     * Получить общую доходность по дивидендам.
-     * @param user
-     * @return
-     */
-    Optional<Long> getTotalDivsReturn(ArNoteUser user);
-
-    /**
-     * Получаем детальную инфу по Дивам.
-     * @param user
-     * @return
-     */
-    List<DivsDebug> getDivsDebug(ArNoteUser user);
-
-    /**
-     * Посчитать сколько надо вложить для получения заданной ежемесячной прибыли.
-     * @param user
-     * @return
-     */
-    Long calculateRequiredInvestments(ArNoteUser user, Targets target);
-
-    /**
-     * Посчитать общую сумму прибыли.
-     * @param user
-     * @return
-     */
-    Long calculateTotalReturns(ArNoteUser user);
-
-    /**
-     * Получить общий купонный доход по всем облигациям пользователя.
-     * @param user
-     * @return
-     */
-    Optional<Long> getTotalBondsReturns(ArNoteUser user);
-}
Index: src/main/java/com/antonromanov/arnote/security/UserPrinciple.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/security/UserPrinciple.java b/src/main/java/com/antonromanov/arnote/security/UserPrinciple.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/security/UserPrinciple.java	
+++ /dev/null	
@@ -1,113 +0,0 @@
-package com.antonromanov.arnote.security;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
-import java.util.Collection;
-import java.util.List;
-import java.util.Objects;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-public class UserPrinciple implements UserDetails {
-
-	private static final long serialVersionUID = 1L;
-
-	private Long id;
-
-	private String name;
-
-	private String username;
-
-	private String email;
-
-	@JsonIgnore
-	private String password;
-
-	private Collection<? extends GrantedAuthority> authorities;
-
-	public UserPrinciple(Long id, String name,
-	                     String username, String email, String password,
-	                     Collection<? extends GrantedAuthority> authorities) {
-		this.id = id;
-		this.name = name;
-		this.username = username;
-		this.email = email;
-		this.password = password;
-		this.authorities = authorities;
-	}
-
-	public static UserPrinciple build(ArNoteUser user) {
-		List<GrantedAuthority> authorities = Stream.of(ArNoteUser.Role.values()).map(role ->
-				new SimpleGrantedAuthority(role.name())
-		).collect(Collectors.toList());
-
-		return new UserPrinciple(
-				user.getId(),
-				user.getFullname(),
-				user.getLogin(),
-				user.getEmail(),
-				user.getPwd(),
-				authorities
-		);
-	}
-
-	public Long getId() {
-		return id;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public String getEmail() {
-		return email;
-	}
-
-	@Override
-	public String getUsername() {
-		return username;
-	}
-
-	@Override
-	public String getPassword() {
-		return password;
-	}
-
-	@Override
-	public Collection<? extends GrantedAuthority> getAuthorities() {
-		return authorities;
-	}
-
-	@Override
-	public boolean isAccountNonExpired() {
-		return true; // todo: чо за хуйня?? Разобраться!
-	}
-
-	@Override
-	public boolean isAccountNonLocked() {
-		return true; // todo: чо за хуйня?? Разобраться!
-	}
-
-	@Override
-	public boolean isCredentialsNonExpired() {
-		return true; // todo: чо за хуйня?? Разобраться!
-	}
-
-	@Override
-	public boolean isEnabled() {
-		return true; // todo: чо за хуйня?? Разобраться!
-	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-
-		UserPrinciple user = (UserPrinciple) o;
-		return Objects.equals(id, user.id);
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/controller/UserController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/UserController.java b/src/main/java/com/antonromanov/arnote/controller/UserController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/UserController.java	
+++ /dev/null	
@@ -1,186 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.request.UserDto;
-import com.antonromanov.arnote.email.EmailStatus;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.web.bind.annotation.*;
-import java.security.Principal;
-import java.util.List;
-import static com.antonromanov.arnote.utils.Utils.createGsonBuilder;
-
-/**
- * REST-контроллер управления пользователями.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/user")
-@Slf4j
-@AllArgsConstructor
-@Data
-public class UserController {
-
-    private final MainService mainService;
-    private final BCryptPasswordEncoder passwordEncoder;
-    private final UsersRepo usersRepo;
-    private final Utils utils;
-
-    /**
-     * Добавление нового пользователя.
-     *
-     * @param newUser - Объект типа UserDto, содержащий данные нового пользователя.
-     * @return - объект типа LocalUser
-     * @throws Exception
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping
-    public LocalUser addUser(@RequestBody UserDto newUser) throws Exception {
-
-        log.info("========= ADD USER  ============== ");
-        log.info("PAYLOAD: " + createGsonBuilder().toJson(newUser));
-
-        if (usersRepo.findByLogin(newUser.getLogin()).isPresent()) {
-            log.error("Пользователь с логином {} уже есть!", newUser.getLogin());
-            throw new BadIncomeParameter(BadIncomeParameter.ParameterKind.SUCH_USER_EXIST);
-        }
-        return usersRepo.saveAndFlush(new LocalUser(newUser, passwordEncoder.encode(newUser.getUnSecurePassword())));
-    }
-
-
-    /**
-     * Удалить пользователя.
-     */
-    @CrossOrigin(origins = "*")
-    @DeleteMapping
-    public List<LocalUser> deleteUser(@RequestParam UserDto userForEdit) throws BadIncomeParameter {
-
-        log.info("========= DELETE USER  ============== ");
-        log.info("PAYLOAD: " + userForEdit);
-
-        return usersRepo.findById(userForEdit.getId())
-                .map(localUser -> {
-                    usersRepo.delete(localUser);
-                    return usersRepo.findAll();
-                })
-                .orElseThrow(() -> new BadIncomeParameter(BadIncomeParameter.ParameterKind.SUCH_USER_NO_EXIST));
-    }
-
-    /**
-     * Редактировать пользователя.
-     *
-     * @param user объект типа UserDto с обновленными данными пользователя.
-     * @return - объект типа LocalUser.
-     * @throws UserNotFoundException
-     * @throws BadIncomeParameter    - если пользователь не найден (id передается в UserDto)
-     */
-    @CrossOrigin(origins = "*")
-    @PutMapping
-    public LocalUser editUser(@RequestBody UserDto user) throws BadIncomeParameter {
-
-        log.info("========= EDIT USER  ============== ");
-        log.info("PAYLOAD: " + createGsonBuilder().toJson(user));
-
-        return usersRepo.findByLogin(user.getLogin())
-                .map(u -> {
-                    u.setPwd(passwordEncoder.encode(user.getUnSecurePassword()));
-                    u.setLogin(user.getLogin());
-                    u.setEmail(user.getEmail());
-                    u.setFullname(user.getFullName());
-                    u.setUserCryptoMode(user.getUserCryptoMode());
-                    return usersRepo.saveAndFlush(u);
-                }).orElseThrow(() -> new BadIncomeParameter(BadIncomeParameter.ParameterKind.SUCH_USER_NO_EXIST));
-    }
-
-    /**
-     * Получить текущего пользователя.
-     *
-     * @param principal - берется из JWT сессии.
-     * @return
-     * @throws UserNotFoundException
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping("/current")
-    public LocalUser getCurrentUser(Principal principal) throws UserNotFoundException {
-                return utils.getUserFromPrincipal(principal); //todo: в теории мы наверное можем узнать сколько осталось жить токену и завернуть это в ДТО Юзера
-    }
-
-    /**
-     * Установить пользователю режим отображения.
-     *
-     * @param principal - берется из JWT сессии.
-     * @param mode - режим отображения.
-     * @return
-     * @throws UserNotFoundException
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping("/mode")
-    public LocalUser toggleUserMode(Principal principal, @RequestParam String mode) throws UserNotFoundException {
-
-            log.info("========= TOGGLE / GET USER MODE ============== ");
-            log.info("MODE: " + mode);
-            LocalUser localuser = utils.getUserFromPrincipal(principal);
-            if (("TABLE".equals(mode)) || ("TREE".equals(mode))) { //todo: в ЕНУМ !!!!
-                localuser.setViewMode(mode);
-                return usersRepo.saveAndFlush(localuser);
-            } else {
-                //todo: тут надо бросануть ЭКСЕПШН и завернуть его уже в ЕррорХендлере
-                return null;
-            }
-    }
-
-    /**
-     * Вернуть всех пользователей.
-     *
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping("/list")
-    public List<LocalUser> getAllUsers() {
-            log.info("========= GET ALL USERS  ============== ");
-            return usersRepo.findAll();
-    }
-
-
-    /**
-     * Метод, который дергается, если пользователь забыл пароль.
-     *
-     * @param email - email пользователя, по которому ищем в Базе пользователей.
-     * @return - объект типа EmailStatus с результатами отправки нового пароля.
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping(value = "/forget")
-    public EmailStatus returnUserPassword(@RequestParam(name = "email") String email) throws UserNotFoundException {
-
-        log.info("========= FORGET PWD METHOD =============== ");
-        log.info("USER EMAIL - " + email);
-
-        return usersRepo.findByEmail(email)
-                .map(u -> utils.changePwd(u, email))
-                .orElseThrow(UserNotFoundException::new);
-    }
-
-
-    /**
-     * Сброс юзерского пароля админом.
-     *
-     * @param userId - id пользователя из БД.
-     * @return - объект типа EmailStatus с результатами отправки нового пароля.
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping("/reset")
-    public EmailStatus resetUserPasswordByAdmin(@RequestParam(name = "userid") String userId) throws UserNotFoundException {
-
-        return usersRepo.findById(Long.parseLong(userId))
-                .map(user -> utils.changePwd(user, user.getEmail()))
-                .orElseThrow(UserNotFoundException::new);
-
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/MoexRestTemplateOperation.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/MoexRestTemplateOperation.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/MoexRestTemplateOperation.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/MoexRestTemplateOperation.java	
+++ /dev/null	
@@ -1,99 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.boardid.MoexDocumentForBoardIdRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.BoardsColumns;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.DataBlock;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.MarketData;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.SecuritiesColumns;
-import com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo.MoexDetailInfoRs;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.EnumSet;
-
-
-@Getter
-@AllArgsConstructor
-public enum MoexRestTemplateOperation {
-
-
-    GET_DIVS_MOEX("/securities/{p1:[a-z]{1,5}}/dividends.xml", UrlRequestParams.builder().issMeta(false).build(), null),
-    GET_LAST_QUOTE_MOEX("/engines/stock/markets/shares/boards/{p2:[a-z]{1,5}}/securities.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issDp("comma")
-                    .issOnly(EnumSet.of(DataBlock.SECURITIES))
-                    .securitiesColumns(EnumSet.of(SecuritiesColumns.SECID, SecuritiesColumns.PREVADMITTEDQUOTE, SecuritiesColumns.COUPONPERIOD))
-                    .build(),
-            MoexDocumentRs.class),
-    GET_INSTRUMENT_DETAIL_INFO("/engines/stock/markets/shares/securities/{p1:[a-z]{1,5}}",
-            UrlRequestParams.builder().issMeta(false).build(),
-            MoexDetailInfoRs.class),
-    GET_BOARD_ID("/securities/{p1:[a-z]{1,5}}.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issOnly(EnumSet.of(DataBlock.BOARDS))
-                    .boardsColumns(EnumSet.of(BoardsColumns.SECID, BoardsColumns.BOARDID, BoardsColumns.IS_PRIMARY))
-                    .build(),
-            MoexDocumentForBoardIdRs.class),
-    GET_INSTRUMENT_NAME("/engines/stock/markets/shares/boards/{p2:[a-z]{1,5}}/securities.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issDp("comma")
-                    .issOnly(EnumSet.of(DataBlock.SECURITIES))
-                    .securitiesColumns(EnumSet.of(SecuritiesColumns.SECID, SecuritiesColumns.SECNAME))
-                    .build(),
-            MoexDocumentRs.class),
-    GET_DELTA("/history/engines/stock/markets/shares/boards/{p2:[a-z]{1,5}}/securities/{p1:[a-z]{1,5}}/candles.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .from("2000-01-01")
-                    .build(),
-            MoexDocumentRs.class),
-    GET_BONDS("/engines/stock/markets/bonds/boardgroups/{p1:[a-z]{1,5}}/securities.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issDp("comma")
-                    .issOnly(EnumSet.of(DataBlock.SECURITIES))
-                    .securitiesColumns(EnumSet.of(SecuritiesColumns.SECID, SecuritiesColumns.SECNAME,
-                            SecuritiesColumns.PREVLEGALCLOSEPRICE, SecuritiesColumns.COUPONVALUE,
-                            SecuritiesColumns.COUPONPERCENT, SecuritiesColumns.LOTVALUE, SecuritiesColumns.COUPONPERIOD,
-                            SecuritiesColumns.CURRENCYID, SecuritiesColumns.LOTSIZE, SecuritiesColumns.NEXTCOUPON, SecuritiesColumns.FACEUNIT))
-                    .build(),
-            MoexDocumentRs.class),
-    GET_CURRENCY_CHANGE_COURSES("/statistics/engines/futures/markets/indicativerates/securities",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issOnly(EnumSet.of(DataBlock.SECURITIES))
-                    .build(),
-            MoexDocumentRs.class),
-     GET_ALL_SHARES("/engines/stock/markets/shares/boards/{p2:[a-z]{1,5}}/securities.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issOnly(EnumSet.of(DataBlock.SECURITIES))
-                    .build(),
-            MoexDocumentRs.class),
-    GET_TRADE_MODES("/engines/stock/markets/shares/boards.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .build(),
-            MoexDocumentRs.class),
-    GET_15_MINUTE_PRICE_UPDATE("/engines/stock/markets/shares/securities/{p1:[a-z]{1,5}}.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .issOnly(EnumSet.of(DataBlock.MARKETDATA))
-                    .marketDataColumns(EnumSet.of(MarketData.SECID, MarketData.BOARDID, MarketData.LAST, MarketData.UPDATETIME,
-                            MarketData.LASTCHANGE, MarketData.LASTCHANGEPRCNT, MarketData.LCURRENTPRICE))
-                    .build(),
-            MoexDocumentRs.class),
-    GET_CANDLES("/engines/stock/markets/shares/securities/{p1:[a-z]{1,5}}/candles.xml",
-            UrlRequestParams.builder()
-                    .issMeta(false)
-                    .build(),
-            MoexDocumentRs.class);
-
-    private final String url;
-    private final UrlRequestParams requestParams;
-    private final Class<?> className;
-
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/WishDao.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/WishDao.java b/src/main/java/com/antonromanov/arnote/repositoty/WishDao.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/WishDao.java	
+++ /dev/null	
@@ -1,33 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.wish.SearchCriteria;
-import com.antonromanov.arnote.model.wish.Wish;
-import com.antonromanov.arnote.utils.WishSearchQueryCriteriaConsumer;
-import org.springframework.stereotype.Repository;
-import javax.persistence.*;
-import javax.persistence.criteria.*;
-import java.util.List;
-
-@Repository //todo: переписать репозитории нормально, да и вообще вопрос зачем нужна эта репа
-public class WishDao implements IUserDAO {
-
-	@PersistenceContext
-	private EntityManager entityManager;
-
-	@Override
-	public List<Wish> searchWish(List<SearchCriteria> params) {
-		CriteriaBuilder builder = entityManager.getCriteriaBuilder();
-		CriteriaQuery<Wish> query = builder.createQuery(Wish.class);
-		Root r = query.from(Wish.class);
-
-		Predicate predicate = builder.conjunction();
-
-		WishSearchQueryCriteriaConsumer searchConsumer = new WishSearchQueryCriteriaConsumer(predicate, builder, r);
-		params.stream().forEach(searchConsumer);
-		predicate = searchConsumer.getPredicate();
-		query.where(predicate);
-		List<Wish> result = entityManager.createQuery(query).getResultList();
-		return result;
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/SalaryRepository.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/SalaryRepository.java b/src/main/java/com/antonromanov/arnote/repositoty/SalaryRepository.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/SalaryRepository.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.entity.common.Salary;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-import org.springframework.data.jpa.repository.JpaRepository;
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface SalaryRepository extends JpaRepository<Salary, Integer>{
-	@Query(value="select s from Salary s where s.user = :user and s.salaryTimeStamp <> null order by s.salaryTimeStamp DESC")
-	List<Salary> getLastSalaryListByUserDesc(@Param("user") ArNoteUser user);
-
-	@Query(value="select s from Salary s where s.user = :user and " +
-			"s.salaryTimeStamp <> null and " +
-			"EXTRACT(YEAR from s.salaryTimeStamp) = :year and " +
-			"EXTRACT(MONTH from s.salaryTimeStamp) = :month")
-	List<Salary> findAllByUserAndMonthAndYear(@Param("user") ArNoteUser user, @Param("year") int year,
-											  @Param("month") int month);
-
-	Optional<Salary> findSalaryById(Long id);
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/CommonService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/CommonService.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/CommonService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/CommonService.java	
+++ /dev/null	
@@ -1,342 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc;
-
-import com.antonromanov.arnote.entity.common.CalendarEntity;
-import com.antonromanov.arnote.exceptions.NoTradesForUserDateException;
-import com.antonromanov.arnote.exceptions.enums.ErrorCodes;
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.common.Calendar;
-import com.antonromanov.arnote.model.common.enums.CalendarType;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.BondType;
-import com.antonromanov.arnote.model.investing.response.*;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.enums.StockExchange;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import com.antonromanov.arnote.model.wish.enums.DeltaMode;
-import com.antonromanov.arnote.repositoty.CalendarRepo;
-import com.antonromanov.arnote.services.investment.calc.bonds.BondCalcService;
-import com.antonromanov.arnote.services.investment.calc.shares.SharesCalcService;
-import com.antonromanov.arnote.services.investment.calc.shares.common.CalculateFactory;
-import org.springframework.stereotype.Service;
-
-import java.time.LocalDate;
-import java.time.format.DateTimeFormatter;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-
-/**
- * Сервис обрабатывающий операции, например, выдачи текущей цены бумаги, общие для разных типов (акция / облигация)
- * и работающий как фабрика.
- */
-@Service
-public class CommonService {
-
-    private final BondCalcService bondCalcService;
-    private final CalculateFactory calcFactory;
-    private final CalendarRepo calendarRepo;
-
-    public CommonService(CalculateFactory calcFactory, BondCalcService bondCalcService, CalendarRepo calendarRepo) {
-        this.calcFactory = calcFactory;
-        this.bondCalcService = bondCalcService;
-        this.calendarRepo = calendarRepo;
-    }
-
-    /**
-     * Посчитать текущую стоимость бумаги.
-     *
-     * @param bond
-     * @return
-     */
-    public Double prepareCurrentPrice(Bond bond) {
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                ((calcFactory.getCalculator(bond.getStockExchange()))
-                        .getRealTimeQuote(bond.getTicker())
-                        .getCurrentPrice()) :
-                bondCalcService.getCurrentBondPrice(bond.getTicker());
-    }
-
-    /**
-     * Получить свечи.
-     *
-     * @return
-     */
-    public MoexDocumentRs getCandles() {
-        return ((calcFactory.getCalculator(StockExchange.MOEX)).getCandles("SBER", LocalDate.now(), LocalDate.now()));
-    }
-
-    /**
-     * Получить валюту бумаги.
-     *
-     * @param bond
-     * @return
-     */
-    public String getCurrency(Bond bond) {
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                ((calcFactory.getCalculator(bond.getStockExchange())).getCurrencyOfShare(bond.getTicker())) :
-                bondCalcService.getBondCurrency(bond.getTicker()).name();
-    }
-
-    /**
-     * Получить дивы или купоны в формате дивов.
-     *
-     * @param bond
-     * @return
-     */
-    public ConsolidatedDividendsRs getDivsOrCoupons(Bond bond) {
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                ((calcFactory.getCalculator(bond.getStockExchange())).getDividends(bond)) :
-                bondCalcService.getCoupons(bond);
-    }
-
-
-    /**
-     * Получить минимальный лот или кол-во купленных бумаг.
-     *
-     * @param bond
-     * @return
-     */
-    public Integer getLot(Bond bond) {
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                ((calcFactory.getCalculator(bond.getStockExchange())).getMinimalLot(bond.getTicker(), bond.getUser())) :
-                bondCalcService.getBondLot(bond);
-    }
-
-
-    /**
-     * Получить финальную цену.
-     *
-     * @param bond
-     * @return
-     */
-    public Integer getFinalPrice(Bond bond) {
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                ((calcFactory.getCalculator(bond.getStockExchange())).calculateFinalPrice(bond)) :
-                bondCalcService.calculateFinalPrice(bond);
-    }
-
-
-    /**
-     * Получить описание.
-     *
-     * @param bond
-     * @return
-     */
-    public String getDescription(Bond bond) {
-
-        SharesCalcService service = calcFactory.getCalculator(bond.getStockExchange());
-
-        return bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                (service.getInstrumentName(service.getBoardId(bond.getTicker()), bond.getTicker())) :
-                (bondCalcService.getBondName(bond.getTicker()).orElse("-"));
-    }
-
-
-    /**
-     * Посчитать дельту.
-     *
-     * @param bond
-     * @return
-     */
-    public DeltaRs prepareDelta(Bond bond) {
-        SharesCalcService service = calcFactory.getCalculator(bond.getStockExchange());
-        DeltaMode deltaMode = bond.getUser().getDeltaMode() == null ? DeltaMode.TINKOFF_DELTA : bond.getUser().getDeltaMode();
-
-        DeltaRs localDelta = bond.getType() == BondType.SHARE || bond.getType() == BondType.INDEX ?
-                (service.calculateDelta(bond.getTicker(), service.getRealTimeQuote(bond.getTicker()).getCurrentPrice(),
-                        bond.getPurchaseList(), deltaMode)) :
-                DeltaRs.builder()
-                        .tinkoffDeltaPercent(0D)
-                        .deltaInRubles(0D)
-                        .deltaPeriod(0L)
-                        .tinkoffDelta(0D)
-                        .build();
-
-        return localDelta != null ? localDelta : DeltaRs.builder()
-                .tinkoffDeltaPercent(0D)
-                .deltaInRubles(0D)
-                .deltaPeriod(0L)
-                .tinkoffDelta(0D)
-                .build();
-    }
-
-
-    /**
-     * Найти инструменты по имени / тикеру или их куску.
-     *
-     * @param keyword - ключ, по которому ищем.
-     * @return
-     */
-    public SearchResultsRs findInstrument(String keyword) {
-        SharesCalcService moexService = calcFactory.getCalculator(StockExchange.MOEX);
-        SharesCalcService foreignService = calcFactory.getCalculator(StockExchange.SPB);
-        Iterator<String> it = moexService.getTradeModes().iterator();
-        MoexDocumentRs allShares = new MoexDocumentRs();
-
-        /*
-         * ============= Московская биржа: только российские акции и облигации ====================
-         */
-        while (it.hasNext()) {
-            String boardId = it.next();
-            MoexDocumentRs halfWayResult = moexService.findSharesByBoardId(boardId);
-            halfWayResult.getData().getRow().forEach(q -> q.setBoardId(boardId));
-            if (allShares.getData() == null) {
-                allShares = halfWayResult;
-            } else {
-                allShares.getData().getRow().addAll((halfWayResult).getData().getRow());
-            }
-        }
-
-        List<MoexRowsRs> foundShares = allShares.getData().getRow().stream()
-                .filter(filterByKeyword(keyword))
-                .filter(s -> !("TQTF".equals(s.getBoardId()) ||
-                        "TQTD".equals(s.getBoardId()) ||
-                        "TQTE".equals(s.getBoardId()))) // todo: "TQTF" вынести в какие-то енумы или константы !!!!
-                .collect(Collectors.toList());
-
-        List<MoexRowsRs> etf = allShares.getData().getRow().stream()
-                .filter(filterByKeyword(keyword))
-                .filter(s -> "TQTF".equals(s.getBoardId())) // todo: "TQTF" вынести в какие-то енумы или константы !!!!
-                .collect(Collectors.toList());
-
-
-        List<MoexRowsRs> foundBonds = bondCalcService.getBonds().getData().getRow().stream()
-                .filter(filterByKeyword(keyword))
-                .collect(Collectors.toList());
-
-        SearchResultsRs searchResults = new SearchResultsRs();
-        searchResults.setInstruments(prepareInstruments(foundShares, BondType.SHARE, StockExchange.MOEX));
-        searchResults.getInstruments().addAll(prepareInstruments(foundBonds, BondType.BOND, StockExchange.MOEX));
-        searchResults.getInstruments().addAll(prepareInstruments(etf, BondType.INDEX, StockExchange.MOEX));
-
-        /*
-         * ============= Иностранные акции ====================
-         */
-        MoexDocumentRs foreignDocs = foreignService.findInstrumentsByName(keyword);
-        if (foreignDocs.getData() != null) { // null - например, если в сервис не смогли достучаться.
-            List<MoexRowsRs> foreignShares = (foreignDocs).getData().getRow();
-            searchResults.getInstruments().addAll(prepareInstruments(foreignShares, BondType.SHARE, StockExchange.SPB));
-        }
-
-        return searchResults;
-    }
-
-    /**
-     * Получить текущую цену бумаги.
-     *
-     * @param ticker - тикер бумаги.
-     * @param user   - текущий пользак.
-     * @return - CurrentPriceRs.
-     */
-    public CurrentPriceRs getCurrentPriceByTicker(String ticker, StockExchange se, ArNoteUser user) {
-        SharesCalcService calculator = calcFactory.getCalculator(se);
-        CurrentPriceRs resp = calculator.getRealTimeQuote(ticker);
-        resp.setMinLot(calculator.getMinimalLot(ticker, user));
-        return resp;
-    }
-
-    private Boolean checkDate(List<CalendarEntity> calendarEntityList, LocalDate date) { // todo: почему это вообще в этом классе?
-
-        CalendarType type = calendarEntityList.stream()
-                .filter(Objects::nonNull)
-                .filter(v -> v.getDate().toLocalDate().isEqual(date))
-                .findFirst()
-                .map(CalendarEntity::getType)
-                .orElse(CalendarType.WORK);
-
-        return type != CalendarType.WEEKEND;
-    }
-
-
-    public Boolean checkDateIsWorkDay(LocalDate purchaseDate) {
-
-        List<CalendarEntity> calendarEntityList = calendarRepo.findAll();
-        List<CalendarEntity> calendarEntityListByYear = calendarEntityList.stream()
-                .filter(Objects::nonNull)
-                .filter(v -> v.getDate().toLocalDate().getYear() == purchaseDate.getYear())
-                .collect(Collectors.toList());
-
-        if (calendarEntityListByYear.size() > 1) {
-            return checkDate(calendarEntityList, purchaseDate);
-        } else {
-
-            Optional<Calendar> cal = getWorkCalendar(purchaseDate.getYear());
-
-            if (cal.isPresent() && cal.get().getDays() != null && cal.get().getDays().size() > 0) {
-
-                List<CalendarEntity> calendarEntities = cal.get().getDays().stream()
-                        .map(v -> CalendarEntity.builder()
-                                .date(getSqlDateFromXmlCalendar(cal.get().getYear(), v.getDate()))
-                                .type(CalendarType.searchByIdType(v.getType()))
-                                .build())
-                        .collect(Collectors.toList());
-                calendarRepo.saveAll(calendarEntities);
-                return checkDate(calendarEntityList, purchaseDate);
-            } else { // нет записей в БД и не нашли записей в производственном календаре
-                return false;
-            }
-        }
-    }
-
-
-    /**
-     * Получить ставку по тикеру и дате.
-     *
-     * @param
-     * @param foundBond
-     * @param purchaseDate
-     * @return
-     */
-    public CurrentPriceRs getCurrentPriceByTickerAndDate(FoundInstrumentRs foundBond, String purchaseDate) throws NoTradesForUserDateException {
-
-        SharesCalcService calculator = calcFactory.getCalculator(foundBond.getStockExchange());
-
-        if (LocalDate.parse(purchaseDate).isAfter(LocalDate.now())) {
-            purchaseDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
-        }
-
-        final String finalPurchaseDate = purchaseDate;
-
-        if (!checkDateIsWorkDay(LocalDate.parse(purchaseDate))) {
-            throw new NoTradesForUserDateException(ErrorCodes.ERR_O7);
-        } else {
-            MoexDocumentRs history = calculator.getHistory(foundBond.getTicker(), calculator.getBoardId(foundBond.getTicker()), LocalDate.parse(purchaseDate));
-            if (history == null || history.getData() == null || history.getData().getRow().size() < 1) {
-                throw new NoTradesForUserDateException(ErrorCodes.ERR_O8);
-            } else {
-                return calculator.getHistory(foundBond.getTicker(), calculator.getBoardId(foundBond.getTicker()), LocalDate.parse(purchaseDate))
-                        .getData()
-                        .getRow()
-                        .stream()
-                        .filter(row -> LocalDate.parse(row.getTradeDate()).isEqual(LocalDate.parse(finalPurchaseDate)))
-                        .findFirst()
-                        .map(data -> CurrentPriceRs.builder()
-                                .currentPrice(Double.valueOf(data.getLegalClosePrice()))
-                                .date(LocalDate.parse(finalPurchaseDate))
-                                .currency(Currencies.search(data.getCurrencyId()))
-                                .ticker(data.getSecid())
-                                .build())
-                        .orElse(calculator.getRealTimeQuote(foundBond.getTicker()));
-            }
-        }
-    }
-
-    /**
-     * Достаем Биржу по тикеру.
-     *
-     * @param ticker
-     * @return
-     */
-    public StockExchange getInstrumentStockExchange(String ticker) {
-        return findInstrument(ticker).getInstruments().stream()
-                .filter(i -> ticker.equals(i.getTicker()))
-                .findFirst()
-                .map(FoundInstrumentRs::getStockExchange)
-                .orElse(StockExchange.MOEX); //todo: спорный момент. Тут по хорошему надо эксепшн бросать.
-    }
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/shares/moex/MoexCalculateServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/moex/MoexCalculateServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/moex/MoexCalculateServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/moex/MoexCalculateServiceImpl.java	
+++ /dev/null	
@@ -1,638 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.shares.moex;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.Purchase;
-import com.antonromanov.arnote.model.investing.cache.enums.CacheDictType;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.CurrentPriceRs;
-import com.antonromanov.arnote.model.investing.response.DeltaRs;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;
-import com.antonromanov.arnote.model.investing.response.enums.TinkoffDeltaFinalValuesType;
-import com.antonromanov.arnote.model.investing.response.xmlpart.boardid.MoexDocumentForBoardIdRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.boardid.MoexRowsForBoardIdRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDataRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.DataBlock;
-import com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo.MoexDetailInfoRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo.MoexInstrumentDetailRowsRs;
-import com.antonromanov.arnote.model.wish.enums.DeltaMode;
-import com.antonromanov.arnote.services.investment.cache.CacheService;
-import com.antonromanov.arnote.services.investment.calc.shares.SharesCalcService;
-import com.antonromanov.arnote.services.investment.requestservice.RequestService;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-import java.time.*;
-import java.time.format.DateTimeFormatter;
-import java.time.format.TextStyle;
-import java.util.*;
-import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
-
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-import static org.apache.commons.lang3.StringUtils.isBlank;
-
-@Service
-@Slf4j
-public class MoexCalculateServiceImpl implements SharesCalcService {
-
-    @Autowired
-    private RequestService httpClient;
-    @Autowired
-    private CacheService cacheService;
-
-    private Long lastQuote = 0L;
-    private Long getAllSharesCount = 0L;
-
-
-    @Override
-    public MoexDocumentRs getCandles(String ticker, LocalDate fromDate, LocalDate tillDate) {
-
-        if (cacheService.checkDict(CacheDictType.CANDLES, ticker)) {
-            return cacheService.getDict(CacheDictType.CANDLES, ticker);
-        } else {
-
-            MoexDocumentRs candles = (MoexDocumentRs) httpClient.getCandles(MoexRestTemplateOperation.GET_CANDLES,
-                    ticker,
-                    fromDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")),
-                    tillDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")), 1);
-
-            candles.getData().getRow().forEach(v -> v.setSecid(ticker));
-            cacheService.putToCache(CacheDictType.CANDLES, ticker, candles, MoexDocumentRs.class);
-            return candles;
-        }
-    }
-
-    /**
-     * Запросить дивиденды через API биржи, подсчитать сумму и проценты относительно текущей цены акции и вернуть все это.
-     *
-     * @return
-     */
-    @Override
-    public ConsolidatedDividendsRs getDivsByTicker(String ticker) {
-
-        if (cacheService.checkDict(CacheDictType.DIVS_BY_TICKER, ticker)) {
-            return cacheService.getDict(CacheDictType.DIVS_BY_TICKER, ticker);
-        } else {
-            Optional<ConsolidatedDividendsRs> res = httpClient.sendAndParse(ticker);
-            if (res.isPresent()) {
-                res.get().calculatePercent(getHistory(ticker, getBoardId(ticker), null));
-                cacheService.putToCache(CacheDictType.DIVS_BY_TICKER, ticker, res.get(), ConsolidatedDividendsRs.class);
-                return res.get();
-            } else {
-                return null;
-            }
-        }
-    }
-
-    /**
-     * Запросить текущую цену (ставку) бумаги.
-     *
-     * @return
-     */
-    @Override
-    public Optional<Double> getCurrentQuoteByTicker(String ticker) {
-        if (!isBlank(ticker)) {
-            return Optional.of(getCurrentQuoteByBoardId(getBoardId(ticker)))
-                    .map(lq -> lq.getData()
-                            .getRow()
-                            .stream()
-                            .filter(r -> ticker.equals(r.getSecid()))
-                            .findFirst()
-                            .map(q -> Double.valueOf(q.getPrevAdmittedQuote())))
-                    .orElse(Optional.of((double) 0));
-
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    /**
-     * Запросить текущую цену акции по тикеру. Та, что обновляется раз в 15 минут с торгов.
-     *
-     * @return
-     */
-    @Override
-    public CurrentPriceRs getRealTimeQuote(String ticker) {
-
-        if (LocalTime.now().isBefore(LocalTime.of(10, 30))) {
-            return getCurrentQuoteByTicker(ticker)
-                    .map(cp -> CurrentPriceRs.builder()
-                            .ticker(ticker)
-                            .currency(Currencies.RUB)
-                            .currentPrice(cp)
-                            .date(LocalDate.now())
-                            .time(LocalTime.now())
-                            .lastChange(null)
-                            .lastChangePrcnt(null)
-                            .build())
-                    .orElse(CurrentPriceRs.builder()
-                            .ticker(ticker)
-                            .currency(Currencies.RUB)
-                            .currentPrice(null)
-                            .date(LocalDate.now())
-                            .time(LocalTime.now())
-                            .lastChange(null)
-                            .lastChangePrcnt(null)
-                            .build());
-        } else {
-
-            /*
-             * В общем решили, что ставки все же стоит кешировать, ибо в противном случае, получаем просто какую-то
-             * бомбардировку запросами и все это довольно долго отвечает. Поэтому ставки будем хранить пока час.
-             */
-            if (cacheService.checkDictWithRetention(CacheDictType.REALTIME_QUOTES_WITH_RETENTION, ticker)) {
-                return cacheService.getDictWithRetention(CacheDictType.REALTIME_QUOTES_WITH_RETENTION, ticker);
-            } else {
-
-
-                MoexDocumentRs doc = (MoexDocumentRs) httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_15_MINUTE_PRICE_UPDATE,
-                        ticker, null);
-
-                CurrentPriceRs curPrice = CurrentPriceRs.builder()
-                        .ticker(ticker)
-                        .currency(Currencies.RUB)
-                        .currentPrice(doc.getData().getRow().stream()
-                                .filter(r -> getBoardId(ticker).equals(r.getTradeMode()))
-                                .findFirst()
-                                .map(MoexRowsRs::getLast15MinuteQuote)
-                                .map(val -> {
-                                    try {
-                                        Double.parseDouble(val);
-                                        return val;
-                                    } catch (Exception e) {
-                                        return "0.0";
-                                    }
-                                })
-                                .map(Double::parseDouble).orElse(0D))
-                        .date(LocalDate.now())
-                        .time(doc.getData().getRow().stream()
-                                .filter(r -> getBoardId(ticker).equals(r.getTradeMode()))
-                                .findFirst()
-                                .map(MoexRowsRs::getUpdateTime)
-                                .map(LocalTime::parse).orElse(LocalTime.now()))
-                        .lastChange(doc.getData().getRow().stream()
-                                .filter(r -> getBoardId(ticker).equals(r.getTradeMode()))
-                                .findFirst()
-                                .map(MoexRowsRs::getLastChange)
-                                .map(Double::parseDouble).orElse(0D))
-                        .lastChangePrcnt(doc.getData().getRow().stream()
-                                .filter(r -> getBoardId(ticker).equals(r.getTradeMode()))
-                                .findFirst()
-                                .map(MoexRowsRs::getLastChangePrcnt)
-                                .map(Double::parseDouble).orElse(0D))
-                        .build();
-
-                if (curPrice.getCurrentPrice() == null || curPrice.getCurrentPrice() == 0) {
-                    curPrice.setCurrentPrice(doc.getData().getRow().stream()
-                            .filter(r -> getBoardId(ticker).equals(r.getTradeMode()))
-                            .findFirst()
-                            .map(MoexRowsRs::getLCurrentPrice)
-                            .map(val -> {
-                                try {
-                                    Double.parseDouble(val);
-                                    return val;
-                                } catch (Exception e) {
-                                    return "0.0";
-                                }
-                            })
-                            .map(Double::parseDouble).orElse(0D));
-                }
-
-                cacheService.putToCacheWithRetentionTime(CacheDictType.REALTIME_QUOTES_WITH_RETENTION,
-                        ticker,
-                        curPrice, CurrentPriceRs.class, LocalDateTime.now());
-
-                return curPrice;
-
-            }
-        }
-    }
-
-    /**
-     * Запросить текущую цену бумаги по board_id.
-     *
-     * @param
-     * @return
-     */
-    @Override
-    public MoexDocumentRs getCurrentQuoteByBoardId(String boardId) {
-
-        if (cacheService.checkDict(CacheDictType.LAST_QUOTES_BY_BOARD_ID, boardId)) {
-            return cacheService.getDict(CacheDictType.LAST_QUOTES_BY_BOARD_ID, boardId);
-        } else {
-            lastQuote = lastQuote + 1;
-            log.info("Запрос последней ставки по boardId: {}. Запрос №: {}", boardId, lastQuote);
-            MoexDocumentRs doc = (MoexDocumentRs) httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_LAST_QUOTE_MOEX, null, boardId);
-
-            cacheService.putToCache(CacheDictType.LAST_QUOTES_BY_BOARD_ID, boardId, doc, MoexDocumentRs.class);
-            return doc;
-        }
-    }
-
-    /**
-     * Запросить детальную информацию по бумаге (инструменту).
-     *
-     * @return
-     */
-    @Override
-    public Optional<MoexDetailInfoRs> getDetailInfo(String ticker) {
-        if (!isBlank(ticker)) {
-            return Optional.ofNullable((MoexDetailInfoRs) (httpClient.sendAndMarshall(MoexRestTemplateOperation.
-                    GET_INSTRUMENT_DETAIL_INFO, ticker, null)));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    /**
-     * Запросить board_id.
-     *
-     * @param ticker - тикер.
-     * @return
-     */
-    @Override
-    public String getBoardId(String ticker) {
-
-        if (cacheService.checkDict(CacheDictType.BOARD_ID_BY_TICKER, ticker)) {
-            return cacheService.getDict(CacheDictType.BOARD_ID_BY_TICKER, ticker);
-        } else {
-            String boardId = ((MoexDocumentForBoardIdRs)
-                    (httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_BOARD_ID, ticker, null)))
-                    .getData()
-                    .getRowList()
-                    .stream()
-                    .filter(MoexRowsForBoardIdRs::getIsPrimary)
-                    .findFirst()
-                    .map(MoexRowsForBoardIdRs::getBoardId)
-                    .orElse(null);
-
-            cacheService.putToCache(CacheDictType.BOARD_ID_BY_TICKER, ticker, boardId, String.class);
-            return boardId;
-        }
-    }
-
-    /**
-     * Запросить имя инструмента.
-     *
-     * @param ticker - тикер.
-     * @return
-     */
-    @Override
-    public String getInstrumentName(String boardId, String ticker) {
-
-        if (cacheService.checkDict(CacheDictType.INSTRUMENT_NAME, ticker)) {
-            return cacheService.getDict(CacheDictType.INSTRUMENT_NAME, ticker);
-        } else {
-            String instrumentName =
-                    ((MoexDocumentRs) (httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_INSTRUMENT_NAME, null, boardId)))
-                            .getData()
-                            .getRow()
-                            .stream()
-                            .filter(r -> ticker.equals(r.getSecid()))
-                            .findFirst()
-                            .map(MoexRowsRs::getSecName).orElse("-");
-
-            cacheService.putToCache(CacheDictType.INSTRUMENT_NAME, ticker, instrumentName, String.class);
-            return instrumentName;
-        }
-    }
-
-    /**
-     * Запросить и посчитать дельту.
-     *
-     * @param ticker            - тикер.
-     * @param currentStockPrice - текущая цена по рынку (всегда в рублях).
-     * @param purchaseList      - список покупок пользователя.
-     * @return
-     */
-    @Override
-    public DeltaRs calculateDelta(String ticker, Double currentStockPrice, List<Purchase> purchaseList,
-                                  DeltaMode deltaMode) { //todo: а в com.antonromanov.arnote.services.investment.calc.shares.foreign.ForeignCalcServiceImpl у этого же метода не аналогичный ли код? Не имеет ли смысла его куда-то вынести?
-
-        String boardId = getBoardId(ticker);
-        if (!isBlank(ticker) && !isBlank(boardId) && (currentStockPrice != null && currentStockPrice > 0)) {
-
-            MoexDocumentRs doc = getHistory(ticker, boardId, null);
-            MoexDocumentRs candles = getCandles(ticker, LocalDate.now().minusDays(1), LocalDate.now());
-
-            /*
-             * Как считаем:
-             *
-             * deltaInRubles = текущая цена - (цена по самой ранней дате)
-             * deltaPeriod = Миллисекунды от (текущая дата - (самая ранняя дата истории))
-             * tinkoffDelta = (сумма покупок * текущую цену рынка) - (Сумма(лот * цену по каждой покупке))
-             * candleDayDelta = (цена текущая - цена закрытия вчера) * кол-во акций в портфеле
-             */
-
-            Double dayDeltaFromCandle = 0.0D;
-            Integer instrumentsCount = 0;
-            Double dayDeltaFromCandleInPercents = 0.0D;
-            Double finalDelta;
-            Double finalDeltaInPercents;
-            Double finalIncome;
-            Double finalIncomeInPercent;
-
-            if (purchaseList.size() > 0) {
-                dayDeltaFromCandle = getDayDeltaFromCandle(candles);
-                instrumentsCount = purchaseList.stream()
-                        .map(Purchase::getLot)
-                        .reduce(Integer::sum)
-                        .orElse(0); // считаем кол-во бумаг в портфеле
-
-
-                Double getClosePositionForTomorrow = getClosePositionForTomorrow(candles);
-                dayDeltaFromCandleInPercents = getClosePositionForTomorrow == 0.0D ? 0.0D :
-                        dayDeltaFromCandle / (getClosePositionForTomorrow(candles) * instrumentsCount) * 100; // дневная дельта из свечей в процентах
-                log.info("dayDeltaFromCandle for {} = {} / {}%", ticker, dayDeltaFromCandle, dayDeltaFromCandleInPercents);
-                log.info("instrumentsCount {} ", instrumentsCount);
-            } else {
-                log.warn("По бумаге {} нет продаж - не считаем дельту! ", ticker);
-            }
-
-            if (DeltaMode.CANDLE_DELTA == deltaMode) {
-                finalDelta = dayDeltaFromCandle * instrumentsCount;
-                finalDeltaInPercents = dayDeltaFromCandleInPercents;
-                finalIncome = getIncomeForAllPurchasesFromCandle(candles, doc, currentStockPrice, purchaseList);
-                finalIncomeInPercent = getIncomeForAllPurchasesInPercents(finalIncome, purchaseList);
-            } else {
-                finalDelta = getTcsDeltaValues(purchaseList, currentStockPrice).get(TinkoffDeltaFinalValuesType.DELTA_FINAL);
-                finalDeltaInPercents = getTcsDeltaValues(purchaseList, currentStockPrice).get(TinkoffDeltaFinalValuesType.DELTA_PERCENT);
-                finalIncome = doc.getData()
-                        .getRow()
-                        .stream()
-                        .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                        .map(dv -> Double.valueOf(dv.getLegalClosePrice()))
-                        .map(Math::round)
-                        .map(n -> currentStockPrice - n)
-                        .orElse(0D);
-                finalIncomeInPercent = doc.getData()
-                        .getRow()
-                        .stream()
-                        .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                        .map(dv -> Double.valueOf(dv.getLegalClosePrice()))
-                        .map(n -> ((currentStockPrice - n) / n) * 100)
-                        .orElse(0D);
-            }
-
-            return DeltaRs.builder()
-                    .tinkoffDelta(finalDelta)
-                    .tinkoffDeltaPercent(finalDeltaInPercents)
-                    .deltaInRubles(finalIncome)
-                    .totalPercent(finalIncomeInPercent)
-                    .deltaPeriod(doc.getData()
-                            .getRow()
-                            .stream()
-                            .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                            .map(r -> {
-                                Period period = Period.between(LocalDate.parse(r.getTradeDate()), LocalDate.now());
-                                int diffInDays = Math.abs(period.getDays());
-                                return TimeUnit.DAYS.toMillis(diffInDays);
-                            })
-                            .orElse(0L))
-                    .build();
-
-
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Подготовить финальную цену (цена * лот).
-     *
-     * @param bond
-     * @return
-     */
-    @Override
-    public Integer calculateFinalPrice(Bond bond) {
-
-        if (bond.getIsBought()) { // если это ФАКТ
-            return bond.getPurchaseList().stream()
-                    .map(p -> p.getLot() * p.getPrice())
-                    .reduce((double) 0, Double::sum).intValue();
-
-        } else { // если ПЛАН
-            Double currPrice = getRealTimeQuote(bond.getTicker()).getCurrentPrice();
-            Long longFinalPrice = (Math.round((currPrice == null ? Double.NaN : currPrice) * getMinimalLot(bond.getTicker(), bond.getUser())));
-            return longFinalPrice.intValue();
-        }
-    }
-
-    /**
-     * Подготовить дивиденды.
-     *
-     * @return
-     */
-    @Override
-    public ConsolidatedDividendsRs getDividends(Bond bond) {
-        return Optional.of(getDivsByTicker(bond.getTicker()))
-                .orElse(ConsolidatedDividendsRs.builder()
-                        .dividendList(Collections.emptyList())
-                        .percent(0D)
-                        .divSum(0D)
-                        .build());
-    }
-
-    /**
-     * Подготовить данные по валюте.
-     *
-     * @return
-     */
-    @Override
-    public String getCurrencyOfShare(String ticker) {
-        if (cacheService.checkDict(CacheDictType.CURRENCY, ticker)) {
-            return cacheService.getDict(CacheDictType.CURRENCY, ticker);
-        } else {
-            String cur = getDetailInfo(ticker)
-                    .map(detailInfo -> detailInfo.getDataList().stream()
-                            .filter(data -> DataBlock.SECURITIES.getCode().equals(data.getId()))
-                            .findFirst()
-                            .map(sc -> sc.getRowsList().stream()
-                                    .filter(row -> getBoardId(ticker).equals(row.getBoardId()))
-                                    .findFirst()
-                                    .map(MoexInstrumentDetailRowsRs::getCurrencyId)
-                                    .map(Currencies::search)
-                                    .map(Enum::name)
-                                    .orElse("RUB"))
-                            .orElse("RUB"))
-                    .orElse("RUB");
-
-            cacheService.putToCache(CacheDictType.CURRENCY, ticker, cur, String.class);
-            return cur;
-        }
-    }
-
-    /**
-     * Достать минимальный лот.
-     *
-     * @return
-     */
-    @Override
-    public Integer getMinimalLot(String ticker, ArNoteUser user) {
-
-        String boardId = getBoardId(ticker);
-
-        if (cacheService.checkDict(CacheDictType.MINIMAL_LOT, ticker + boardId)) {
-            return cacheService.getDict(CacheDictType.MINIMAL_LOT, ticker + boardId);
-        } else {
-
-            Integer minLot = getDetailInfo(ticker) //todo: упростить, засунуть в ретурн
-                    .map(detailInfo -> detailInfo.getDataList().stream()
-                            .filter(data -> DataBlock.SECURITIES.getCode().equals(data.getId()))
-                            .findFirst()
-                            .map(sc -> sc.getRowsList().stream()
-                                    .filter(row -> boardId.equals(row.getBoardId()))
-                                    .findFirst()
-                                    .map(share -> Integer.parseInt(share.getLotSize()))
-                                    .orElse(1))
-                            .orElse(1))
-                    .orElse(1);
-            cacheService.putToCache(CacheDictType.MINIMAL_LOT, ticker, minLot, Integer.class);
-            return minLot;
-        }
-    }
-
-    /**
-     * Запросить исторические данные по котировкам с биржи.
-     *
-     * @param ticker  - тикер бумаги.
-     * @param boardId - boardId (только для MOEX)
-     * @param fromDate -на какую  дату запрашиваем.
-     * @return - MoexDocumentRs
-     */
-    @Override
-    public MoexDocumentRs getHistory(String ticker, String boardId, LocalDate fromDate) {
-
-            int start = 0; // начальная страница
-          //  int step = 100; // шаг перемещения
-         //   boolean isFinalPage = false; // проверочная переменная, определяющая, что дальше циклить не надо и мы достигли конца истории.
-            MoexDocumentRs resultDoc = new MoexDocumentRs(); // финальный документ с историей, заполненный всеми страницами
-
-         //   while (!isFinalPage) {
-
-                LocalDate requestDate;
-
-                if (fromDate == null) {
-                    requestDate = LocalDate.now().minusYears(10).withMonth(1).withDayOfMonth(1);
-                } else {
-                    requestDate = fromDate;
-                }
-
-                String reqDateAsString = requestDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
-                log.info("Запрашиваем историю на дату: {}", reqDateAsString);
-               // log.info("Запрашиваем историю. start = {}", start);
-                MoexDocumentRs localDoc = (MoexDocumentRs) httpClient.getHistory(MoexRestTemplateOperation.GET_DELTA,
-                        ticker, boardId, reqDateAsString, LocalDate.now().toString(), start);
-                log.info("Запросили историю. Получили записей: {}", localDoc.getData().getRow().size());
-
-                if (localDoc.getData() == null || localDoc.getData().getRow().size() == 0) {
-                    log.warn("Для даты {} страница пустая!", reqDateAsString);
-                //    start = start + step;
-                } else {
-                  //  isFinalPage = true;
-                    /*
-                     * Подливаем строки из локального документа в итоговый.
-                     */
-                    if (resultDoc.getData() == null) {
-                        MoexDataRs dataRs = new MoexDataRs();
-                        resultDoc.setData(dataRs);
-                    }
-                    resultDoc.getData().getRow().addAll(localDoc.getData().getRow());
-
-                    log.info("Получили данные с {} {}", resultDoc.getData().getRow().stream()
-                                    .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                                    .map(d -> (LocalDate.parse(d.getTradeDate())).getMonth()
-                                            .getDisplayName(TextStyle.FULL, new Locale("ru")))
-                                    .orElse("-"),
-                            resultDoc.getData().getRow().stream()
-                                    .min(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                                    .map(d -> (LocalDate.parse(d.getTradeDate())).getYear()).orElse(0));
-
-                    log.info("Получили данные по {} {}", resultDoc.getData().getRow().stream()
-                                    .max(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                                    .map(d -> (LocalDate.parse(d.getTradeDate())).getMonth()
-                                            .getDisplayName(TextStyle.FULL, new Locale("ru")))
-                                    .orElse("-"),
-                            resultDoc.getData().getRow().stream()
-                                    .max(Comparator.comparing(n -> LocalDate.parse(n.getTradeDate())))
-                                    .map(d -> (LocalDate.parse(d.getTradeDate())).getYear()).orElse(0));
-
-                    log.info("Получили записей: {}", resultDoc.getData().getRow().size());
-                }
-        //    }
-            return resultDoc;
-    }
-
-    /**
-     * Определить валюту и курсовой-множитель для рубля.
-     *
-     * @param currency - валютный идентификатор
-     * @return
-     */
-    @Override
-    public Double getCurrencyMultiplier(String currency) {
-
-        CommonMoexDoc doc = httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_CURRENCY_CHANGE_COURSES,
-                null, null);
-
-        return calculateCurrencyMultiplier(doc, currency);
-    }
-
-    /**
-     * Поиск акций по boardId.
-     *
-     * @return
-     */
-    @Override
-    public MoexDocumentRs findSharesByBoardId(String boardId) {
-
-        if (cacheService.checkDict(CacheDictType.FIND_SHARES_BY_BOARD_ID, boardId)) {
-            return cacheService.getDict(CacheDictType.FIND_SHARES_BY_BOARD_ID, boardId);
-        } else {
-            getAllSharesCount = getAllSharesCount + 1;
-            log.info("getAllSharesCount по boardId: {}. Запрос №: {}", boardId, getAllSharesCount);
-            MoexDocumentRs doc = (MoexDocumentRs) httpClient.sendAndMarshall(MoexRestTemplateOperation.GET_ALL_SHARES, null, boardId);
-            cacheService.putToCache(CacheDictType.FIND_SHARES_BY_BOARD_ID, boardId, doc, MoexDocumentRs.class);
-            return doc;
-        }
-
-    }
-
-    /**
-     * Выкачать и закэшировать режимы торгов.
-     *
-     * @return
-     */
-    @Override
-    public List<String> getTradeModes() {
-        if (cacheService.getTradeModes() != null && cacheService.getTradeModes().size() > 0) {
-            return cacheService.getTradeModes();
-        } else {
-            MoexDocumentRs doc = (MoexDocumentRs) httpClient.sendAndMarshall(
-                    MoexRestTemplateOperation.GET_TRADE_MODES, null, null);
-            List<String> res = doc.getData().getRow().stream()
-                    .filter(r -> "1".equals(r.getIsTraded()))
-                    .map(MoexRowsRs::getBoardId)
-                    .collect(Collectors.toList());
-            cacheService.putTradeModes(res);
-            return res;
-        }
-    }
-
-    /**
-     * Найти бумагу по ключевому слову. Возвращает только акции.
-     *
-     * @param keyword
-     * @return
-     */
-    @Override
-    public MoexDocumentRs findInstrumentsByName(String keyword) {
-        return null; // не используется для MOEX.
-    }
-}
Index: src/main/java/com/antonromanov/arnote/entity/finplan/Credit.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/finplan/Credit.java b/src/main/java/com/antonromanov/arnote/entity/finplan/Credit.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/finplan/Credit.java	
+++ /dev/null	
@@ -1,75 +0,0 @@
-package com.antonromanov.arnote.entity.finplan;
-
-import com.antonromanov.arnote.dto.rq.CreditRq;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import javax.persistence.*;
-import java.util.Date;
-
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "credit")
-@Builder
-public class Credit {
-
-    @Id
-    @Column(name = "id", nullable = false)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "credit_seq_gen")
-    @SequenceGenerator(name = "credit_seq_gen", sequenceName = "credit_id_seq", allocationSize = 1)
-    private Long id;
-
-    @Column(name = "start_amount", nullable = true)
-    private Integer startAmount; // Общая сумма кредита
-
-    @Column(name = "full_month_pay", nullable = true)
-    private Integer fullPayPerMonth; // Общий платеж по кредиту
-
-    @Column(name = "real_month_pay", nullable = true)
-    private Integer realPayPerMonth; // Сколько уходит на погашение кредита после вычета процентов
-
-    @Column(name = "credit_number", nullable = true)
-    private Integer creditNumber; // Номер кредита. Разрешено всего 5
-
-    @Column(name = "start_date", nullable = true)
-    @Temporal(TemporalType.DATE)
-    private Date startDate; // Дата взятия кредита
-
-    @ManyToOne(cascade = CascadeType.REFRESH)
-    private ArNoteUser user;
-
-    @Column(name = "credit_desc")
-    private String description;
-
-    public static Credit $toDbEntity(CreditRq rq, int nextLoanNumber, ArNoteUser user) {
-        return Credit.builder()
-                .startAmount(rq.getStartAmount())
-                .fullPayPerMonth(rq.getFullPayPerMonth())
-                .realPayPerMonth(rq.getRealPayPerMonth())
-                .creditNumber(nextLoanNumber)
-                .startDate(rq.getStartDate())
-                .user(user)
-                .description(rq.getDesc())
-                .id(rq.getId())
-                .build();
-    }
-
-    public static Credit $toDbEntityWithCheck(CreditRq newLoan, Credit oldLoan, ArNoteUser user) {
-        return Credit.builder()
-                .startAmount(newLoan.getStartAmount() == null ? oldLoan.getStartAmount() : newLoan.getStartAmount())
-                .fullPayPerMonth(newLoan.getFullPayPerMonth() == null ? oldLoan.getFullPayPerMonth() : newLoan.getFullPayPerMonth())
-                .realPayPerMonth(newLoan.getRealPayPerMonth() == null ? oldLoan.getRealPayPerMonth() : newLoan.getRealPayPerMonth())
-                .creditNumber(newLoan.getSlotNumber() == null ? oldLoan.getCreditNumber() : newLoan.getSlotNumber())
-                .startDate(newLoan.getStartDate() == null ? oldLoan.getStartDate() : newLoan.getStartDate())
-                .user(user)
-                .description(newLoan.getDesc() == null ? oldLoan.getDescription() : newLoan.getDesc())
-                .id(oldLoan.getId())
-                .build();
-    }
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/BondRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/BondRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/BondRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/BondRs.java	
+++ /dev/null	
@@ -1,31 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-/**
- * Респонс по ценной бумаге
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class BondRs {
-    @JsonIgnore
-    private final Long id;
-    private final String ticker;
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double currentPrice;
-    private final String currency;
-    private final String type;
-    private final ConsolidatedDividendsRs dividends;
-    private final Integer minLot; // минимальный лот или сколько куплено уже пользователем
-    private final Integer finalPrice; // currentPrice * minLot
-    private final String description; // описание бумаги
-    private final DeltaRs delta; // доступный в истории биржи период дельты
-    private final String stockExchange; // биржа
-    private Boolean isBought; // факт / План
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/enums/StockExchange.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/StockExchange.java b/src/main/java/com/antonromanov/arnote/model/investing/response/enums/StockExchange.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/StockExchange.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-@Getter
-@AllArgsConstructor
-public enum StockExchange {
-    MOEX("moexCalculator"), SPB("foreignCalculator");
-
-    private final String value;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParams.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParams.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParams.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/UrlRequestParams.java	
+++ /dev/null	
@@ -1,54 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.BoardsColumns;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.DataBlock;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.MarketData;
-import com.antonromanov.arnote.model.investing.response.xmlpart.enums.SecuritiesColumns;
-import com.antonromanov.arnote.model.investing.response.xmlpart.UrlQueryParameters;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.util.EnumSet;
-import java.util.stream.Collectors;
-
-/**
- * Параметры URL (которые после ? идут)
- */
-@Data
-@AllArgsConstructor
-@Builder
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public class UrlRequestParams {
-    private Boolean issMeta;
-    private String issDp;
-    private EnumSet<DataBlock> issOnly;
-    private EnumSet<SecuritiesColumns> securitiesColumns;
-    private EnumSet<BoardsColumns> boardsColumns;
-    private EnumSet<MarketData> marketDataColumns;
-    private String from;
-
-    public UrlRequestParamsAdapter convertByAdapter(){
-        return UrlRequestParamsAdapter
-                .builder()
-                .issMeta(this.issMeta)
-                .issDp(this.issDp)
-                .from(this.from)
-                .issOnly(convertEnumSet(this.issOnly, (UrlQueryParameters::getCode)))
-                .securitiesColumns(convertEnumSet(this.securitiesColumns, (UrlQueryParameters::getCode)))
-                .boardsColumns(convertEnumSet(this.boardsColumns, (UrlQueryParameters::getCode)))
-                .marketDataColumns(convertEnumSet(this.marketDataColumns, (UrlQueryParameters::getCode)))
-                .build();
-    }
-
-    interface Expression{
-        String castIt(UrlQueryParameters n);
-    }
-
-
-    private <T extends Enum<T>>String  convertEnumSet(EnumSet<T> set, Expression func) {
-        return set==null? null : set.stream()
-                .map((T n) -> func.castIt((UrlQueryParameters) n))
-                .collect(Collectors.joining(","));
-    }
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/WishRepository.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/WishRepository.java b/src/main/java/com/antonromanov/arnote/repositoty/WishRepository.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/WishRepository.java	
+++ /dev/null	
@@ -1,75 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.wish.Wish;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface WishRepository extends JpaRepository<Wish, Integer>{ //todo: почему Integer ????
-
-	@Query(value="select w from Wish w where w.ac = false and (w.realized = false or w.realized is null) and w.user = :user order by w.priorityGroup, w.priorityGroupOrder ASC ")
-	List<Wish> getAllWithGroupOrder(@Param("user") ArNoteUser user);
-
-	@Query(value="select w from Wish w where w.ac = false and (w.realized = false or w.realized is null) and w.user = :user order by w.priority ASC ")
-	List<Wish> findAllByIdSorted(@Param("user") ArNoteUser user);
-
-
-
-	@Query(value="select w from Wish w where w.ac = false and (w.realized = false or w.realized is null) and" +
-			" w.priority = 1 and  w.user = :user order by w.wish ASC ")
-	List<Wish> getAllWithPriority1(@Param("user") ArNoteUser user);
-
-	@Query(value="select w from Wish w")
-	List<Wish> getAll();
-
-	/**
-	 * Найти все желания по пользаку.
-	 *
-	 * @param user
-	 * @return
-	 */
-	List<Wish> findAllByUser(ArNoteUser user);
-
-
-	/**
-	 * Метод для высчитывания среднего времени реализации.
-	 *
-	 * @param user
-	 * @return
-	 */
-	@Query(value="select w from Wish w where w.ac = false and w.realized = true and  w.user = :user order by w.wish ASC ")
-	List<Wish> getAllRealizedWishes(@Param("user") ArNoteUser user);
-
-
-
-	@Query(value="select w from Wish w where w.wish = ?1")
-	Optional<List<Wish>> getWishesByName(@Param("wish") String wish);
-
-	Optional<Wish> findById(long l);
-
-
-	/**
-	 * Запросить сумму всех реализованных пользователем желаний за все время.
- 	 */
-	@Query(value="select sum(p.price) from (select * from wishes w WHERE " +
-			"(w.id NOT IN (311) " +
-			"and w.user_id = :userId)) p" +
-			" WHERE NOT p.archive AND (p.realized=true)", nativeQuery = true)
-	Optional<Integer> getImplementedSum4AllPeriod(long userId);
-
-	/**
-	 * Запросить сумму всех реализованных пользователем желаний за текущий месяц.
- 	 */
-	@Query(value="select sum(p.price) from (select * from wishes w WHERE " +
-			"(w.id NOT IN (311) " +
-			"and w.user_id = :userId " +
-			"and extract(month FROM w.realization_date) = extract (month FROM CURRENT_DATE))) p" +
-			" WHERE NOT p.archive AND (p.realized=true)", nativeQuery = true)
-	Optional<Integer> getImplementedSum4Month(long userId);
-
-}
Index: src/main/java/com/antonromanov/arnote/model/SortMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/SortMode.java b/src/main/java/com/antonromanov/arnote/model/SortMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/SortMode.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Режим сортировки.
- */
-@AllArgsConstructor
-@Getter
-public enum SortMode {
-    NAME("Сортировка по имени", "name"),
-    PRICE_ASC("Сортировка по возрастанию стоимости", "price-asc"),
-    PRICE_DESC("Сортировка по убыванию стоимости", "price-desc"),
-    PRIORITY("Сортировка по приоритету", "priority"),
-    ALL("Без сортировки", "all");
-
-    private String description;
-    private String uiValue;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequestsApiType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequestsApiType.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequestsApiType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequestsApiType.java	
+++ /dev/null	
@@ -1,23 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Так как для буржуйских бумаг пришлось использовать разные API, решил:
- *
- * 1. Не хранить урл в пропертях, ибо это не очень удобно и не очень очевидно с точки зрения замены всего этого
- * и передеплоить проект по джобу на самом деле проще, ибо руками действий делаешь меньше. Все делает джоб.
- *
- * 2. Разные типы API и соответственно разные типы урлов к ним (как минимум - хостов) решил хранить в енумах.
- */
-
-@Getter
-@AllArgsConstructor
-public enum ForeignRequestsApiType {
-    ALFA_ADVANTAGE("www.alphavantage.co"),
-    MARKETSTACK("api.marketstack.com/v1"),
-    YAHOO_FINANCE("query1.finance.yahoo.com");
-
-    private final String url;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/serializers/DoubleSerializer.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/DoubleSerializer.java b/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/DoubleSerializer.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/serializers/DoubleSerializer.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.serializers;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import java.io.IOException;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-
-public class DoubleSerializer extends JsonSerializer<Double> {
-
-
-    @Override
-    public void serialize(Double value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
-
-        DecimalFormat formatter = new DecimalFormat();
-        formatter.setMaximumFractionDigits(2);
-        formatter.setMinimumFractionDigits(2);
-        formatter.setGroupingUsed(false);
-        DecimalFormatSymbols sym = DecimalFormatSymbols.getInstance();
-        sym.setDecimalSeparator('.');
-        formatter.setDecimalFormatSymbols(sym);
-        jsonGenerator.writeNumber(formatter.format(value));
-    }
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/shares/SharesCalcService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/SharesCalcService.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/SharesCalcService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/SharesCalcService.java	
+++ /dev/null	
@@ -1,161 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.shares;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.Purchase;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.CurrentPriceRs;
-import com.antonromanov.arnote.model.investing.response.DeltaRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo.MoexDetailInfoRs;
-import com.antonromanov.arnote.model.wish.enums.DeltaMode;
-import java.time.LocalDate;
-import java.util.List;
-import java.util.Optional;
-
-public interface SharesCalcService {
-
-    /**
-     * Получить Свечи
-     *
-     * @return
-     */
-    MoexDocumentRs getCandles(String ticker, LocalDate fromDate, LocalDate tillDate);
-
-
-    /**
-     * Запросить дивиденды через API биржи, подсчитать сумму и проценты относительно текущей цены акции и вернуть все это.
-     *
-     * @return
-     */
-    ConsolidatedDividendsRs getDivsByTicker(String ticker);
-
-    /**
-     * Запросить текущую цену акции по тикеру.
-     *
-     * @return
-     */
-    Optional<Double> getCurrentQuoteByTicker(String ticker);
-
-    /**
-     * Запросить текущую цену акции по тикеру. Та, что обновляется раз в 15 минут с торгов.
-     *
-     * @return
-     */
-    CurrentPriceRs getRealTimeQuote(String ticker);
-
-    /**
-     * Запросить текущую цену бумаги по board_id.
-     *
-     * @param
-     * @return
-     */
-    MoexDocumentRs getCurrentQuoteByBoardId(String boardId);
-
-    /**
-     * Запросить детальную информацию по бумаге (инструменту).
-     *
-     * @return
-     */
-    Optional<MoexDetailInfoRs> getDetailInfo(String ticker);
-
-    /**
-     * Запросить board_id.
-     *
-     * @param ticker - тикер.
-     * @return
-     */
-    String getBoardId(String ticker);
-
-    /**
-     * Запросить имя инструмента.
-     *
-     * @param ticker - тикер.
-     * @return
-     */
-    String getInstrumentName(String boardId, String ticker);
-
-    /**
-     * Запросить и посчитать дельту.
-     *
-     * @param ticker            - тикер.
-     * @param currentStockPrice - текущая рыночная ставка (цена)
-     * @param purchaseList      - список покупок (цен) пользователя
-     * @param deltaMode      - как считаем Дельту.
-     * @return
-     */
-    DeltaRs calculateDelta(String ticker, Double currentStockPrice, List<Purchase> purchaseList,
-                           DeltaMode deltaMode);
-
-    /**
-     * Подготовить финальную цену (цена * лот).
-     *
-     * @param bond
-     * @return
-     */
-    Integer calculateFinalPrice(Bond bond);
-
-    /**
-     * Подготовить дивиденды.
-     *
-     * @return
-     */
-    ConsolidatedDividendsRs getDividends(Bond bond);
-
-
-    /**
-     * Подготовить данные по валюте.
-     *
-     * @return
-     */
-    String getCurrencyOfShare(String ticker);
-
-    /**
-     * Достать минимальный лот.
-     *
-     * @return
-     */
-    Integer getMinimalLot(String ticker, ArNoteUser user);
-
-    /**
-     * Запросить исторические данные по котировкам с биржи.
-     *
-     * @param ticker - тикер бумаги.
-     * @param boardId - boardId (только для MOEX)
-     * @param forDate -на какую  дату запрашиваем.
-     * @return - MoexDocumentRs
-     */
-    MoexDocumentRs getHistory(String ticker, String boardId, LocalDate forDate);
-
-    /**
-     * Определить валюту и курсовой-множитель для рубля.
-     *
-     * @param currency - валютный идентификатор
-     * @return
-     */
-    Double getCurrencyMultiplier(String currency);
-
-
-    /**
-     * Поиск акций по boardId.
-     *
-     * @return
-     */
-    MoexDocumentRs findSharesByBoardId(String boardId);
-
-    /**
-     * Выкачать и закэшировать режимы торгов.
-     *
-     * @return
-     */
-    List<String> getTradeModes();
-
-
-    /**
-     * Найти буржуйскую бумагу по ключевому слову. Возвращает только акции.
-     *
-     * @param keyword
-     * @return
-     */
-    MoexDocumentRs findInstrumentsByName(String keyword);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import java.util.List;
-
-/**
- * ДТО для ответа по текущей ставке от Яху
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooQuoteSummeryRs {
-    List<YahooQuoteSummeryElementRs> result;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestServiceImpl.java	
+++ /dev/null	
@@ -1,226 +0,0 @@
-package com.antonromanov.arnote.services.investment.requestservice;
-
-import com.antonromanov.arnote.exceptions.MoexRequestException;
-import com.antonromanov.arnote.model.investing.external.requests.ForeignRequests;
-import com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import com.antonromanov.arnote.services.investment.xmlparse.XmlHandler;
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Service;
-import org.springframework.util.LinkedMultiValueMap;
-import org.springframework.util.MultiValueMap;
-import org.springframework.web.client.RestTemplate;
-
-import java.io.IOException;
-import java.util.*;
-import java.util.stream.Collectors;
-
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-
-@Service
-@Slf4j
-public class RequestServiceImpl implements RequestService {
-
-    /**
-     * url на получение токена
-     */
-    @Value("${moexUrl}")
-    public String MOEX_URL;
-
-    private final XmlHandler xmlParser;
-    private final RestTemplate rt;
-    private final ObjectMapper objectMapper;
-    private Integer counter = 0;
-
-    public RequestServiceImpl(XmlHandler xmlParser, RestTemplate rt, ObjectMapper objectMapper) {
-        this.xmlParser = xmlParser;
-        this.rt = rt;
-        this.objectMapper = objectMapper;
-    }
-
-
-    /**
-     * Запросить дивиденды.
-     *
-     * @param ticker
-     * @return
-     */
-    @Override
-    public Optional<ConsolidatedDividendsRs> sendAndParse(String ticker) {
-        try {
-            counter = +1;
-            return xmlParser.parse(rt.getForEntity("http://iss.moex.com/iss/securities/"
-                    + ticker
-                    + "/dividends.xml?iss.meta=off", String.class));
-
-        } catch (Exception e) {
-            return Optional.empty();
-        }
-    }
-
-    /**
-     * Сделать запрос и смаршелить результат.
-     *
-     * @param type
-     * @return
-     */
-    @Override
-    public CommonMoexDoc sendAndMarshall(MoexRestTemplateOperation type, String ticker, String boardId) {
-        if (type != MoexRestTemplateOperation.GET_DIVS_MOEX) {
-            try {
-                log.info("Sending MOEX request to: {}",
-                        prepareUrl(MOEX_URL, type, serializeObjectToMVMap(type.getRequestParams().convertByAdapter()),
-                                prepareParametersMap(ticker, boardId)));
-
-                return xmlParser.marshall(rt.getForEntity(prepareUrl(MOEX_URL,
-                        type,
-                        serializeObjectToMVMap(type.getRequestParams().convertByAdapter()),
-                        prepareParametersMap(ticker, boardId)),
-                        String.class),
-                        type.getClassName());
-
-            } catch (Exception e) {
-                log.error("Ошибка взаимодействия с биржей (маршелинга либо отправки): {}", e.getMessage());
-                throw new MoexRequestException();
-            }
-        } else {
-            throw new MoexRequestException();
-        }
-    }
-
-    @Override
-    public CommonMoexDoc getHistory(MoexRestTemplateOperation type, String ticker, String boardId, String dateFrom,
-                                    String dateTill, int start) {
-        try {
-            log.info("Sending MOEX request for history. Url: {}",
-                    prepareUrlForHistory(MOEX_URL, type, serializeObjectToMVMap(type.getRequestParams().convertByAdapter()),
-                            prepareParametersMap(ticker, boardId), dateFrom, dateTill, start));
-
-            return xmlParser.marshall(
-                    rt.getForEntity(prepareUrlForHistory(MOEX_URL, type, serializeObjectToMVMap(type.getRequestParams().convertByAdapter()),
-                            prepareParametersMap(ticker, boardId), dateFrom, dateTill, start), String.class),
-                    type.getClassName());
-        } catch (Exception e) {
-            throw new MoexRequestException();
-        }
-    }
-
-    @Override
-    public CommonMoexDoc getCandles(MoexRestTemplateOperation type, String ticker, String dateFrom, String dateTill, int start) {
-        try {
-
-          String url = prepareUrlForCandles(MOEX_URL, type, serializeObjectToMVMap(type.getRequestParams().convertByAdapter()),
-                  prepareParametersMap(ticker, null), dateFrom, dateTill, start); // todo: подумать как сделать один метод и для истории и для свечей
-            log.info("Sending MOEX request for candles. Url: {}", url);
-
-
-            return xmlParser.marshall(
-                    rt.getForEntity(url, String.class), type.getClassName());
-        } catch (Exception e) {
-            throw new MoexRequestException();
-        }
-    }
-
-    /**
-     * Подготовить мапу параметров.
-     *
-     * @param param1 - для MOEX как правило тикер.
-     * @param param2 - для MOEX как правило boardId.
-     * @return
-     */
-    private Map<String, String> prepareParametersMap(String param1, String param2) { // todo: переделать чтобы разное кол-во параметров передавать можно было
-        Map<String, String> m = new HashMap<>();
-        m.put("p1", param1);
-        m.put("p2", param2);
-        return m;
-    }
-
-    /**
-     * Подготовить  мапу нумерованных параметров для URLа
-     *
-     * @return
-     */
-    private Map<String, String> prepareParametersMapFromList(LinkedList<String> paramList) {
-        List<Integer> indexList = new LinkedList<>();
-        for (int i = 0; i < paramList.size(); i++) {
-            indexList.add(i);
-        }
-        return indexList.stream().collect(Collectors.toMap(i -> "p"+(i+1), paramList::get));
-    }
-
-    /**
-     * Сериализовать параметры запроса в MultiValueMap.
-     *
-     * @param type
-     * @return
-     */
-    @Override
-    public MultiValueMap<String, String> serializeObjectToMVMap(Object type) {
-        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();
-        Map<String, String> maps = objectMapper.convertValue(type, new TypeReference<Map<String, String>>() {
-        });
-        parameters.setAll(maps);
-        return parameters;
-    }
-
-    /**
-     * Нужно исключительно для тестирования.
-     *
-     * @return
-     */
-    @Override
-    public int getCounter() {
-        return counter;
-    }
-
-    /**
-     * Отправить запрос в буржуйское API.
-     *
-     * @param <T>         - респонс.
-     * @param requestType - тип, содержащие разные данные по урлу и прочему.
-     * @param ticker      - тикер бумаги.
-     * @param clazz       - класс респонса.
-     * @return
-     */
-    @Override
-    public <T> T sendAndMarshallForeignRequest(ForeignRequests requestType, LinkedList<String> ticker, Class<T> clazz) {
-
-        String url = prepareForeignUrl(requestType,
-                serializeObjectToMVMap(requestType.getRequestParams()), prepareParametersMapFromList(ticker));
-        log.info("Sending foreign request to: {}", url);
-        try {
-            ResponseEntity<String> response = rt.getForEntity(url, String.class);
-            return objectMapper.readValue(response.getBody(), clazz);
-        } catch (Exception e) {
-            log.error("Произошла ошибка запроса данных из API или ошибка парсинга результата по запросу: {}. Ошибка: {}", requestType, e.getMessage());
-            return null;
-        }
-    }
-
-    /**
-     * Отправить запрос в буржуйское API без сериализации (вернуть сразу респонс назад).
-     *
-     *
-     * @param requestType - тип, содержащие разные данные по урлу и прочему.
-     * @param ticker - тикер бумаги.
-     *
-     * @return
-     */
-    @Override
-    public Optional<String> sendForeignRequest(ForeignRequests requestType, LinkedList<String> ticker) {
-        String url = prepareForeignUrl(requestType,
-                serializeObjectToMVMap(requestType.getRequestParams()), prepareParametersMapFromList(ticker));
-        log.info("Sending foreign request to: {}", url);
-        try {
-            ResponseEntity<String> response = rt.getForEntity(url, String.class);
-            return Optional.ofNullable(response.getBody());
-        } catch (Exception e){
-            return Optional.empty();
-        }
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/WishGroup.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/WishGroup.java b/src/main/java/com/antonromanov/arnote/model/wish/WishGroup.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/WishGroup.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.*;
-
-import javax.persistence.*;
-import java.util.List;
-
-@Entity
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table
-public class WishGroup {
-
-    @Id
-    @Column(name="id", nullable = true)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "group_seq_gen")
-    @SequenceGenerator(name = "group_seq_gen", sequenceName ="group_id_seq", allocationSize = 1)
-    private long id;
-
-    //@OneToMany(mappedBy = "group", fetch = FetchType.EAGER)
-    //private List<Wish> groupName;
-    private String groupName;
-}
-
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequests.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequests.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequests.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignRequests.java	
+++ /dev/null	
@@ -1,53 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Запросы к буржуйским API.
- */
-@Getter
-@AllArgsConstructor
-public enum ForeignRequests {
-    GET_REALTIME_QUOTE("Получить последнюю ставку в реальном времени",  Schemas.HTTPS,
-            ForeignRequestsApiType.YAHOO_FINANCE, "/v10/finance/quoteSummary/{p1:[a-z]{1,5}}",
-            ForeignUrlRequestParams.builder().modules("price").build()),
-    GET_DIVS("Получить дивиденды", Schemas.HTTPS, ForeignRequestsApiType.YAHOO_FINANCE,
-            "/v8/finance/chart/{p1:[a-z]{1,5}}",
-            ForeignUrlRequestParams.builder()
-                    .symbol("{p1:[a-z]{1,5}}")
-                    .period1("{p2:[a-z]{1,5}}")
-                    .period2("{p3:[a-z]{1,5}}")
-                    .interval("{p4:[a-z]{1,5}}")
-                    .includePrePost("{p5:[a-z]{1,5}}")
-                    .events("{p6:[a-z]{1,5}}")
-                    .build()),
-    GET_HISTORY("Запросить историю по ставкам", Schemas.HTTPS, ForeignRequestsApiType.YAHOO_FINANCE,
-            "/v8/finance/chart/{p1:[a-z]{1,5}}",
-            ForeignUrlRequestParams.builder()
-            .symbol("{p1:[a-z]{1,5}}")
-            .period1("{p2:[a-z]{1,5}}")
-            .period2("{p3:[a-z]{1,5}}")
-            .interval("{p4:[a-z]{1,5}}")
-            .build()),
-    GET_INSTRUMENT_NAME("Запросить название бумаги", Schemas.HTTPS, ForeignRequestsApiType.ALFA_ADVANTAGE,
-            "query",
-            ForeignUrlRequestParams.builder()
-                    .symbol("{p1:[a-z]{1,5}}")
-                    .function("{p2:[a-z]{1,5}}")
-                    .apikey("{p3:[a-z]{1,5}}")
-                    .build()),
-    FIND_INSTRUMENT("Найти бумагу по имени", Schemas.HTTPS, ForeignRequestsApiType.ALFA_ADVANTAGE,
-            "query",
-                        ForeignUrlRequestParams.builder()
-                    .keywords("{p1:[a-z]{1,5}}")
-                    .function("{p2:[a-z]{1,5}}")
-                    .apikey("{p3:[a-z]{1,5}}")
-                    .build());
-
-    private final String description;
-    private final Schemas schema;
-    private final ForeignRequestsApiType host;
-    private final String constantPart;
-    private final ForeignUrlRequestParams requestParams;
-}
Index: src/main/java/com/antonromanov/arnote/controller/WishController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/WishController.java b/src/main/java/com/antonromanov/arnote/controller/WishController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/WishController.java	
+++ /dev/null	
@@ -1,144 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.request.MoveWishDto;
-import com.antonromanov.arnote.dto.response.WishListResponse;
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.enums.FilterMode;
-import com.antonromanov.arnote.enums.ListOfAllType;
-import com.antonromanov.arnote.enums.SortMode;
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.exceptions.NoDataYetException;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.web.bind.annotation.*;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-
-
-//todo: заменить логи на интерцепторы
-//todo: надо сделать проверку на уникальность добавляемых желаний
-//todo: прописать JavaDoc везде
-//todo: еррорхендлер сделать и проверить что он отрабатывает на фронте нормально
-//todo: добавить тесты
-// SELECT sum(w.price) from arnote.wishes w WHERE w.user_id = 8 AND w.realized AND NOT w.archive - запрос реализованных желаний
-
-/**
- * REST-контроллер управления желаниями.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/wish")
-@Slf4j
-@AllArgsConstructor
-public class WishController {
-
-    private final MainService mainService;
-    private final Utils utils;
-
-    /**
-     * Поиск желаний.
-     *
-     * @param principal
-     * @param wish
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping("/filter")
-    public WishListResponse findAll(Principal principal, @RequestBody Wish wish) throws Exception {
-        return WishListResponse.builder()
-                .list(mainService
-                        .findAllWishesByWish(wish, utils.getUserFromPrincipal(principal))
-                        .orElseGet(ArrayList::new))
-                .build();
-    }
-
-    /**
-     * Получить все желания.
-     *
-     * @param principal - пользователь.
-     * @param filterType - Что показываем: все желания или приоритетные
-     * @param sortType - типы сортировки.
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping
-    public WishListResponse getAllWishes(Principal principal, @RequestParam FilterMode filterType, @RequestParam SortMode sortType)
-            throws UserNotFoundException, NoDataYetException {
-
-        if (mainService.getAllWishesByUser(utils.getUserFromPrincipal(principal)).isEmpty()) {
-            throw new NoDataYetException(false); //todo: разобраться с этим моментом
-        } else {
-            return WishListResponse.builder()
-                    .list(mainService.getAllWishesAndUpdateUser(utils.getUserFromPrincipal(principal), filterType, sortType))
-                    .build();
-        }
-    }
-
-    /**
-     * Изменить желание.
-     *
-     * @param wish
-     * @param principal
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @PutMapping
-    public Wish updateWish(Principal principal, @RequestBody Wish wish) throws BadIncomeParameter, UserNotFoundException {
-        wish.setUser(utils.getUserFromPrincipal(principal));
-        wish.setRealizationDate(new Date());
-        return mainService.updateWish(mainService.updateMonthGroup(wish));
-    }
-
-    /**
-     * Добавить новое желание.
-     *
-     * @param principal
-     * @param wish - новое желание.
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping
-    public Wish addWish(Principal principal, @RequestBody Wish wish) throws UserNotFoundException {
-        wish.setUser(utils.getUserFromPrincipal(principal));
-        wish.setCreationDate(new Date());
-        wish.setRealized(false);
-        wish.setAc(false);
-        return mainService.addWish(wish);
-    }
-
-    /**
-     * Удалить желание.
-     *
-     * @param principal
-     * @param id
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @DeleteMapping
-    public Wish deleteWish(Principal principal, @RequestParam String id) throws BadIncomeParameter {
-        Wish wish = mainService.getWishById(Integer.parseInt(id)).orElseThrow(() ->
-                new BadIncomeParameter(BadIncomeParameter.ParameterKind.WISH_ID_SEARCH));
-        wish.setAc(true); //todo: билдер или отдельное дто для wishResponse ???
-        return mainService.updateWish(wish);
-    }
-
-    /**
-     * Дискретное изменение приоритета.
-     *
-     * @param principal
-     * @param dto
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping("/move")
-    public Wish changePriority(Principal principal, @RequestBody MoveWishDto dto) throws BadIncomeParameter {
-        return mainService.getWishById(dto.getId())
-                .map(wish ->  dto.getStep().getChangePriority().move(wish, mainService))
-                .orElseThrow(() -> new BadIncomeParameter(BadIncomeParameter.ParameterKind.WISH_ID_SEARCH));
-    }
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/FreezeRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/FreezeRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/FreezeRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/FreezeRepo.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.entity.finplan.Freeze;
-import com.antonromanov.arnote.model.ArNoteUser;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Репозиторий фризов.
- */
-@Repository
-public interface FreezeRepo extends JpaRepository<Freeze, Long>{
-
-
-    @Query(value="select f from Freeze f where f.user = :user and " +
-            "f.startDate <> null and " +
-            "EXTRACT(YEAR from f.startDate) = :year and " +
-            "EXTRACT(MONTH from f.startDate) = :month")
-    Optional<Freeze> findFreezeByUserAndMonthAndYear(@Param("user") ArNoteUser user, @Param("year") int year,
-                                                     @Param("month") int month);
-
-    List<Freeze> findAllByUser(ArNoteUser user);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexStockCurrentPriceRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexStockCurrentPriceRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexStockCurrentPriceRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexStockCurrentPriceRs.java	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.currentquote;
-
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-
-@XmlRootElement(name = "document")
-public class MoexStockCurrentPriceRs {
-        @XmlElement(name = "data")
-        MoexDocumentRs moexDocumentRsObject;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/ReturnsPerMonthRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/ReturnsPerMonthRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/ReturnsPerMonthRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/ReturnsPerMonthRs.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.BondType;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-@Data
-@AllArgsConstructor
-@Builder
-public class ReturnsPerMonthRs {
-
-    private final String registryCloseDate; // дата закрытия регистра
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double value; // цена, размер дивиденда
-    private final Currencies currencyId; // валюта
-    private final String ticker;
-    private final BondType type;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDocumentForBoardIdRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDocumentForBoardIdRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDocumentForBoardIdRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexDocumentForBoardIdRs.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.boardid;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import lombok.Data;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-
-@XmlRootElement(name = "document")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexDocumentForBoardIdRs implements CommonMoexDoc {
-    @XmlElement(name = "data")
-    MoexDataForBoardIdRs data;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceRs.java	
+++ /dev/null	
@@ -1,32 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import java.time.LocalDate;
-import java.time.LocalTime;
-
-/**
- * Текущая цена и минимальный лот.
- */
-@Data
-@AllArgsConstructor
-@Builder
-@NoArgsConstructor
-public class CurrentPriceRs {
-   @JsonSerialize(using = DoubleSerializer.class)
-   private Double currentPrice;
-   private String ticker;
-   private Currencies currency;
-   private LocalDate date; // дата торгов с которой взята цена
-   private LocalTime time; // таймстемп ставки (точнее обновления)
-   @JsonSerialize(using = DoubleSerializer.class)
-   private Double lastChange; // изменение в рублях
-   @JsonSerialize(using = DoubleSerializer.class)
-   private Double lastChangePrcnt; // изменение в процентах
-   private int minLot; // минимальный лот
-}
Index: src/main/java/com/antonromanov/arnote/model/common/Holiday.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/common/Holiday.java b/src/main/java/com/antonromanov/arnote/model/common/Holiday.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/common/Holiday.java	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package com.antonromanov.arnote.model.common;
-
-import lombok.Data;
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class Holiday {
-
-    @XmlAttribute(name = "id")
-    String year;
-
-    @XmlAttribute(name = "title")
-    String title;
-}
Index: src/main/java/com/antonromanov/arnote/enums/ArnoteOperation.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/ArnoteOperation.java b/src/main/java/com/antonromanov/arnote/enums/ArnoteOperation.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/ArnoteOperation.java	
+++ /dev/null	
@@ -1,8 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.service.MainService;
-
-public interface ArnoteOperation {
-     Wish move(Wish wish, MainService ms);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/InvestingFilterMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/InvestingFilterMode.java b/src/main/java/com/antonromanov/arnote/model/investing/InvestingFilterMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/InvestingFilterMode.java	
+++ /dev/null	
@@ -1,26 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-import com.antonromanov.arnote.model.investing.response.BondRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-import java.util.function.Predicate;
-
-/**
- * Режим фильтрации для инвест-части.
- */
-@AllArgsConstructor
-@Getter
-public enum InvestingFilterMode {
-    TYPE_SHARE("Акции", s->BondType.valueOf(s.getType())==BondType.SHARE, "type"),
-    TYPE_BOND("Облигации", s->BondType.valueOf(s.getType())==BondType.BOND, "type"),
-    TYPE_ETF("ETF", s->BondType.valueOf(s.getType())==BondType.INDEX, "type"),
-    STATUS_PLAN("План", s->!s.getIsBought(), "status"),
-    STATUS_FACT("Факт", BondRs::getIsBought, "status"),
-    NONE("Без сортировки", null, null);
-
-    private final String description;
-    private final Predicate<BondRs> filter;
-    private final String key; // ключ для мапы - показывает по какому столбцу делаем фильтрацию.
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/Schemas.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/Schemas.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/Schemas.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/Schemas.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Типы схем у API
- */
-
-@Getter
-@AllArgsConstructor
-public enum Schemas {
-    HTTP("http"),
-    HTTPS("https");
-
-    private final String schema;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/BoardsColumns.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/BoardsColumns.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/BoardsColumns.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/BoardsColumns.java	
+++ /dev/null	
@@ -1,13 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.enums;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.UrlQueryParameters;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-@AllArgsConstructor
-@Getter
-public enum BoardsColumns implements UrlQueryParameters {
-    SECID("secid"), BOARDID("boardid"), IS_PRIMARY("is_primary");
-
-    private final String code;
-}
Index: src/main/java/com/antonromanov/arnote/email/EmailStatus.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/email/EmailStatus.java b/src/main/java/com/antonromanov/arnote/email/EmailStatus.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/email/EmailStatus.java	
+++ /dev/null	
@@ -1,60 +0,0 @@
-package com.antonromanov.arnote.email;
-
-public class EmailStatus {
-
-	public static final String SUCCESS = "SUCCESS";
-	public static final String ERROR = "ERROR";
-
-	private final String to;
-	private final String subject;
-	private final String body;
-
-	private String status;
-	private String errorMessage;
-
-	public EmailStatus(String to, String subject, String body) {
-		this.to = to;
-		this.subject = subject;
-		this.body = body;
-	}
-
-	public EmailStatus success() {
-		this.status = SUCCESS;
-		return this;
-	}
-
-	public EmailStatus error(String errorMessage) {
-		this.status = ERROR;
-		this.errorMessage = errorMessage;
-		return this;
-	}
-
-	public boolean isSuccess() {
-		return SUCCESS.equals(this.status);
-	}
-
-	public boolean isError() {
-		return ERROR.equals(this.status);
-	}
-
-	public String getTo() {
-		return to;
-	}
-
-	public String getSubject() {
-		return subject;
-	}
-
-	public String getBody() {
-		return body;
-	}
-
-	public String getStatus() {
-		return status;
-	}
-
-	public String getErrorMessage() {
-		return errorMessage;
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/DividendRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/DividendRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/DividendRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/DividendRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-@Data
-@AllArgsConstructor
-@Builder
-public class DividendRs {
-    private final String registryCloseDate; // дата закрытия регистра
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double value; // цена, размер дивиденда
-    private final Currencies currencyId; // валюта
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/WishDTO.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/WishDTO.java b/src/main/java/com/antonromanov/arnote/model/wish/WishDTO.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/WishDTO.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.Builder;
-import lombok.Getter;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-@Builder
-public class WishDTO {
-
-    private long id;
-    @Getter
-    private String wish;
-    @Getter
-    private Integer price;
-    private Integer priority;
-    private Boolean ac;
-    private String description;
-    private String url;
-    private Integer priorityGroup;
-    private Integer priorityGroupOrder;
-    private String month;
-
-}
-
Index: src/main/java/com/antonromanov/arnote/model/wish/enums/DeltaMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/enums/DeltaMode.java b/src/main/java/com/antonromanov/arnote/model/wish/enums/DeltaMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/enums/DeltaMode.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.wish.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Режимы дельты. Варианта два:
- *
- * 1) tinkoffDelta = (сумма покупок * текущую цену рынка) - (Сумма(лот * цену по каждой покупке))
- * 2) candleDayDelta = (цена текущая - цена закрытия вчера) * кол-во акций в портфеле
- *
- */
-@AllArgsConstructor
-@Getter
-public enum DeltaMode {
-    TINKOFF_DELTA, CANDLE_DELTA;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchListRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchListRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchListRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchListRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import java.util.List;
-
-/**
- * Ответ сервиса Alphavantage по поиску бумаги.
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class AlphavantageSearchListRs {
-    private List<AlphavantageSearchRs> bestMatches;
-}
Index: src/main/java/com/antonromanov/arnote/enums/FilterMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/FilterMode.java b/src/main/java/com/antonromanov/arnote/enums/FilterMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/FilterMode.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import com.antonromanov.arnote.entity.Wish;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.function.Predicate;
-
-/**
- * Типы фильтрации.
- */
-@AllArgsConstructor
-@Getter
-public enum FilterMode {
-    ALL(wish -> wish.getWish()!=null),
-    PRIORITY(w->w.getPriority()==1),
-    DEFAULT(null);
-
-    private final Predicate<Wish> filterPredicate;
-}
-
Index: src/main/java/com/antonromanov/arnote/services/FinPlanServiceImp.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/FinPlanServiceImp.java b/src/main/java/com/antonromanov/arnote/services/FinPlanServiceImp.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/FinPlanServiceImp.java	
+++ /dev/null	
@@ -1,1535 +0,0 @@
-package com.antonromanov.arnote.services;
-
-import com.antonromanov.arnote.dto.rq.*;
-import com.antonromanov.arnote.dto.rs.*;
-import com.antonromanov.arnote.dto.transfer.CalculatedLoansTableTr;
-import com.antonromanov.arnote.dto.transfer.ClosedLoanTr;
-import com.antonromanov.arnote.dto.transfer.LoanListTr;
-import com.antonromanov.arnote.dto.transfer.LoanTr;
-import com.antonromanov.arnote.entity.common.Salary;
-import com.antonromanov.arnote.entity.finplan.Credit;
-import com.antonromanov.arnote.entity.finplan.Freeze;
-import com.antonromanov.arnote.entity.finplan.Goal;
-import com.antonromanov.arnote.entity.finplan.Income;
-import com.antonromanov.arnote.exceptions.AddNewCreditException;
-import com.antonromanov.arnote.exceptions.FinPlanningException;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.exceptions.enums.ErrorCodes;
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.repositoty.*;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang3.StringUtils;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.beans.factory.config.ConfigurableBeanFactory;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Service;
-import java.security.Principal;
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.ZoneId;
-import java.util.*;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-import java.util.stream.Stream;
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-
-
-@Service
-@Slf4j
-@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
-public class FinPlanServiceImp implements FinPlanService { //todo: класс больше 1000 строк! Разделить!
-
-    @Autowired
-    private CreditRepository creditRepo;
-
-    @Autowired
-    private UsersRepo users;
-
-    @Autowired
-    private GoalsRepo purchaseRepo;
-
-    @Autowired
-    private SalaryRepository salaryRepo;
-
-    @Autowired
-    private IncomeRepo incomeRepo;
-
-    @Autowired
-    private FreezeRepo freezeRepo;
-
-
-    @Value("${finplan.start.month}")
-    private Integer startMonth; // месяц с которого начинаем отсчет
-
-    @Value("${finplan.start.year}")
-    private Integer startYear; // год с которого начинаем отсчет
-
-    @Value("${finplan.final.year}")
-    private Integer finalYear; // + кол-во лет по которым считаем верхнюю границу диапазона отображаемого в консолидированной таблице
-
-    AtomicInteger atomicInt = new AtomicInteger(0);
-
-
-    // =================== БАЗОВЫЕ ГЛОБАЛЬНЫЕ КОНСТАНТЫ ======================
-    private int curYear; // текущий год
-    LinkedHashMap<LocalDate, FinalBalanceCalculationsRs> globalBalanceMap = new LinkedHashMap<>(); // глобальная мапа остатков
-    LinkedHashMap<Long, ClosedLoanTr> globalMapOfClosedLoans = new LinkedHashMap<>(); // глобальная мапа выплаченых кредитов
-    List<Goal> globalGoalList = new ArrayList<>(); // глобальная мапа расходов
-    FinPlanListRs globalConsolidatedTable; // глобальная консолидированная мапа чтобы каждый раз не ходить в БД
-    // =================== ============================ ======================
-
-
-    /**
-     * Подготовить диапазон лет по которым ходим в цикле для заполнения массивов.
-     *
-     * @param yearsCount - количество лет.
-     * @return коллекция с Integer
-     */
-    public List<Integer> getYearsRange(int yearsCount) {
-        return IntStream.rangeClosed(1, yearsCount)
-                .boxed()
-                .collect(Collectors.toList());
-    }
-
-
-    /**
-     * Запросить консолидированную таблицу из кэша.
-     *
-     * @param principal - юзер.
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public FinPlanListRs getFinPlanTableFromCache(Principal principal) throws UserNotFoundException {
-        if (globalConsolidatedTable == null) {
-            return getFinPlanTableFromDb(principal);
-        } else {
-            return globalConsolidatedTable;
-        }
-    }
-
-    /**
-     * Подсчитать кол-во лет для циклинга по годам.
-     *
-     * @return
-     */
-    private int calculateYearsCount(ArNoteUser arNoteUser) {
-        curYear = Calendar.getInstance().get(Calendar.YEAR);
-        return (startYear == null || startYear < 2000) ?
-                curYear - 2019 + 1 :
-                (getFinalYear(arNoteUser)) - startYear + 1;
-    }
-
-    /**
-     * Запросить консолидированную таблицу из БД.
-     *
-     * @param principal - юзер.
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public FinPlanListRs getFinPlanTableFromDb(Principal principal) throws UserNotFoundException {
-        log.info("[SRV] Gettin Consolidated Table From DB...");
-        curYear = Calendar.getInstance().get(Calendar.YEAR);
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        globalGoalList = purchaseRepo.findAllByUser(arNoteUser);
-        int finalCalculatedYear = getFinalYear(arNoteUser);
-        log.info("[SRV] Calculate Loans Table...");
-        CalculatedLoansTableTr calculatedLoansTable = getCalculatedLoansTable(getAllCredits(arNoteUser)); // todo: ** 1 **
-        log.info("[SRV] Calculate Loans Table - DONE");
-        int yearsCount = calculateYearsCount(arNoteUser);
-        if (startMonth == null || startMonth < 1 || startMonth > 12 || yearsCount == 1) {
-            startMonth = 1;
-        }
-
-        List<FinPlanRs> finalList = new ArrayList<>();
-        calculateFullRemains(arNoteUser, startMonth, yearsCount, finalCalculatedYear, calculatedLoansTable); // todo: ** 2 ( => 1) **
-        log.info("[SRV] Calculate Full Remains Table - DONE");
-        getYearsRange(yearsCount).forEach(y -> {
-
-            int startPoint = 1;
-            if (y == 1) {
-                startPoint = startMonth;
-            }
-            for (int currMonth = startPoint; currMonth <= 12; currMonth++) {
-                int localYear = (finalCalculatedYear) - yearsCount + y;
-                CreditListRs credits = getCreditsFiltered(calculatedLoansTable.getCalculatedLoansList(), localYear, currMonth);
-                finalList.add(FinPlanRs.builder()
-                        .month(getMonthByNumber(currMonth))
-                        .monthNumber(currMonth)
-                        .year(localYear)
-                        .credits(credits)
-                        .allCredits(credits.getCredits().stream().map(CreditRs::getAmount).reduce(Integer::sum).orElse(0))
-                        .purchasePlan(getPurchasePlan(localYear, currMonth))
-                        .remains(prepareFinalBalance(localYear, currMonth))
-                        .freeze(isThisFreeze(localYear, currMonth, arNoteUser))
-                        .color(getRowBackGroundColor(localYear, currMonth))
-                        .fontColor(getFontColor(localYear, currMonth, getPurchasePlan(localYear, currMonth)
-                                .getPurchasePlan()
-                                .stream()
-                                .anyMatch(p -> p.getLoanId() != null)))
-                        .borderWidth(currMonth==12? "3px double #8B0000" : "1px solid grey")
-                        .build());
-            }
-            log.info("Year {} ", (finalCalculatedYear) - yearsCount + y);
-        });
-        globalConsolidatedTable = FinPlanListRs.builder().finPlans(finalList).build();
-        return globalConsolidatedTable;
-    }
-
-    /**
-     * Рассчитать цвет шрифта.
-     *
-     * @param currentYear
-     * @param currMonth
-     * @param isRepayment
-     * @return
-     */
-    private String getFontColor(int currentYear, int currMonth, boolean isRepayment) {
-        if (isRepayment) {
-            return "#7b10b1";
-        } else {
-            if (LocalDate.now().withDayOfMonth(1).isAfter(LocalDate.of(currentYear, currMonth, 1))) { // дата обрабатываемого месяца раньше чем текущая
-                return "#b0bbb0";
-            } else if (LocalDate.now().withDayOfMonth(1).isBefore(LocalDate.of(currentYear, currMonth, 1))) { // дата обрабатываемого месяца позже чем текущая
-                return "#020008";
-            } else { // даты равны
-                return "#020008";
-            }
-        }
-    }
-
-    /**
-     * Определить цвет ряда.
-     *
-     * @param currentYear
-     * @param currMonth
-     * @return
-     */
-    private String getRowBackGroundColor(int currentYear, int currMonth) {
-        if (LocalDate.now().withDayOfMonth(1).isAfter(LocalDate.of(currentYear, currMonth, 1))) { // дата обрабатываемого месяца раньше чем текущая
-            return "#6c796c";
-        } else if (LocalDate.now().withDayOfMonth(1).isBefore(LocalDate.of(currentYear, currMonth, 1))) { // дата обрабатываемого месяца позже чем текущая
-            return "#9abacd";
-        } else { // даты равны
-            return "#f5e7c8";
-        }
-    }
-
-    private Integer prepareFinalBalance(int year, int month) {
-        if (!globalBalanceMap.isEmpty()) {
-            return globalBalanceMap.entrySet().stream()
-                    .filter(v -> v.getKey().getYear() == year && v.getKey().getMonthValue() == month)
-                    .findFirst()
-                    .map(Map.Entry::getValue)
-                    .map(FinalBalanceCalculationsRs::getBalance)
-                    .orElse(0);
-        } else {
-            return 0;
-        }
-    }
-
-    private Boolean isThisFreeze(int year, int month, ArNoteUser user) {
-        return (freezeRepo.findFreezeByUserAndMonthAndYear(user, year, month)).isPresent();
-    }
-
-    /**
-     * Достать все кредиты
-     *
-     * @return
-     */
-    private List<Credit> getAllCredits(ArNoteUser user) {
-        return creditRepo.getCreditsByUser(user);
-    }
-
-    /**
-     * Высчитываем верхнюю границу периода (год) отображения консолидированной таблицы.
-     *
-     * @return
-     */
-    private Integer getFinalYear(ArNoteUser user) {
-        Integer yearFromApplicationProperties = curYear + finalYear;
-        if (getLastCreditDate(getAllCredits(user)).isPresent()) {
-            LocalDate creditDate = getLastCreditDate(getAllCredits(user)).get();
-            LocalDate lastGoalsDate = getLastGoalsDate(globalGoalList);
-            return Stream.of(creditDate.getYear(), lastGoalsDate.getYear(), yearFromApplicationProperties)
-                    .max(Integer::compareTo)
-                    .orElse(yearFromApplicationProperties);
-        } else {
-            return yearFromApplicationProperties;
-        }
-    }
-
-
-    /**
-     * Отфильтровать список фризов по году и месяцу.
-     *
-     * @param year
-     * @param month
-     * @return
-     */
-    private Optional<Freeze> filterFreezeListByDate(List<Freeze> allFreezesByUser, int year, int month) {
-        return allFreezesByUser.stream().filter(e -> dateToLocalDate(e.getStartDate()).withDayOfMonth(1)
-                .isEqual(LocalDate.of(year, month, 1))).findFirst();
-    }
-
-
-    /**
-     * Считаем остаток по счетам. Расклад по всем месяцам. Заполняем глобальную мапу приходов.
-     *
-     * @param user                - пользак.
-     * @param startMonth          - начальный месяц (из конфигов).
-     * @param yearsCount
-     * @param finalCalculatedYear
-     * @throws UserNotFoundException
-     */
-    private void calculateFullRemains(ArNoteUser user, int startMonth, int yearsCount, int finalCalculatedYear,
-                                      CalculatedLoansTableTr calculatedLoansTable) {
-
-        globalBalanceMap.clear();
-        List<Income> allIncomesByUser = incomeRepo.findAllByUserOrderByIncomeDateAsc(user); // все доходы юзера
-        List<Salary> salaryListByUser = salaryRepo.getLastSalaryListByUserDesc(user);
-        List<Freeze> allFreezesByUser = freezeRepo.findAllByUser(user);
-        getYearsRange(yearsCount).forEach(y -> {
-
-            int startPoint = 1;
-            if (y == 1) {
-                startPoint = startMonth;
-            }
-
-            for (int currMonth = startPoint; currMonth <= 12; currMonth++) {
-                Optional<Salary> currentSalaryByDate = getClosestSalary(salaryListByUser, (finalCalculatedYear - yearsCount + y), currMonth);
-                int monthlySpending = (currentSalaryByDate)
-                        .map(Salary::getLivingExpenses)
-                        .orElse(0); // средние ежемесячные расходы
-
-                int finalCurrMonth = currMonth;
-                Optional<Freeze> currentFreeze = filterFreezeListByDate(allFreezesByUser, (finalCalculatedYear - yearsCount + y),
-                        currMonth);
-
-                List<Income> incomesForCurrentDate = allIncomesByUser.stream()
-                        .filter(i -> dateToLocalDate(i.getIncomeDate()).getYear() == (finalCalculatedYear - yearsCount + y)) // фильтруем по году
-                        .filter(i -> dateToLocalDate(i.getIncomeDate()).getMonthValue() == finalCurrMonth)
-                        .collect(Collectors.toList());
-                int currentIncome = incomesForCurrentDate
-                        .stream()
-                        .findFirst()
-                        .map(Income::getIncome)
-                        .orElse(0);
-
-                Integer prevIncome = getPreviousIncome(currMonth, (finalCalculatedYear - yearsCount + y));
-                Integer prevExpense = getPreviousExpense(currMonth, (finalCalculatedYear - yearsCount + y));
-                Integer loanPaymentsByDate = getLoanPaymentsByDate(calculatedLoansTable.getCalculatedLoansList(),
-                        currMonth, (finalCalculatedYear - yearsCount + y));
-
-                int calculatedRemains = prevIncome - // предыдущий доход
-                        prevExpense - // минус предыдущий расход
-                        monthlySpending - // минус среднемесячный расход
-                        loanPaymentsByDate + // минус покрытие кредитов
-                        currentIncome + // + ежемесячный доход
-                        currentSalaryByDate.map(Salary::getFullSalary).orElse(0); // + зарплата
-
-                if (globalBalanceMap.isEmpty()) {
-                    globalBalanceMap.put(LocalDate.of((finalCalculatedYear - yearsCount + y), currMonth, 1),
-                            FinalBalanceCalculationsRs.builder()
-                                    .balance(currentFreeze.map(Freeze::getAmount).orElse(calculatedRemains))
-                                    .currentIncome(currentIncome + currentSalaryByDate.map(Salary::getFullSalary).orElse(0))
-                                    .loanPayments(loanPaymentsByDate)
-                                    .monthlySpending(monthlySpending)
-                                    .currentIncomeDetail(CurrentIncomeRs.builder()
-                                            .salary(currentSalaryByDate.map(Salary::getFullSalary).orElse(0))
-                                            .incomeList(incomesForCurrentDate.stream().map(i -> IncomeRs.builder()
-                                                    .id(i.getId())
-                                                    .incomeDate(i.getIncomeDate())
-                                                    .incomeDescription(i.getDescription())
-                                                    .amount(i.getIncome())
-                                                    .isBonus(i.getIsBonus())
-                                                    .build())
-                                                    .collect(Collectors.toList()))
-                                            .build())
-                                    .previousExpense(prevExpense)
-                                    .previousIncome(prevIncome)
-                                    .build());
-                } else {
-                    globalBalanceMap.put(LocalDate.of((finalCalculatedYear - yearsCount + y), currMonth, 1),
-                            FinalBalanceCalculationsRs.builder()
-                                    .balance(currentFreeze.map(Freeze::getAmount).orElse(calculatedRemains))
-                                    .currentIncomeDetail(CurrentIncomeRs.builder()
-                                            .salary(currentSalaryByDate.map(Salary::getFullSalary).orElse(0))
-                                            .incomeList(incomesForCurrentDate.stream().map(i -> IncomeRs.builder()
-                                                    .id(i.getId())
-                                                    .incomeDate(i.getIncomeDate())
-                                                    .incomeDescription(i.getDescription())
-                                                    .isBonus(i.getIsBonus())
-                                                    .amount(i.getIncome())
-                                                    .build())
-                                                    .collect(Collectors.toList()))
-                                            .build())
-                                    .currentIncome(currentIncome + currentSalaryByDate.map(Salary::getFullSalary).orElse(0))
-                                    .loanPayments(loanPaymentsByDate)
-                                    .monthlySpending(monthlySpending)
-                                    .previousExpense(prevExpense)
-                                    .previousIncome(prevIncome)
-                                    .build());
-                }
-            }
-        });
-    }
-
-    /**
-     * Платежи по кредитам по состоянию на конкретную дату.
-     *
-     * @param curMonth
-     * @param curYear
-     * @return
-     */
-    private Integer getLoanPaymentsByDate(List<LinkedHashMap<LocalDate, LoanListTr>> calculatedLoansList, int curMonth,
-                                          int curYear) {
-
-        List<Integer> resultSum = new ArrayList<>();
-
-        for (LinkedHashMap<LocalDate, LoanListTr> map : calculatedLoansList) {
-
-            Optional<LoanListTr> loan = map.entrySet().stream()
-                    .filter(d -> d.getKey().getYear() == curYear && d.getKey().getMonthValue() == curMonth)
-                    .map(Map.Entry::getValue)
-                    .findFirst();
-
-            loan.ifPresent(loanListTr -> resultSum.add(loanListTr.getLoanList().stream().map(v -> creditRepo.findById(v.getLoanId())
-                    .orElseThrow(RuntimeException::new))
-                    .map(Credit::getFullPayPerMonth)
-                    .reduce(Integer::sum).orElse(0)));
-        }
-
-        return resultSum.stream().reduce(Integer::sum).orElse(0);
-
-    }
-
-    /**
-     * Вытаскиваем предыдущий приход из мапы приходов.
-     *
-     * @param curMonth - текущий месяц относительного которого происходит запрос
-     * @param curYear  - текущий год относительного которого происходит запрос
-     * @return
-     */
-    private Integer getPreviousIncome(int curMonth, int curYear) {
-
-        int calculatedMonth = LocalDate.of(curYear, curMonth, 1).minusMonths(1).getMonthValue();
-        int calculatedYear = LocalDate.of(curYear, curMonth, 1).minusMonths(1).getYear();
-        return globalBalanceMap.entrySet().stream()
-                .filter(ld -> ld.getKey().getYear() == calculatedYear && ld.getKey().getMonthValue() == calculatedMonth)
-                .map(Map.Entry::getValue)
-                .findFirst()
-                .map(FinalBalanceCalculationsRs::getBalance)
-                .orElse(0);
-    }
-
-    /**
-     * Вытаскиваем предыдущую цель / фин-план / расход  из соответствующего хранилища.
-     *
-     * @param curMonth - текущий месяц относительного которого происходит запрос
-     * @param curYear  - текущий год относительного которого происходит запрос
-     * @return
-     */
-    private Integer getPreviousExpense(int curMonth, int curYear) {
-        int calculatedMonth = LocalDate.of(curYear, curMonth, 1).minusMonths(1).getMonthValue();
-        int calculatedYear = LocalDate.of(curYear, curMonth, 1).minusMonths(1).getYear();
-        return globalGoalList.stream()
-                .filter(g -> dateToLocalDate(g.getStartDate()).getYear() == calculatedYear &&
-                        dateToLocalDate(g.getStartDate()).getMonthValue() == calculatedMonth)
-                .map(Goal::getPrice)
-                .reduce(Integer::sum)
-                .orElse(0);
-    }
-
-    /**
-     * Вытаскиваем приход из Зарплаты.
-     *
-     * @param year      - год
-     * @param currMonth - месяц
-     * @return
-     */
-    public Integer getDefaultIncomeFromSalary(int year, int currMonth, ArNoteUser user) {
-        List<Salary> salaryListByUser = salaryRepo.getLastSalaryListByUserDesc(user);
-        return salaryRepo.findAllByUserAndMonthAndYear(user, year, currMonth).stream()
-                .findFirst()
-                .map(Salary::getFullSalary)
-                .orElseGet(() -> getClosestSalary(salaryListByUser, year, currMonth)
-                        .map(Salary::getFullSalary)
-                        .orElseThrow(FinPlanningException::new));
-    }
-
-    /**
-     * Список в NavigableSet.
-     *
-     * @param list
-     * @param <T>
-     * @return
-     */
-    public static <T> NavigableSet<T> convertToSet(List<T> list) {
-        return new TreeSet<>(list);
-    }
-
-    /**
-     * Получить ближайшую к дате ЗП по пользователю.
-     *
-     * @param year-     год.
-     * @param currMonth - месяц.
-     * @param
-     * @return
-     */
-    public Optional<Salary> getClosestSalary(List<Salary> salaryListByUser, int year, int currMonth) { //todo: СРОЧНО ПЕРЕПИСАТЬ!
-
-        LocalDateTime resultTime;
-
-        if (salaryListByUser.size() > 0) {
-            try {
-
-                LocalDateTime minTimeStamp = salaryListByUser.stream()
-                        .min(Comparator.comparing(Salary::getSalaryTimeStamp))
-                        .map(Salary::getSalaryTimeStamp)
-                        .orElseThrow(FinPlanningException::new);
-
-                NavigableSet<LocalDateTime> dates = convertToSet(salaryListByUser.stream()
-                        .map(Salary::getSalaryTimeStamp).collect(Collectors.toList()));
-
-                if ((LocalDateTime.of(year, currMonth, 1, 0, 0)).isBefore(minTimeStamp)) {
-                    resultTime = dates.ceiling(LocalDateTime.of(year, currMonth, 1, 0, 0));
-                } else {
-                    resultTime = dates.floor(LocalDateTime.of(year, currMonth, 1, 0, 0));
-                }
-
-                if (resultTime == null) {
-                    return Optional.empty();
-                }
-                return salaryListByUser.stream()
-                        .filter(v -> v.getSalaryTimeStamp().isEqual(resultTime))
-                        .findFirst();
-
-            } catch (Exception e) {
-                return Optional.empty();
-            }
-        } else {
-            return Optional.empty();
-        }
-    }
-
-
-    /**
-     * Формируем покупки по месяцу.
-     *
-     * @param year
-     * @param month
-     * @return
-     */
-    private ConsolidatedPurchasesRs getPurchasePlan(int year, int month) {
-        List<PurchasesRs> purchaseList = globalGoalList.stream()
-                .filter(p -> ((dateToLocalDate(p.getStartDate()))
-                        .getMonthValue() == month && dateToLocalDate(p.getStartDate()).getYear() == year))
-                .map(t -> PurchasesRs.builder()
-                        .description(t.getDescription())
-                        .price(t.getPrice())
-                        .id(t.getId())
-                        .loanId(t.getRepayment())
-                        .startDate(t.getStartDate())
-                        .build())
-                .collect(Collectors.toList());
-
-        String longDescription = purchaseList.stream()
-                .filter(Objects::nonNull)
-                .map(PurchasesRs::getDescription)
-                .collect(Collectors.joining(", "));
-
-        int goalsCount = purchaseList.size();
-
-        String shortDescription = StringUtils.left(purchaseList.stream()
-                .filter(Objects::nonNull)
-                .map(PurchasesRs::getDescription)
-                .filter(StringUtils::isNoneBlank)
-                .map(s -> s.substring(0, (s.length() <= 20 / goalsCount ? s.length() : 20 / goalsCount - 1)) + ".")
-                .collect(Collectors.joining(",")), 20) + "...";
-
-        Integer price = purchaseList.stream()
-                .map(PurchasesRs::getPrice)
-                .reduce(Integer::sum).orElse(0);
-
-        return ConsolidatedPurchasesRs.builder()
-                .longDescription(longDescription)
-                .price(price)
-                .shortDescription(shortDescription)
-                .purchasePlan(purchaseList)
-                .build();
-    }
-
-    /**
-     * Перевести Дату в LocalDate.
-     *
-     * @param entityDate
-     * @return
-     */
-    private LocalDate dateToLocalDate(Date entityDate) { // todo: в утилс
-        return new Date(entityDate
-                .getTime())
-                .toInstant()
-                .atZone(ZoneId.systemDefault())
-                .toLocalDate();
-    }
-
-
-    /**
-     * Посчитать дату выплаты самого последнего кредита.
-     *
-     * @param
-     * @param credits
-     * @return
-     */
-    public Optional<LocalDate> getLastCreditDate(List<Credit> credits) {
-        try {
-            return getCalculatedLoansTable(credits).getCalculatedLoansList().stream()
-                    .map(v -> v.entrySet().stream()
-                            .max(Map.Entry.comparingByKey())
-                            // .map(r->r.getKey())).max(rr->rr.m)
-                            .orElseThrow(FinPlanningException::new)
-                            .getKey())
-                    .max(LocalDate::compareTo);
-        } catch (RuntimeException e) {
-            return Optional.empty();
-        }
-    }
-
-    /**
-     * Посчитать последнюю дату запланированных покупок.
-     *
-     * @param
-     * @param goalList - список планов
-     * @return
-     */
-    public LocalDate getLastGoalsDate(List<Goal> goalList) {
-        return goalList.stream()
-                .max(Comparator.comparing(Goal::getStartDate))
-                .map(Goal::getStartDate)
-                .map(this::dateToLocalDate)
-                .orElse(LocalDate.now());
-    }
-
-
-    /**
-     * Получить и рассчитать текущие кредиты.
-     *
-     * @param
-     * @param credits
-     * @return
-     */
-    public CalculatedLoansTableTr getCalculatedLoansTable(List<Credit> credits) {
-
-        List<LinkedHashMap<LocalDate, LoanListTr>> resultList = new LinkedList<>(); // конечный ответ: список мап. Каждая мапа дата + данные по кредиту
-        LinkedHashMap<LocalDate, LoanListTr> payMap = new LinkedHashMap<>(); // сама мапа - дата + данные по кредиту.
-
-        /**
-         * Бегаем по всем переданным кредитам.
-         */
-        credits.forEach(credit -> {
-            LocalDate creditDate = new Date(credit.getStartDate()
-                    .getTime())
-                    .toInstant()
-                    .atZone(ZoneId.systemDefault())
-                    .toLocalDate(); // тащим стартовую дату кредита и конвертим в LocalDate
-
-            int paySum = credit.getStartAmount(); // сколько еще денег осталось платить
-
-            int currentMonth = 0;
-            while (paySum > 0) {
-                paySum = paySum - credit.getRealPayPerMonth();
-                LocalDate paymentDate = creditDate.withDayOfMonth(1).plusMonths(currentMonth);
-
-                /**
-                 * Ищем досрочные "погашалки" кредита
-                 */
-                Map<Long, Map<LocalDate, Integer>> creditWithRepaymentMap =
-                        globalGoalList
-                                .stream()
-                                .filter(r -> r.getRepayment() != null &&
-                                        dateToLocalDate(r.getStartDate()).getYear() == paymentDate.getYear() &&
-                                        dateToLocalDate(r.getStartDate()).getMonthValue() == paymentDate.getMonthValue()
-                                )
-                                .map(c -> {
-                                            Map<Long, Map<LocalDate, Integer>> repaymentMap = new HashMap<>();
-                                            Map<LocalDate, Integer> dateAndRepayment = new HashMap<>();
-                                            dateAndRepayment.put(dateToLocalDate(c.getStartDate()), c.getPrice());
-                                            repaymentMap.put(c.getRepayment(), dateAndRepayment);
-                                            return repaymentMap;
-                                        }
-                                ).flatMap(m -> m.entrySet().stream())
-                                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (v1, v2) -> v1));
-
-                if (!creditWithRepaymentMap.isEmpty()) {
-                    Integer repaymentByDateAndLoanId = creditWithRepaymentMap.entrySet().stream()
-                            .filter(z -> creditRepo
-                                    .findById(z.getKey())
-                                    .orElseThrow(FinPlanningException::new) != null &&
-                                    credit.getId().equals(z.getKey()))
-
-                            .findFirst()
-                            .map(Map.Entry::getValue)
-                            .map(b -> {
-
-                                LocalDate tempDate = b.entrySet().stream().findFirst()
-                                        .orElseThrow(FinPlanningException::new).getKey();
-                                Integer repayment = b.entrySet().stream().findFirst()
-                                        .orElseThrow(FinPlanningException::new).getValue();
-
-                                return tempDate.getYear() == paymentDate.getYear() &&
-                                        tempDate.getMonthValue() == paymentDate.getMonthValue() ? repayment : 0;
-
-                            })
-                            //.reduce(Integer::sum)
-                            .orElse(0);
-                    paySum = paySum - repaymentByDateAndLoanId;
-                }
-
-                if (paySum < 0) {
-                    paySum = 0;
-                }
-
-                if (paySum == 0) {
-                    globalMapOfClosedLoans.put(credit.getId(), ClosedLoanTr.builder()
-                            .startDate(dateToLocalDate(credit.getStartDate()))
-                            .closeDate(paymentDate)
-                            .loanNumber(credit.getCreditNumber())
-                            .build());
-                }
-
-
-                if (payMap.entrySet().stream().anyMatch(r -> r.getKey().isEqual(paymentDate))) {
-
-                    LoanListTr localLoanList = payMap.entrySet().stream()
-                            .filter(r -> r.getKey().isEqual(paymentDate))
-                            .findFirst()
-                            .get() // todo: почему просто get? Без обработки! Переделать!
-                            .getValue();
-
-                    localLoanList.getLoanList().add(LoanTr.builder()
-                            .amount(paySum)
-                            .loanId(credit.getId())
-                            .build());
-
-                } else {
-
-                    payMap.put(paymentDate, LoanListTr.builder()
-                            .loanList(new ArrayList<>(Arrays.asList(LoanTr.builder()
-                                    .amount(paySum)
-                                    .loanId(credit.getId())
-                                    .build())))
-                            .build());
-                }
-
-                currentMonth++;
-
-                /*
-                 * Проверка, если кто-то запихнул какие-то запредельные значения, чтобы не попали в вечный цикл.
-                 */
-                if (currentMonth > 120) {
-                    paySum = 0;
-                }
-            }
-        });
-
-        resultList.add(payMap);
-        return CalculatedLoansTableTr.builder()
-                .calculatedLoansList(resultList)
-                .build();
-    }
-
-
-    /**
-     * Получить и рассчитать текущие кредиты отфильтрованные по текущей дате.
-     *
-     * @param
-     * @return
-     */
-    public CreditListRs getCreditsFiltered(List<LinkedHashMap<LocalDate, LoanListTr>> calculatedLoansList, Integer year, Integer month) {
-
-        List<CreditRs> creditList = calculatedLoansList.stream()
-                .map(pm -> filterMap(pm, year, month))
-                .findFirst()
-                .orElse(null);
-
-        return CreditListRs.builder()
-                .credit1(getCreditByNumber(creditList, 1))
-                .credit2(getCreditByNumber(creditList, 2))
-                .credit3(getCreditByNumber(creditList, 3))
-                .credit4(getCreditByNumber(creditList, 4))
-                .credit5(getCreditByNumber(creditList, 5))
-                .credits(creditList)
-                .build();
-    }
-
-    public Integer getCreditByNumber(List<CreditRs> lt, Integer nm) {
-        return lt != null ? listOfCreditsToMap(lt).get(CreditDict.getValByNumber(nm)) : null;
-    }
-
-    private Map<CreditDict, Integer> listOfCreditsToMap(List<CreditRs> creditList) {
-        Map<CreditDict, Integer> creditsMap = new HashMap<>();
-        creditList.forEach(v -> creditsMap.put(CreditDict.getValByNumber(v.getNumber()), v.getAmount()));
-        return creditsMap;
-    }
-
-    public List<CreditRs> filterMap(LinkedHashMap<LocalDate, LoanListTr> payMap, Integer year, Integer month) { //todo: переписать через стрим
-        List<CreditRs> credits = new ArrayList<>();
-        payMap.forEach((k, v) -> {
-            if (k.getYear() == year && k.getMonthValue() == month) {
-                for (LoanTr loan : v.getLoanList()) {
-                    Credit lnFound = creditRepo.findById(loan.getLoanId())
-                            .orElseThrow(FinPlanningException::new);
-
-                    credits.add(CreditRs.builder()
-                            .amount(loan.getAmount())
-                            .description(lnFound.getDescription())
-                            .id(loan.getLoanId())
-                            .number(lnFound.getCreditNumber())
-                            .realPayPerMonth(lnFound.getRealPayPerMonth())
-                            .fullPayPerMonth(lnFound.getFullPayPerMonth())
-                            .startDate(lnFound.getStartDate())
-                            .build());
-                }
-            }
-        });
-        return credits.stream()
-                .sorted(Comparator.comparing(CreditRs::getNumber))
-                .collect(Collectors.toList());
-    }
-
-    /**
-     * Проверяем, что можно добавить новый кредит и если можно - возвращаем новый номер.
-     * Если "-1" - значит какая-то ошибка или добавить нельзя.
-     *
-     * @return
-     */
-    public int checkForNewLoanAddingAndGetNewNumber(ArNoteUser arNoteUser, Date startDate) {
-        int savedLoanNumber;
-
-        try {
-            if (!getAllCredits(arNoteUser).isEmpty()) { // если кредиты вообще есть
-                if (getAllCredits(arNoteUser).stream() // берем все кредиты
-                        .max(Comparator.comparing(Credit::getCreditNumber)) // ищем тупо свободный слот вообще (данная ситуация возможна если добавлено мало кредитов - то есть на старте работы с приложением)
-                        .orElseThrow(FinPlanningException::new).getCreditNumber() >= 5) { // заняты все слоты ?
-
-                    Map<Long, ClosedLoanTr> closedLoansForNow = globalMapOfClosedLoans.entrySet().stream()
-                            .filter(r -> r.getValue().getCloseDate().withDayOfMonth(1).isBefore(
-                                    dateToLocalDate(startDate).withDayOfMonth(1)))
-                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)); // достаем уже закрытые кредиты
-
-                    if (closedLoansForNow.size() > 0) { // если нашли закрытые кредиты на момент startDate создаваемого кредита
-
-                        Map<Long, LocalDate> mapForSearchClosestDate = closedLoansForNow.entrySet().stream()
-                                .collect(Collectors.toMap(Map.Entry::getKey, v -> v.getValue().getCloseDate()));
-
-                        savedLoanNumber = closedLoansForNow.entrySet().stream() // берем ближайший из найденных
-                                .filter(q -> q.getKey().equals(getNearestDate(mapForSearchClosestDate, dateToLocalDate(startDate))))
-                                .map(w -> w.getValue().getLoanNumber()).findFirst().orElseThrow(RuntimeException::new);
-
-                        return savedLoanNumber;
-                    } else {
-                        throw new AddNewCreditException();
-                    }
-                } else {
-                    savedLoanNumber = getAllCredits(arNoteUser).stream()
-                            .max(Comparator.comparing(Credit::getCreditNumber))
-                            .map(Credit::getCreditNumber).orElse(0);
-
-                    return savedLoanNumber == 0 ? 1 : savedLoanNumber + 1;
-                }
-            } else {
-                return 1;
-            }
-        } catch (Exception e) {
-            return -1;
-        }
-    }
-
-
-    /**
-     * Добавить кредит.
-     *
-     * @param principal
-     * @param request
-     * @return
-     */
-    @Override
-    public AddCreditRs addCredit(Principal principal, CreditRq request) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        int nextLoanNumber;
-        if (request.getSlotNumber() == null) {
-            nextLoanNumber = checkForNewLoanAddingAndGetNewNumber(arNoteUser, request.getStartDate());
-        } else {
-            nextLoanNumber = request.getSlotNumber();
-        }
-
-        if (nextLoanNumber > 0) {
-            creditRepo.save(Credit.$toDbEntity(request, nextLoanNumber, arNoteUser));
-            return AddCreditRs.builder()
-                    .creditNumber(nextLoanNumber)
-                    .creditsCount(getAllCredits(arNoteUser).size())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } else {
-            return AddCreditRs.builder()
-                    .creditsCount(getAllCredits(arNoteUser).size())
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O4.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O4.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Удалить кредит.
-     *
-     * @param principal
-     * @param id
-     * @return
-     */
-    @Override
-    public AddCreditRs deleteLoan(Principal principal, Long id) {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Optional<Credit> loan = creditRepo.findCreditByUserAndId(arNoteUser, id);
-            if (loan.isPresent()) {
-                List<Goal> goalsList = purchaseRepo.findAllByRepaymentAndUser(loan.get().getId(), arNoteUser);
-                if (goalsList.size() > 0) {
-                    purchaseRepo.deleteInBatch(goalsList);
-                }
-            }
-            loan.ifPresent(creditRepo::delete);
-
-            return AddCreditRs.builder()
-                    .creditsCount(getAllCredits(arNoteUser).size())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } catch (Exception e) {
-            return AddCreditRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    @Override
-    public FullLoansListRs getFullLoansList(Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        return FullLoansListRs.builder()
-                .loansList(getAllCredits(arNoteUser).stream()
-                        .map(c -> FullLoanRs.builder()
-                                .id(c.getId())
-                                .description(c.getDescription())
-                                .fullPayPerMonth(c.getFullPayPerMonth())
-                                .realPayPerMonth(c.getRealPayPerMonth())
-                                .startDate(c.getStartDate())
-                                .startAmount(c.getStartAmount())
-                                .build())
-                        .collect(Collectors.toList()))
-                .build();
-    }
-
-    /**
-     * Редактировать кредит.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public AddCreditRs editLoan(CreditRq payload, Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        Optional<Credit> loan = creditRepo.findCreditByUserAndId(arNoteUser, payload.getId());
-        loan.ifPresent((a) -> creditRepo.save(Credit.$toDbEntityWithCheck(payload, a, arNoteUser)));
-        return AddCreditRs.builder()
-                .creditsCount(getAllCredits(arNoteUser).size())
-                .status(ResponseStatusRs.builder()
-                        .code(200)
-                        .status("SUCCESS")
-                        .build())
-                .build();
-    }
-
-    /**
-     * Добавить доход.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public SingleOperationRs addIncome(IncomeRq payload, Principal principal) throws UserNotFoundException {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Income newIncome = incomeRepo.saveAndFlush(Income.$toDbEntity(payload, arNoteUser));
-            return SingleOperationRs.builder()
-                    .id(newIncome.getId())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Удалить доход.
-     *
-     * @param principal - юзер
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public SingleOperationRs deleteIncome(Principal principal, IncomesForDeleteRq req) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        req.getIdList().forEach(t -> incomeRepo.findIncomeByUserAndId(arNoteUser, t.getId())
-                .ifPresent(income -> incomeRepo.delete(income)));
-
-        return SingleOperationRs.builder()
-                .status(ResponseStatusRs.builder()
-                        .code(200)
-                        .status("SUCCESS")
-                        .build())
-                .build();
-    }
-
-    /**
-     * Редактировать доход.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public SingleOperationRs editIncome(IncomeRq payload, Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        try {
-            int year = dateToLocalDate(payload.getIncomeDate()).getYear();
-            int month = dateToLocalDate(payload.getIncomeDate()).getMonthValue();
-            Optional<Income> existIncome = incomeRepo.findIncomeByUserAndMonthAndYear(arNoteUser, year, month).stream()
-                    .findFirst();
-            existIncome.ifPresent(income -> incomeRepo.save(Income.$toDbEntity(payload, arNoteUser)));
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Получить кредит по ID.
-     *
-     * @param id
-     * @param principal
-     * @return
-     */
-    @Override
-    public CreditRs getLoanById(Long id, Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        return creditRepo.findCreditByUserAndId(arNoteUser, id).map(v -> CreditRs.builder()
-                .id(v.getId())
-                .description(v.getDescription())
-                .amount(v.getStartAmount())
-                .number(v.getCreditNumber())
-                .startDate(v.getStartDate())
-                .fullPayPerMonth(v.getFullPayPerMonth())
-                .realPayPerMonth(v.getRealPayPerMonth())
-                .build())
-                .orElseThrow(FinPlanningException::new);
-    }
-
-    /**
-     * Получить детализированный расчет баланса за месяц.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public FinalBalanceCalculationsRs getRemainsDetailInfo(GetRemainsDetailInfoRq payload, Principal principal) throws UserNotFoundException {
-
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        if (globalBalanceMap.isEmpty()) {
-            curYear = Calendar.getInstance().get(Calendar.YEAR);
-            int finalCalculatedYear = getFinalYear(arNoteUser);
-            int yearsCount = calculateYearsCount(arNoteUser);
-
-            if (startMonth == null || startMonth < 1 || startMonth > 12 || yearsCount == 1) {
-                startMonth = 1;
-            }
-            CalculatedLoansTableTr calculatedLoansTable = getCalculatedLoansTable(getAllCredits(arNoteUser));
-            calculateFullRemains(arNoteUser, startMonth, yearsCount, finalCalculatedYear, calculatedLoansTable);
-        }
-
-        Optional<Freeze> currentFreeze = freezeRepo.findFreezeByUserAndMonthAndYear(arNoteUser, payload.getYear(), payload.getMonth());
-
-        if (globalBalanceMap.size() < 1) { // если пользак только начал и у него ничего не заполнено
-            return FinalBalanceCalculationsRs.builder()
-                    .currentIncomeDetail(CurrentIncomeRs.builder().build())
-                    .emptyCalculations(true)
-                    .date(payload.getYear() + " " + getMonthByNumber(payload.getMonth()))
-                    .dateInDateFormat(localDateToDate(LocalDate.of(payload.getYear(),
-                            payload.getMonth(),
-                            1)))
-                    .build();
-        } else {
-            return globalBalanceMap.entrySet().stream()
-                    .filter(v -> v.getKey().getYear() == payload.getYear() && v.getKey().getMonthValue() == payload.getMonth())
-                    .peek(t -> t.getValue().setDate(payload.getYear() + " " + getMonthByNumber(payload.getMonth())))
-                    .peek(d -> d.getValue().setDateInDateFormat(localDateToDate(LocalDate.of(payload.getYear(),
-                            payload.getMonth(),
-                            1))))
-                    .peek(f -> f.getValue().setFreeze(currentFreeze.isPresent()))
-                    .peek(f -> f.getValue().setEmptyCalculations(false))
-                    .findFirst()
-                    .map(Map.Entry::getValue)
-                    .orElse(FinalBalanceCalculationsRs.builder()
-                            .date(payload.getYear() + " " + getMonthByNumber(payload.getMonth()))
-                            .dateInDateFormat(localDateToDate(LocalDate.of(payload.getYear(),
-                                    payload.getMonth(),
-                                    1)))
-                            .currentIncomeDetail(CurrentIncomeRs.builder().build())
-                            .emptyCalculations(true)
-                            .build());
-        }
-    }
-
-    @Override
-    public SingleOperationRs addGoal(GoalRq payload, Principal principal) throws UserNotFoundException {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Goal newGoal = purchaseRepo.saveAndFlush(Goal.$toDbEntity(payload, arNoteUser));
-            return SingleOperationRs.builder()
-                    .id(newGoal.getId())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Получить кредит по дате и пользаку.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     */
-    @Override
-    public FullLoansListRs getLoanByDate(LoanByDateRq payload, Principal principal) { // todo: еще раз - все ответы в перспективе заворачиваем в один враппер со статусом. Единая обработка хендлером по всему приложению
-        try {
-            return FullLoansListRs.builder()
-                    .loansList((globalConsolidatedTable.getFinPlans().stream()
-                            .filter(f -> f.getYear() == dateToLocalDate(payload.getStartDate()).getYear() &&
-                                    f.getMonthNumber() == dateToLocalDate(payload.getStartDate()).getMonthValue())
-                            .map(r -> r.getCredits().getCredits()).findFirst().get()).stream()//todo: поправить потом этот гет
-                            .map(FullLoanRs::$fromCredit)
-                            .collect(Collectors.toList()))
-                    .build();
-        } catch (Exception e) {
-            log.error("Произошла ошибка при получении кредитов по дате: {}", e.getMessage());
-            return FullLoansListRs.builder()
-                    .loansList(Collections.emptyList())
-                    .build();
-        }
-
-    }
-
-
-    /**
-     * Редактировать цель.
-     *
-     * @param payload
-     * @param principal
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public SingleOperationRs editGoal(GoalRq payload, Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        try {
-            Optional<Goal> existGoal = purchaseRepo.findGoalByIdAndUser(payload.getId(), arNoteUser);
-            existGoal.ifPresent(goal -> purchaseRepo.save(Goal.$toDbEntityWithCheck(payload, goal, arNoteUser)));
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    @Override
-    public AddCreditRs deleteGoal(Principal principal, Long id) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        Optional<Goal> loan = purchaseRepo.findGoalByIdAndUser(id, arNoteUser);
-        loan.ifPresent(purchaseRepo::delete);
-
-        return AddCreditRs.builder()
-                .creditsCount(getAllCredits(arNoteUser).size())
-                .status(ResponseStatusRs.builder()
-                        .code(200)
-                        .status("SUCCESS")
-                        .build())
-                .build();
-    }
-
-    /**
-     * Получить список зарплат по пользаку.
-     *
-     * @param principal
-     * @return
-     */
-    @Override
-    public SalaryListRs getSalariesList(Principal principal) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-
-        try {
-            return SalaryListRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .salariesList(salaryRepo.getLastSalaryListByUserDesc(arNoteUser).stream()
-                            .map(s -> SalaryRs.builder()
-                                    .fullSalary(s.getFullSalary())
-                                    .id(s.getId())
-                                    .livingExpenses(s.getLivingExpenses())
-                                    .residualSalary(s.getResidualSalary())
-                                    .salaryDate(localDateToDate(s.getSalaryTimeStamp().toLocalDate()))
-                                    .build())
-                            .collect(Collectors.toList()))
-                    .build();
-        } catch (Exception e) {
-            return SalaryListRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O2.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O2.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    @Override
-    public SingleOperationRs editSalary(Principal principal, SalaryRq payload) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        try {
-            Optional<Salary> existSalary = salaryRepo.findSalaryById(payload.getId());
-            existSalary.ifPresent(salary -> salaryRepo.save(Salary.$toDbEntityWithCheck(payload, salary, arNoteUser)));
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    @Override
-    public SingleOperationRs addSalary(Principal principal, SalaryRq payload) {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Salary newSalary = salaryRepo.saveAndFlush(Salary.$toDbEntity(payload, arNoteUser));
-            return SingleOperationRs.builder()
-                    .id(newSalary.getId())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Удалить ЗП по id.
-     *
-     * @param principal
-     * @param id
-     * @return
-     * @throws UserNotFoundException
-     */
-    @Override
-    public SingleOperationRs deleteSalary(Principal principal, Long id) {
-
-        try {
-            Optional<Salary> salary = salaryRepo.findSalaryById(id);
-            salary.ifPresent(salaryRepo::delete);
-
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Добавить фриз.
-     *
-     * @param principal
-     * @param request
-     * @return
-     */
-    @Override
-    public SingleOperationRs addFreeze(Principal principal, FreezeRq request) {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Optional<Freeze> currentFreeze = freezeRepo.findFreezeByUserAndMonthAndYear(arNoteUser, request.getYear(), request.getMonth());
-            if (currentFreeze.isPresent()) {
-                throw new RuntimeException(); //todo: а вообще тут надо пробросить свой эксепшн что типа такой фриз уже есть
-            }
-            Freeze newFreeze = freezeRepo.saveAndFlush(Freeze.$toDbEntity(request, arNoteUser));
-            return SingleOperationRs.builder()
-                    .id(newFreeze.getId())
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    @Override
-    public SingleOperationRs deleteFreeze(Principal principal, Long year, Long month) {
-        try {
-            ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-            Optional<Freeze> freeze = freezeRepo.findFreezeByUserAndMonthAndYear(arNoteUser, year.intValue(), month.intValue());
-            freeze.ifPresent(freezeRepo::delete);
-
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(200)
-                            .status("SUCCESS")
-                            .build())
-                    .build();
-        } catch (Exception e) {
-            return SingleOperationRs.builder()
-                    .status(ResponseStatusRs.builder()
-                            .code(ErrorCodes.ERR_O6.getDigitalCode())
-                            .status("FAIL")
-                            .description(ErrorCodes.ERR_O6.getDescription())
-                            .build())
-                    .build();
-        }
-    }
-
-    /**
-     * Получить свободные слоты по кредитам.
-     *
-     * @param principal
-     * @param payload
-     * @return
-     */
-    @Override
-    public FreeLoanSlotsRs getLoansSlots(Principal principal, LoanByDateRq payload) throws UserNotFoundException {
-        ArNoteUser arNoteUser = users.findByLogin(principal.getName()).orElseThrow(UserNotFoundException::new);
-        List<Credit> allCreditList = getAllCredits(arNoteUser);
-        if (!allCreditList.isEmpty()) { // если кредиты вообще есть
-
-            Credit loanWithMaxFreeSlot = allCreditList.stream() // берем все кредиты
-                    .max(Comparator.comparing(Credit::getCreditNumber)).orElse(Credit.builder()
-                            .creditNumber(5)
-                            .build()); // ищем тупо свободный слот вообще (данная ситуация возможна если добавлено мало кредитов - то есть на старте работы с приложением)
-
-            if (loanWithMaxFreeSlot.getCreditNumber() < 5) {
-                return FreeLoanSlotsRs.builder()
-                        .allLoansCount(getAllCredits(arNoteUser).size())
-                        .openSlots(Collections.singletonList(loanWithMaxFreeSlot.getCreditNumber()))
-                        .build();
-            }
-            if (globalMapOfClosedLoans.size() < 1) {
-                getCalculatedLoansTable(allCreditList);
-            }
-            if (globalMapOfClosedLoans.size() < 1) {
-                return FreeLoanSlotsRs.builder()
-                        .allLoansCount(getAllCredits(arNoteUser).size())
-                        .build();
-            }
-
-            /**
-             * Тут мы собрали просто все закрытые относительно заданной даты кредиты. Но может быть кейс, что до
-             * заданной даты кредит закончился и сразу после него стартанул другой. Поэтому сначала нам надо откинуть кредиты,
-             * которые закончились раньше заданной даты и сразу после них, опять же раньше заданной даты стартанули
-             * другие кредиты.
-             */
-
-            Map<Long, ClosedLoanTr> filteredMap = new HashMap<>();
-
-            for (Map.Entry<Long, ClosedLoanTr> item : globalMapOfClosedLoans.entrySet()) {
-                if (item.getValue().getCloseDate().withDayOfMonth(1).isBefore(
-                        dateToLocalDate(payload.getStartDate()).withDayOfMonth(1))) {
-                    /**
-                     * Если кредит закончился (выплачен) ранее запрашиваемой даты, ищем, нет ли другого кредита
-                     * начавшегося ранее запрашиваемой даты в этом же слоте.
-                     */
-                    List<Credit> creditsStartedAfterClosedForUserDate = allCreditList.stream()
-                            .filter(s -> s.getCreditNumber().equals(item.getValue().getLoanNumber())) // ищем в данном слоте
-                            .filter(l -> !l.getId().equals(item.getKey())) // откидываем данный кредит
-                            .filter(sd->dateToLocalDate(sd.getStartDate()).isAfter(item.getValue().getCloseDate()) &&
-                                    dateToLocalDate(sd.getStartDate())
-                                            .isBefore(dateToLocalDate(payload.getStartDate()).withDayOfMonth(1)))
-                            .collect(Collectors.toList());
-
-                    if (creditsStartedAfterClosedForUserDate.size()==0){
-                        filteredMap.put(item.getKey(), item.getValue());
-                    }
-                }
-            }
-
-
-            Map<Long, ClosedLoanTr> closedLoansForNow = filteredMap.entrySet().stream()
-                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)); // достаем уже закрытые кредиты
-
-
-            if (closedLoansForNow.size() > 0) { // если нашли закрытые кредиты на момент startDate создаваемого кредита
-
-                return FreeLoanSlotsRs.builder()
-                        .allLoansCount(getAllCredits(arNoteUser).size())
-                        .openSlots(closedLoansForNow.values().stream()
-                                .map(ClosedLoanTr::getLoanNumber)
-                                .collect(Collectors.toList()))
-                        .build();
-            } else {
-                return FreeLoanSlotsRs.builder()
-                        .allLoansCount(getAllCredits(arNoteUser).size())
-                        .build();
-            }
-        }
-
-        return FreeLoanSlotsRs.builder()
-                .allLoansCount(getAllCredits(arNoteUser).size())
-                .openSlots(Arrays.asList(1, 2, 3, 4, 5))
-                .build();
-    }
-
-    /**
-     * Стартовать вычисления консолидированной таблицы.
-     *
-     * @param principal
-     * @return
-     */
-    @Override
-    public void startCalculation(Principal principal) {
-        ExecutorService executor = Executors.newFixedThreadPool(2);
-
-        IntStream.range(0, 1000)
-                .forEach(i -> {
-                    Runnable task = () ->{
-                        try {
-                            Thread.sleep(200);
-                        } catch (InterruptedException e) {
-                            e.printStackTrace();
-                        }
-                        atomicInt.updateAndGet(n -> n + 2);
-
-                    };
-
-                    executor.submit(task);
-                });
-
-        executor.shutdown();
-    }
-
-    @Override
-    public Integer getThreadStatus() {
-        return atomicInt.get();
-    }
-
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/CalendarRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/CalendarRs.java b/src/main/java/com/antonromanov/arnote/model/investing/CalendarRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/CalendarRs.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-
-import com.antonromanov.arnote.model.investing.response.MonthDetailRs;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.util.LinkedList;
-
-/**
- * Календарь выплат
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class CalendarRs {
-    private LinkedList<MonthDetailRs> calendar;
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/SortMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/SortMode.java b/src/main/java/com/antonromanov/arnote/model/wish/SortMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/SortMode.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.Comparator;
-
-/**
- * Режим сортировки.
- */
-@AllArgsConstructor
-@Getter
-public enum SortMode {
-    NAME("Сортировка по имени", "name", Comparator.comparing(Wish::getWish)),
-    PRICE_ASC("Сортировка по возрастанию стоимости", "price-asc", Comparator.comparing(Wish::getPrice)),
-    PRICE_DESC("Сортировка по убыванию стоимости", "price-desc", Comparator.comparing(Wish::getPrice).reversed()),
-    PRIOR("Сортировка приоритету", "prior-asc", Comparator.comparing(Wish::getPriority)),
-    ALL("Без сортировки", "all", Comparator.comparing(Wish::getId));
-
-    private final String description;
-    private final String uiValue;
-    private final Comparator<Wish> compareInstrument;
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/WishDTOList.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/WishDTOList.java b/src/main/java/com/antonromanov/arnote/model/wish/WishDTOList.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/WishDTOList.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.*;
-import java.util.List;
-
-
-@Builder //todo: где геттеры и сеттры, почему поля не приватные??? Что это за пиздец???
-public class WishDTOList {
-
-    @Getter
-    List<WishDTO> wishList;
-    String monthName;
-    String year;
-    int monthNumber;
-    int colspan;
-    int sum;
-    boolean overflow;
-    String colorClass;
-    boolean expanded;
-    int balance; // набегающий баланс
-}
-
Index: src/main/java/com/antonromanov/arnote/model/investing/InvestingSortMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/InvestingSortMode.java b/src/main/java/com/antonromanov/arnote/model/investing/InvestingSortMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/InvestingSortMode.java	
+++ /dev/null	
@@ -1,51 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-import com.antonromanov.arnote.model.investing.response.BondRs;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-import java.util.Comparator;
-
-/**
- * Режим сортировки.
- */
-@AllArgsConstructor
-@Getter
-public enum InvestingSortMode {
-    TICKER_ASC("Сортировка по тикеру", Comparator.comparing(BondRs::getTicker)),
-    TICKER_DESC("Сортировка по тикеру обратная", Comparator.comparing(BondRs::getTicker).reversed()),
-    DIV_RUB_ASC("Сортировка по дивиденду в рублях", Comparator.comparing(bondRs->{
-        return bondRs.getDividends().getDivSum();
-    })),
-    DIV_RUB_DESC("Сортировка по дивиденду в рублях обратная", Comparator.comparing(bondRs->{
-        return bondRs.getDividends().getDivSum();
-    }, Comparator.reverseOrder())),
-    DIV_PRCNT_ASC("Сортировка по дивиденду в процентах", Comparator.comparing(bondRs->{
-        return bondRs.getDividends().getPercent();
-    })),
-    DIV_PRCNT_DESC("Сортировка по дивиденду в процентах обратная", Comparator.comparing(bondRs->{
-        return bondRs.getDividends().getPercent();
-    }, Comparator.reverseOrder())),
-    CUR_PRICE_ASC("Сортировка по текущей цене", Comparator.comparing(BondRs::getCurrentPrice)),
-    CUR_PRICE_DESC("Сортировка по текущей цене обратная", Comparator.comparing(BondRs::getCurrentPrice).reversed()),
-    FINAL_PRICE_ASC("Сортировка по общей цене", Comparator.comparing(BondRs::getFinalPrice)),
-    FINAL_PRICE_DESC("Сортировка по общей цене обратная", Comparator.comparing(BondRs::getFinalPrice).reversed()),
-    TOTAL_GROW_ASC("Сортировка по общему росту", Comparator.comparing(bondRs->{
-        return bondRs.getDelta().getDeltaInRubles();
-    })),
-    TOTAL_GROW_DESC("Сортировка по общему росту обратная", Comparator.comparing(bondRs->{
-        return bondRs.getDelta().getDeltaInRubles();
-    }, Comparator.reverseOrder())),
-    TODAY_GROW_ASC("Сортировка по сегодняшнему росту (по Тинькову)", Comparator.comparing(bondRs->{
-        return bondRs.getDelta().getTinkoffDelta();
-    })),
-    TODAY_GROW_DESC("Сортировка по общему росту обратная", Comparator.comparing(bondRs->{
-        return bondRs.getDelta().getTinkoffDelta();
-    }, Comparator.reverseOrder())),
-
-    NONE("Без сортировки", Comparator.comparing(BondRs::getId));
-
-
-    private final String description;
-    private final Comparator<BondRs> comparator;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexDetailInfoRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexDetailInfoRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexDetailInfoRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexDetailInfoRs.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import lombok.Data;
-import javax.xml.bind.annotation.*;
-import java.util.ArrayList;
-
-@XmlRootElement(name = "document")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexDetailInfoRs implements CommonMoexDoc {
-
-    @XmlElement(name = "data")
-    ArrayList<MoexInstrumentDetailDataRs> dataList = new ArrayList <> ();
-}
Index: src/main/java/com/antonromanov/arnote/enums/StepType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/StepType.java b/src/main/java/com/antonromanov/arnote/enums/StepType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/StepType.java	
+++ /dev/null	
@@ -1,48 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.service.MainService;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Типы одношагового перемещения.
- */
-@AllArgsConstructor
-@Getter
-public enum StepType implements ArnoteOperation{
-
-    UP(((wish, ms) -> ms.updateWish(wish.setPriorityAndReturnWish(wish.getPriority() + 1))),
-            ((wish, ms) -> {
-                int maxPrior = (ms.getMaxPriority(wish.getUser())) - 1;
-                if (maxPrior != 0) {
-                    if (wish.getPriorityGroup() < maxPrior + 1) {
-                        wish.setPriorityGroup(wish.getPriorityGroup() + 1);
-                    }
-                    return ms.updateWish(wish);
-                }
-                return wish;
-            })),
-    DOWN(((wish,  ms) -> wish.getPriority() > 1 ? ms.updateWish(wish.setPriorityAndReturnWish(wish.getPriority() - 1)) : wish),
-            ((wish,  ms) -> {
-                int maxPrior = (ms.getMaxPriority(wish.getUser())) - 1;
-                if (maxPrior == 0) {
-                    wish.setPriorityGroup(1);
-                } else {
-                    if (wish.getPriorityGroup() == null) {
-                        wish.setPriorityGroup(maxPrior);
-                    } else if (wish.getPriorityGroup() > 1) {
-                        wish.setPriorityGroup(wish.getPriorityGroup() - 1);
-                    }
-                }
-                return ms.updateWish(wish);
-            }));
-
-    private final ArnoteOperation changePriority;
-    private final ArnoteOperation changeMonthOrder;
-
-    @Override
-    public Wish move(Wish wish, MainService ms) {
-        return changePriority.move(wish, ms);
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/cache/CurrentQuoteCached.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/cache/CurrentQuoteCached.java b/src/main/java/com/antonromanov/arnote/model/investing/cache/CurrentQuoteCached.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/cache/CurrentQuoteCached.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing.cache;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-
-import java.time.LocalTime;
-import java.util.Map;
-import java.util.UUID;
-
-/**
- * Сущность, хранящая в кэше последние ставки.
- *
- */
-@AllArgsConstructor
-@Data
-public class CurrentQuoteCached {
-    private final UUID uuid; // уникальной идентификатор записи
-    private final long count; // уникальной идентификатор записи
-    private Map<String, MoexDocumentRs> cache; // попробуем использовать для сохранения статистики
-    private final LocalTime creationTime;
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/BadIncomeParameter.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/BadIncomeParameter.java b/src/main/java/com/antonromanov/arnote/exceptions/BadIncomeParameter.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/BadIncomeParameter.java	
+++ /dev/null	
@@ -1,40 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-
-import static com.antonromanov.arnote.exceptions.BadIncomeParameter.ParameterKind.*;
-
-public class BadIncomeParameter extends Exception {
-
-	private String message;
-
-	public enum ParameterKind {PRIORITYCHANGE, WISH_ID_SEARCH, WRONG_ID, SUCH_USER_EXIST, SUCH_USER_NO_EXIST,
-		NOTHING_FOUND, WRONG_MONTH, WRONG_SORT_TYPE, WRONG_PARAMETER} //todo: вынести в отдельный класс и типа ответных сообщений засунуть сюда.
-	// public enum ParameterKind {PRIORITYCHANGE, WISH_ID_SEARCH, WRONG_ID, SUCH_USER_EXIST, SUCH_USER_NO_EXIST, NOTHING_FOUND, WRONG_MONTH, WRONG_PARAMETER}
-
-	public BadIncomeParameter(ParameterKind parameter) {
-
-		if (parameter == PRIORITYCHANGE) { //todo: вот этот весь пиздец конечно поменять надо!!!!
-			this.message = "Ошибка изменения приоритета: тип повышения может быть только 'up' или 'down'";
-		} else if (parameter == WISH_ID_SEARCH) {
-				this.message = "Ошибка поиска желания: желания с таким id не существует";
-		} else if (parameter == WRONG_ID) {
-			this.message = "ID должен быть цифрой и не пустым заначением!";
-		} else if (parameter == SUCH_USER_EXIST) {
-			this.message = "SUCH_USER_EXIST";
-		} else if (parameter == SUCH_USER_NO_EXIST) {
-			this.message = "Пользователя с таким ID не существует!";
-		} else if (parameter == WRONG_MONTH) {
-			this.message = "Неверно задан месяц при изменении помесячной группировки!";
-		} else if (parameter == NOTHING_FOUND) {
-			this.message = "NOTHING_FOUND";
-		} else if (parameter == WRONG_SORT_TYPE) {
-			this.message = "Ошибочный тип сортировки!";
-		} else {
-			this.message = "Ошибочный входной параметр";
-		}
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/enums/FilterMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/enums/FilterMode.java b/src/main/java/com/antonromanov/arnote/model/wish/enums/FilterMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/enums/FilterMode.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.model.wish.enums;
-
-import com.antonromanov.arnote.model.wish.Wish;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.function.Predicate;
-
-/**
- * Режим фильтрации для желаний.
- */
-@AllArgsConstructor
-@Getter
-public enum FilterMode {
-    ALL("Все желания", wish -> wish.getWish()!=null),
-    PRIOR("Только приоритетные", w->w.getPriority()==1),
-    NONE("Без фильтрации", wish -> wish.getWish()!=null); //todo: удалить потом
-
-    private final String description;
-    private final Predicate<Wish> filterPredicate;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/enums/Targets.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Targets.java b/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Targets.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Targets.java	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Цели.
- */
-@AllArgsConstructor
-@Getter
-public enum Targets {
-    ONE_THOUSAND_ROUBLES("1 000 рублей в месяц", 1000),
-    FIVE_THOUSANDS_ROUBLES("5 000 рублей в месяц", 5000),
-    TEN_THOUSANDS_ROUBLES("10 000 рублей в месяц", 10000),
-    THIRTY_THOUSANDS_ROUBLES("30 000 рублей в месяц", 30000),
-    SIXTY_THOUSANDS_ROUBLES("60 000 рублей в месяц", 60000),
-    ONE_HUNDRED_ROUBLES("100 000 рублей в месяц", 100000);
-
-    private final String description; // описание
-    private final Integer value; //размер цели;
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/BondsRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/BondsRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/BondsRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/BondsRepo.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface BondsRepo extends JpaRepository<Bond, Long>{
-
-	List<Bond> findAllByUser(ArNoteUser user);
-	Optional<Bond> findBondByUserAndTicker(ArNoteUser user, String ticker);
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/UrlQueryParameters.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/UrlQueryParameters.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/UrlQueryParameters.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/UrlQueryParameters.java	
+++ /dev/null	
@@ -1,8 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart;
-
-/**
- * Интерфейс для параметров URL, которые содержатся в ЕнумСетах.
- */
-public interface UrlQueryParameters {
-    String getCode();
-}
Index: src/main/java/com/antonromanov/arnote/entity/common/Salary.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/common/Salary.java b/src/main/java/com/antonromanov/arnote/entity/common/Salary.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/common/Salary.java	
+++ /dev/null	
@@ -1,79 +0,0 @@
-package com.antonromanov.arnote.entity.common;
-
-import com.antonromanov.arnote.dto.rq.SalaryRq;
-import com.antonromanov.arnote.entity.finplan.Goal;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import javax.persistence.*;
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.ZoneId;
-import java.util.Date;
-
-@Entity
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "salary")
-public class Salary {
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "salary_seq_gen")
-	@SequenceGenerator(name = "salary_seq_gen", sequenceName ="salary_id_seq", allocationSize = 1)
-	private long id;
-
-	@Column(name = "fullslary", nullable = true)
-	private Integer fullSalary; // полная зарплата
-
-	@Column(name = "residualsalary", nullable = true)
-	private Integer residualSalary; // зарплата после трат различных
-
-	@Column(name = "living_expenses", nullable = true)
-	private Integer livingExpenses; // траты на жизнь: расходы на еду, транспорт и прочее
-
-	@Column(name = "date", nullable = true)
-	@Temporal(TemporalType.DATE)
-	private Date salarydate;
-
-	@Column
-	private LocalDateTime salaryTimeStamp;
-
-	@ManyToOne(cascade = CascadeType.REFRESH)
-	private ArNoteUser user;
-
-	public Salary(Integer fullSalary, Integer residualSalary) {
-		this.fullSalary = fullSalary;
-		this.residualSalary = residualSalary;
-	}
-
-	public static Salary $toDbEntityWithCheck(SalaryRq payload, Salary salaryFromDb, ArNoteUser arNoteUser) {
-
-		return Salary.builder()
-				.fullSalary(payload.getFullSalary() == null ? salaryFromDb.getFullSalary() : payload.getFullSalary())
-				.id(salaryFromDb.getId())
-				.livingExpenses(payload.getLivingExpenses() == null ? salaryFromDb.getLivingExpenses() : payload.getLivingExpenses())
-				.residualSalary(payload.getResidualSalary() == null ? salaryFromDb.getResidualSalary() : payload.getResidualSalary())
-				.salaryTimeStamp(payload.getSalaryDate() == null ? salaryFromDb.getSalaryTimeStamp() : (payload.getSalaryDate()).toInstant()
-						.atZone(ZoneId.systemDefault())
-						.toLocalDateTime())
-				.user(arNoteUser)
-				.build();
-	}
-
-	public static Salary $toDbEntity(SalaryRq payload, ArNoteUser arNoteUser) {
-		return Salary.builder()
-				.fullSalary(payload.getFullSalary())
-				.livingExpenses(payload.getLivingExpenses())
-				.residualSalary(payload.getResidualSalary())
-				.salaryTimeStamp((payload.getSalaryDate()).toInstant()
-						.atZone(ZoneId.systemDefault())
-						.toLocalDateTime())
-				.user(arNoteUser)
-				.build();
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailRowsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailRowsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailRowsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/instrumentinfo/MoexInstrumentDetailRowsRs.java	
+++ /dev/null	
@@ -1,101 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.instrumentinfo;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
-
-@XmlRootElement(name = "row")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class MoexInstrumentDetailRowsRs {
-
-        @XmlAttribute(name = "SECID")
-        private String secId; // Идентификатор финансового инструмента
-
-        @XmlAttribute(name = "BOARDID")
-        private String boardId; // Идентификатор режима торгов
-
-        @XmlAttribute(name = "SHORTNAME")
-        private String shortName; // Краткое наименование ценной бумаги
-
-        @XmlAttribute(name = "PREVPRICE")
-        private String prevPrice; // Цена последней сделки нормального периода предыдущего торгового дня
-
-        @XmlAttribute(name = "LOTSIZE")
-        private String lotSize; // Количество ценных бумаг в одном стандартном лоте
-
-        @XmlAttribute(name = "FACEVALUE")
-        private String faceValue; // Номинальная стоимость одной ценной бумаги, в валюте инструмента
-
-        @XmlAttribute(name = "STATUS")
-        private String status; // Индикатор &quot;торговые операции разрешены/запрещены&quot;
-
-        @XmlAttribute(name = "BOARDNAME")
-        private String boardName; // Режим торгов
-
-        @XmlAttribute(name = "DECIMALS")
-        private String decimals; // Точность, знаков после запятой
-
-        @XmlAttribute(name = "SECNAME")
-        private String secName; // Наименование финансового инструмента
-
-        @XmlAttribute(name = "REMARKS")
-        private String remarks; //
-
-        @XmlAttribute(name = "MARKETCODE")
-        private String marketcCode; // Идентификатор рынка на котором торгуется финансовый инструмент
-
-        @XmlAttribute(name = "INSTRID")
-        private String instrId; // Группа инструментов
-
-        @XmlAttribute(name = "SECTORID")
-        private String sectorId; //
-
-        @XmlAttribute(name = "MINSTEP")
-        private String minStep; // Минимально возможная разница между ценами, указанными в заявках на покупку/продажу ценных бумаг
-
-        @XmlAttribute(name = "PREVWAPRICE")
-        private String prevWaPrice; // Значение оценки (WAPRICE) предыдущего торгового дня
-
-        @XmlAttribute(name = "FACEUNIT")
-        private String faceUnit; // Код валюты, в которой выражен номинал ценной бумаги
-
-        @XmlAttribute(name = "PREVDATE")
-        private String prevDate; // Дата предыдущего торгового дня
-
-        @XmlAttribute(name = "ISSUESIZE")
-        private String issueSize; // Объем выпуска
-
-        @XmlAttribute(name = "ISIN")
-        private String isin; // Международный идентификационный код ценной бумаги
-
-        @XmlAttribute(name = "LATNAME")
-        private String latName;
-
-        @XmlAttribute(name = "REGNUMBER")
-        private String regNumber; // Номер государственной регистрации
-
-        @XmlAttribute(name = "PREVLEGALCLOSEPRICE")
-        private String prevLegalClosePrice; // Цена закрытия предыдущего дня
-
-        @XmlAttribute(name = "PREVADMITTEDQUOTE")
-        private String prevAdmittedQuote; // Признаваемая котировка предыдущего дня
-
-        @XmlAttribute(name = "CURRENCYID")
-        private String currencyId; // Валюта расчетов
-
-        @XmlAttribute(name = "SECTYPE")
-        private String secType; // Тип ценной бумаги
-
-        @XmlAttribute(name = "LISTLEVEL")
-        private String listLevel; // Уровень листинга
-
-        @XmlAttribute(name = "SETTLEDATE")
-        private String settleDate; // Дата расчетов сделки
-}
Index: src/main/java/com/antonromanov/arnote/enums/ServiceProfile.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/ServiceProfile.java b/src/main/java/com/antonromanov/arnote/enums/ServiceProfile.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/ServiceProfile.java	
+++ /dev/null	
@@ -1,33 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import com.antonromanov.arnote.entity.Wish;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Типы одношагового перемещения.
- */
-@AllArgsConstructor
-@Getter
-public enum ServiceProfile {
-    UP,
-    DOWN;
-
- //   private String uiValue;
-  //  private final ArnoteOperation operation;
-}
-
-
-
- /*  if (dto.getStep() == StepType.DOWN) {
-            if (mainService.getWishById(dto.getId()).get().getPriority() > 1) { //todo: с этим пиздецом надо что-то думать
-                (mainService.getWishById(dto.getId()).get())
-                        .setPriority((mainService.getWishById(dto.getId()).get()).getPriority() - 1);
-            }
-            return mainService.updateWish(mainService.getWishById(dto.getId()).get());
-        }
-
-        (mainService.getWishById(dto.getId()).get())
-                .setPriority((mainService.getWishById(dto.getId()).get()).getPriority() + 1);
-        return mainService.updateWish(mainService.getWishById(dto.getId()).get());
-    }*/
Index: src/main/java/com/antonromanov/arnote/model/investing/request/AddInstrumentRq.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/request/AddInstrumentRq.java b/src/main/java/com/antonromanov/arnote/model/investing/request/AddInstrumentRq.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/request/AddInstrumentRq.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing.request;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
-import java.time.LocalDate;
-
-@AllArgsConstructor
-@Data
-@NoArgsConstructor
-public class AddInstrumentRq {
-    @NotBlank
-    private String ticker;
-    private boolean isPlan; // если не передана ни одна продажа - то это "план", иначе это факт.
-    private Double price; // цена покупки
-    private LocalDate purchaseDate; // дата покупки
-    private int lot; // количество акций
-    @NotNull
-    private String bondType;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/cache/CacheServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/cache/CacheServiceImpl.java	
+++ /dev/null	
@@ -1,133 +0,0 @@
-package com.antonromanov.arnote.services.investment.cache;
-
-import com.antonromanov.arnote.model.investing.cache.enums.CacheDictType;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.stereotype.Service;
-import java.time.LocalDateTime;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Сервис кеширования.
- * TYPESAFE HETEROGENEOUS CONTAINERS PATTERN.
- */
-@Service
-@AllArgsConstructor
-@Data
-@Slf4j
-public class CacheServiceImpl implements CacheService {
-
-    private final Integer RETENTION_TIMEOUT = 60;
-    private Map<String, MoexDocumentRs> history;
-    private List<String> tradeModesStorage;
-    private Map<CacheDictType, HashMap<String, Object>> cache;
-    private Map<CacheDictType, HashMap<String, ObjectCachedWithTimestamp>> cacheWithRetention;
-
-
-
-    @Override
-    public void putTradeModes(List<String> tradeModes) {
-        tradeModesStorage = tradeModes;
-    }
-
-    @Override
-    public List<String> getTradeModes() {
-        return tradeModesStorage;
-    }
-
-    /**
-     * Добавить объект в кэш.
-     *
-     * @param dictionaryType
-     * @param obj
-     * @param aClass
-     * @param <T>
-     */
-    @Override
-    public <T> void putToCache(CacheDictType dictionaryType, String key, T obj, Class<T> aClass) {
-        CacheObject<T> cachedObject = new CacheObject<>(obj, aClass);
-        HashMap<String, Object> cachedElement = new HashMap<>();
-        cachedElement.put(key, cachedObject);
-        if (cache.get(dictionaryType)!=null){
-            HashMap<String, Object> mapSavedEarlier = cache.get(dictionaryType);
-            mapSavedEarlier.put(key, cachedObject);
-            cache.put(dictionaryType, mapSavedEarlier);
-        } else {
-            cache.put(dictionaryType, cachedElement);
-        }
-    }
-
-    @Override
-    public <T> T getDict(CacheDictType dictionaryType, String key) {
-        CacheObject<T> o = ((CacheObject<T>) cache.get(dictionaryType).get(key));
-        o.getClazz().cast(o.getT());
-        return o.getClazz().cast(o.getT());
-    }
-
-    /**
-     * Проверка, что кэш не пустой по ключу и словарю.
-     *
-     * @param dictionaryType
-     * @param key
-     * @return
-     */
-    @Override
-    public Boolean checkDict(CacheDictType dictionaryType, String key) {
-        return dictionaryType != null &&
-                key != null &&
-                cache.get(dictionaryType) != null && cache.get(dictionaryType).get(key) != null;
-
-    }
-
-    @Override
-    public <T> void putToCacheWithRetentionTime(CacheDictType dictionaryType, String key, T obj, Class<T> aClass, LocalDateTime timestamp) {
-        CacheObject<T> cachedObject = new CacheObject<>(obj, aClass);
-        HashMap<String, ObjectCachedWithTimestamp> cachedElement = new HashMap<>();
-        ObjectCachedWithTimestamp objWithTimestamp = ObjectCachedWithTimestamp.builder().timestamp(timestamp).obj(cachedObject).build();
-        cachedElement.put(key, objWithTimestamp);
-        if (cacheWithRetention.get(dictionaryType)!=null){
-            HashMap<String, ObjectCachedWithTimestamp> mapSavedEarlier = cacheWithRetention.get(dictionaryType);
-            if (mapSavedEarlier.get(key)!=null &&
-                    LocalDateTime.now().isBefore(mapSavedEarlier.get(key).timestamp.plusMinutes(RETENTION_TIMEOUT))) {
-                mapSavedEarlier.put(key, objWithTimestamp);
-                cacheWithRetention.put(dictionaryType, mapSavedEarlier);
-            } else {
-                cacheWithRetention.put(dictionaryType, cachedElement);
-            }
-        } else {
-            cacheWithRetention.put(dictionaryType, cachedElement);
-        }
-    }
-
-    @Override
-    public <T> T getDictWithRetention(CacheDictType dictionaryType, String key) {
-        log.warn("Достали из Кэша. dictionaryType: {}, key: {}", dictionaryType, key);
-        ObjectCachedWithTimestamp objWithRetention =  cacheWithRetention.get(dictionaryType).get(key);
-        CacheObject<T> o = (CacheObject<T>)(objWithRetention.obj);
-        o.getClazz().cast(o.getT());
-        return o.getClazz().cast(o.getT());
-    }
-
-    @Override
-    public Boolean checkDictWithRetention(CacheDictType dictionaryType, String key) {
-        return dictionaryType != null &&
-                key != null &&
-                cacheWithRetention.get(dictionaryType) != null &&
-                cacheWithRetention.get(dictionaryType).get(key) != null &&
-        cacheWithRetention.get(dictionaryType).get(key).timestamp != null &&
-                LocalDateTime.now().isBefore(cacheWithRetention.get(dictionaryType).get(key).timestamp.plusMinutes(RETENTION_TIMEOUT));
-    }
-
-    @AllArgsConstructor
-    @Data
-    @Builder
-    private static class ObjectCachedWithTimestamp {
-        private LocalDateTime timestamp;
-        private Object obj;
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/BooleanAdapter.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/BooleanAdapter.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/BooleanAdapter.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/BooleanAdapter.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.boardid;
-
-import javax.xml.bind.annotation.adapters.XmlAdapter;
-
-public class BooleanAdapter extends XmlAdapter<Integer, Boolean> {
-    @Override
-    public Boolean unmarshal( Integer s )
-    {
-        return s == null ? null : s == 1;
-    }
-
-    @Override
-    public Integer marshal( Boolean c )
-    {
-        return c == null ? null : c ? 1 : 0;
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/common/Calendar.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/common/Calendar.java b/src/main/java/com/antonromanov/arnote/model/common/Calendar.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/common/Calendar.java	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package com.antonromanov.arnote.model.common;
-
-import lombok.Data;
-import javax.xml.bind.annotation.*;
-import java.util.ArrayList;
-
-@XmlRootElement(name = "calendar")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class Calendar {
-
-    @XmlAttribute(name = "year")
-    String year;
-
-    @XmlAttribute(name = "lang")
-    String lang;
-
-    @XmlAttribute(name = "date")
-    String date;
-
-    @XmlElementWrapper(name = "holidays")
-    @XmlElement(name = "holiday")
-    ArrayList<Holiday> holidays = new ArrayList <> ();
-
-    @XmlElementWrapper(name = "days")
-    @XmlElement(name = "day")
-    ArrayList<DayOfRest> days = new ArrayList <> ();
-}
Index: src/main/java/com/antonromanov/arnote/entity/WishGroup.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/WishGroup.java b/src/main/java/com/antonromanov/arnote/entity/WishGroup.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/WishGroup.java	
+++ /dev/null	
@@ -1,26 +0,0 @@
-package com.antonromanov.arnote.entity;
-
-import lombok.*;
-import javax.persistence.*;
-
-
-/**
- * Группа желаний (одежда, еда, ...).
- */
-@Entity
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table
-public class WishGroup {
-
-    @Id
-    @Column(name="id", nullable = true)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "group_seq_gen")
-    @SequenceGenerator(name = "group_seq_gen", sequenceName ="group_id_seq", allocationSize = 1)
-    private long id;
-    private String groupName;
-}
-
Index: src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestService.java b/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/requestservice/RequestService.java	
+++ /dev/null	
@@ -1,76 +0,0 @@
-package com.antonromanov.arnote.services.investment.requestservice;
-
-import com.antonromanov.arnote.model.investing.external.requests.ForeignRequests;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;
-import com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;
-import org.springframework.util.MultiValueMap;
-
-import java.util.LinkedList;
-import java.util.Optional;
-
-public interface RequestService {
-    /**
-     * Запросить дивиденды.
-     *
-     * @param ticker
-     * @return
-     */
-    Optional<ConsolidatedDividendsRs> sendAndParse(String ticker);
-
-    /**
-     * Сделать запрос и смаршелить результат.
-     *
-     * @param type
-     * @return
-     */
-    CommonMoexDoc sendAndMarshall(MoexRestTemplateOperation type, String ticker, String boardId);
-
-    /**
-     * Специфический запрос для запроса истории.
-     *
-     * @param type
-     * @return
-     */
-    CommonMoexDoc getHistory(MoexRestTemplateOperation type, String ticker, String boardId, String dateFrom, String dateTill, int start);
-
-    /**
-     * Специфический запрос для запроса свечей.
-     *
-     * @return
-     */
-    CommonMoexDoc getCandles(MoexRestTemplateOperation type, String ticker, String dateFrom, String dateTill, int start); //todo: подумать как объединить свечи и историю в один метод
-
-    /**
-     * Сериализовать параметры запроса в MultiValueMap для MOEX.
-     *
-     * @param type
-     * @return
-     */
-    MultiValueMap<String, String> serializeObjectToMVMap(Object type);
-
-
-    int getCounter();
-
-    /**
-     * Отправить запрос в буржуйское API.
-     *
-     * @param <T> - респонс.
-     * @param requestType - тип, содержащие разные данные по урлу и прочему.
-     * @param params - параметры запроса.
-     * @param clazz - класс респонса.
-     * @return
-     */
-    <T>T sendAndMarshallForeignRequest(ForeignRequests requestType, LinkedList<String> params, Class<T> clazz);
-
-    /**
-     * Отправить запрос в буржуйское API без сериализации (вернуть сразу респонс назад).
-     *
-     *
-     * @param requestType - тип, содержащие разные данные по урлу и прочему.
-     * @param params - параметры запроса.
-     *
-     * @return
-     */
-    Optional<String> sendForeignRequest(ForeignRequests requestType, LinkedList<String> params);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignUrlRequestParams.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignUrlRequestParams.java b/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignUrlRequestParams.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/external/requests/ForeignUrlRequestParams.java	
+++ /dev/null	
@@ -1,26 +0,0 @@
-package com.antonromanov.arnote.model.investing.external.requests;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-/**
- * Параметры URL для буржуйских API (которые после ? идут).
- */
-@Data
-@AllArgsConstructor
-@Builder
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public class ForeignUrlRequestParams {
-    private String modules;
-    private String symbol;
-    private String period1;
-    private String period2;
-    private String interval;
-    private String includePrePost;
-    private String events;
-    private String function;
-    private String apikey;
-    private String keywords;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/Purchase.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/Purchase.java b/src/main/java/com/antonromanov/arnote/model/investing/Purchase.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/Purchase.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-import lombok.*;
-import javax.persistence.*;
-import java.time.LocalDate;
-
-@Entity
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Table
-public class Purchase {
-    @Id
-    @GeneratedValue
-    private Long id;
-    @Column
-    private Double price;
-    @Column
-    private Integer lot;
-    @Column
-    private LocalDate purchaseDate;
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/CreditRepository.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/CreditRepository.java b/src/main/java/com/antonromanov/arnote/repositoty/CreditRepository.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/CreditRepository.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.entity.finplan.Credit;
-import com.antonromanov.arnote.model.ArNoteUser;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface CreditRepository extends JpaRepository<Credit, Long>{
-    List<Credit> getCreditsByUser(@Param("user") ArNoteUser user);
-    Optional<Credit> findCreditByUserAndId(ArNoteUser user, Long id);
-
-
-    @Query(value="select c from Credit c where c.user = :user and " +
-            "c.startDate <> null and " +
-            "EXTRACT(YEAR from c.startDate) = :year and " +
-            "EXTRACT(MONTH from c.startDate) = :month")
-    List<Credit> findCreditByUserAndMonthAndYear(@Param("user") ArNoteUser user, @Param("year") int year,
-                                                         @Param("month") int month);
-
-}
Index: src/main/java/com/antonromanov/arnote/enums/ListOfAllType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/ListOfAllType.java b/src/main/java/com/antonromanov/arnote/enums/ListOfAllType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/ListOfAllType.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Режим вывода списка всех желаний: все или только приоритетные.
- */
-@AllArgsConstructor
-@Getter
-public enum ListOfAllType {
-    ALL("Все желания", "all"),
-    PRIORITY("Только приоритетные желания", "priority"),
-    DEFAULT("Предыдущая сортировка пользователя либо ALL", "default");
-
-    private final String description;
-    private final String uiValue;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/DivsDetailsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDetailsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDetailsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDetailsRs.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.util.List;
-
-
-/**
- * Консолидированная таблица по доходности.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class DivsDetailsRs {
-    List<DivsDebug> divs;
-    Double sum;
-}
Index: src/main/java/com/antonromanov/arnote/services/MainServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/MainServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/MainServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/MainServiceImpl.java	
+++ /dev/null	
@@ -1,348 +0,0 @@
-package com.antonromanov.arnote.services;
-
-import au.com.bytecode.opencsv.CSVReader;
-import com.antonromanov.arnote.entity.common.Salary;
-import com.antonromanov.arnote.dto.response.ResponseParseResult;
-import com.antonromanov.arnote.dto.response.WishResponse;
-import com.antonromanov.arnote.dto.response.monthgroupping.GroupOfWishesForOneMonth;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.entity.Salary;
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.enums.FilterMode;
-import com.antonromanov.arnote.enums.SortMode;
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.model.*;
-import com.antonromanov.arnote.model.wish.*;
-import com.antonromanov.arnote.repositoty.SalaryRepository;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.repositoty.WishRepository;
-import org.apache.commons.math3.util.ArithmeticUtils;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.time.format.TextStyle;
-import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-import static com.antonromanov.arnote.utils.ArNoteUtils.*;
-
-@Service
-public class MainServiceImpl implements MainService {
-
-    @Autowired
-    private WishRepository wishRepository;
-
-    @Autowired
-    private SalaryRepository salaryRepository;
-
-    @Autowired
-    private UsersRepo usersRepo;
-
-
-    Integer addCount = 0;  //todo: почему это здесь???? (// Количество добавлений)
-
-    @Override
-    public List<Wish> getAllWishesWithPriority(LocalUser user) {
-        return wishRepository.getAllWithPriority1(user); //todo: переименовать
-    }
-
-    @Override
-    public List<Wish> getAllWishesAndUpdateUser(LocalUser user, FilterMode filterType, SortMode sortType)  {
-
-        if (filterType == FilterMode.DEFAULT) {
-            filterType = (user.getFilterMode() != null) ? user.getFilterMode() : FilterMode.ALL;
-        }
-
-        if ((sortType == SortMode.DEFAULT)) {
-            sortType = (user.getTableSortMode() != null) ? user.getTableSortMode() : SortMode.ALL;
-        }
-
-        user.setTableSortMode(sortType);
-        user.setFilterMode(filterType);
-        usersRepo.saveAndFlush(user);
-
-        return  wishRepository.findAllByIdSorted(user)
-                .stream()
-                .filter(filterType.getFilterPredicate())
-                .sorted(sortType.getWishComparator())
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<Wish> getAllWishesWithPriority1(ArNoteUser user) {
-        return wishRepository.getAllWithPriority1(user);
-    }
-
-    @Override
-    public List<Wish> getAl() {
-        return wishRepository.getAll();
-    }
-
-    /**
-     * Берем максимальный priorityGroup, добавляем +1 и возвращаем.
-     *
-     * @param user
-     * @return
-     */
-    @Override
-    public int getMaxPriority(ArNoteUser user) { //todo: описание!!!!!
-        List<Wish> wishDTOList = wishRepository.getAllWithGroupOrder(user);
-        Comparator<Wish> comparator = Comparator.comparing(Wish::getPriorityGroup);
-
-        return wishDTOList.stream().filter(wish -> wish.getPriorityGroup() != null)
-                .max(comparator)
-                .map(e -> e.getPriorityGroup() + 1)
-                .orElse(1);
-
-    }
-
-    private void addItemInWishDTOListForNullPriorityWishes(List<GroupOfWishesForOneMonth> wishDTOListGlobal,
-                                                           List<WishResponse> wishDTOListFiltered,
-                                                           int maxPrior,
-                                                           ArNoteUser user) {
-        wishDTOListGlobal.add(WishDTOList.builder()
-                .wishList(wishDTOListFiltered)
-                .monthNumber(computerMonthNumber(maxPrior + 1 > 12 ? (maxPrior + 1 - 12) : maxPrior + 1))
-                .monthName(computerMonth(maxPrior))
-                .year(String.valueOf(getCurrentYear(maxPrior)))
-                .colspan(2)
-                .sum(wishDTOListFiltered.stream().map(WishResponse::getPrice).reduce(0, ArithmeticUtils::addAndCheck))
-                .overflow((wishDTOListFiltered.stream().map(WishResponse::getPrice)
-                        .reduce(0, ArithmeticUtils::addAndCheck)) > getLastSalary(user).getResidualSalary())
-                .colorClass(getClassColorByMonth(0, (wishDTOListFiltered.stream().map(WishResponse::getPrice)
-                        .reduce(0, ArithmeticUtils::addAndCheck)) > getLastSalary(user).getResidualSalary()))
-                .expanded(true)
-                .build());
-    }
-
-    /**
-     * Получить все желания с помесячной группировкой и детализованным наполнением.
-     */
-    @Override
-    public List<WishDTOList> getAllWishesWithGroupPriority(ArNoteUser user) {
-
-        if (!wishRepository.getAllWithGroupOrder(user).isEmpty()) {
-            int maxPrior = getMaxPriority(user);
-            List<GroupOfWishesForOneMonth> wishDTOListGlobal = new ArrayList<>();
-
-        if (maxPrior - 1 > 0) { // есть задачи с приоритетами
-            int currentMonth = 1;
-            Integer amountForAllMonths = 0; // набегающий баланс
-
-            while (currentMonth < maxPrior) {
-
-                    int finalCurrentMonth = currentMonth;
-                    List<WishResponse> wishDTOListFiltered = wishRepository.getAllWithGroupOrder(user)
-                            .stream()
-                            .filter(wish -> wish.getPriorityGroup() != null)
-                            .filter(wish -> wish.getPriorityGroup() == finalCurrentMonth)
-                            .map(w -> prepareWishDTO(w, maxPrior))
-                            .collect(Collectors.toList());
-
-                Integer sum = wishDTOListFiltered.stream().map(WishDTO::getPrice).reduce(0, ArithmeticUtils::addAndCheck);
-                amountForAllMonths = (getLastSalary(user).getResidualSalary() - sum) + amountForAllMonths; //считаем набегающий баланс
-
-                    wishDTOListGlobal.add(GroupOfWishesForOneMonth.builder()
-                            .wishList(wishDTOListFiltered)
-                            .monthNumber(computerMonthNumber(currentMonth))
-                            .monthName(computerMonth(currentMonth))
-                            .year(String.valueOf(getCurrentYear(currentMonth)))
-                            .colspan(2)
-                            .sum(sum)
-                            .overflow((wishDTOListFiltered.stream().map(WishResponse::getPrice)
-                                    .reduce(0, ArithmeticUtils::addAndCheck)) > getLastSalary(user).getResidualSalary())
-                            .colorClass(getClassColorByMonth(computerMonthNumber(currentMonth), (wishDTOListFiltered.stream()
-                                    .map(WishResponse::getPrice).reduce(0, ArithmeticUtils::addAndCheck)) > getLastSalary(user)
-                                    .getResidualSalary()))
-                            .expanded(true)
-                            .balance(amountForAllMonths)
-                            .build());
-
-                    currentMonth++;
-                }
-
-                List<WishResponse> wishDTOListFiltered = wishRepository.getAllWithGroupOrder(user)
-                        .stream()
-                        .filter(wish -> wish.getPriorityGroup() == null)
-                        .map(w -> prepareWishDTO(w, maxPrior))
-                        .collect(Collectors.toList());
-
-                addItemInWishDTOListForNullPriorityWishes(wishDTOListGlobal, wishDTOListFiltered, maxPrior, user);
-
-            } else {
-
-                List<WishResponse> wishDTOListFiltered = wishRepository.getAllWithGroupOrder(user)
-                        .stream()
-                        .map(w -> prepareWishDTO(w, maxPrior))
-                        .collect(Collectors.toList());
-
-                addItemInWishDTOListForNullPriorityWishes(wishDTOListGlobal, wishDTOListFiltered, maxPrior, user);
-            }
-
-            wishDTOListGlobal.forEach(wl -> wl.getWishList().sort(checkTreeViewModeForUpdate(user,  sortType))); // сортируем
-            return Optional.of(wishDTOListGlobal);
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    /**
-     * Проверить нужно ли менять тип сортировки для древовидного представления данных и если не нужно (sortType = DEFAULT),
-     * то проверяется, что выставлено у пользователя в качестве предыдущего типа сортировки.
-     *
-     * @param user
-     * @param sortType
-     * @return
-     */
-    private Comparator<WishResponse> checkTreeViewModeForUpdate(LocalUser user, SortMode sortType) {
-        if ((sortType == SortMode.DEFAULT)) {
-            sortType = (user.getTableSortMode() != null) ? user.getTreeSortMode() : SortMode.ALL;
-        } else {
-            user.setTreeSortMode(sortType);
-            usersRepo.saveAndFlush(user);
-        }
-        return sortType.getWishResponseComparator();
-    }
-
-    @Override
-    public List<Wish> getAllWishesByUserId(ArNoteUser user) {
-        return wishRepository.findAllByIdSorted(user);
-    }
-
-    /**
-     * Поиск желаний по имени.
-     *
-     * @param request
-     * @param user
-     * @return
-     */
-    @Override
-    public List<Wish> findAllWishesByWishName(SearchRq request, ArNoteUser user) {
-
-        return wishRepository.findAllByUser(user).stream()
-                .filter(w -> ((w.getRealized() == null || !w.getRealized()) && (w.getAc() == null || !w.getAc())))
-                .filter(notArchivedWish -> notArchivedWish.getWish().toLowerCase().contains(request.getWishName().toLowerCase()))
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Optional<List<Wish>> getAllRealizedWishes(ArNoteUser user) {
-        return Optional.of(wishRepository.getAllRealizedWishes(user));
-    }
-
-    @Override
-    public Wish updateMonthGroup(Wish wish) throws BadIncomeParameter {
-        Wish searchedWish = wishRepository.findById(wish.getId()).orElseThrow(() -> new BadIncomeParameter(BadIncomeParameter.ParameterKind.WISH_ID_SEARCH));
-        wish.setPriorityGroup(searchedWish.getPriorityGroup());
-        return wish;
-    }
-
-    @Override
-    public Wish saveWish(Wish wish) {
-        return wishRepository.saveAndFlush(wish);
-    }
-
-    @Override
-    public Wish updateWish(Wish wish) {
-        return wishRepository.saveAndFlush(wish);
-    }
-
-    @Override
-    public Wish updateAndFlushWish(Wish wish) {
-        return wishRepository.saveAndFlush(wish);
-    }
-
-    @Override
-    public Wish addWish(Wish wish) {
-        return wishRepository.saveAndFlush(wish);
-    }
-
-    @Override
-    public Optional<Wish> getWishById(long id) {
-        return wishRepository.findById(id);
-    }
-
-    @Override
-    public Integer getSumForAllWishes(LocalUser user) {
-    public Integer getSumm4All(ArNoteUser user) {
-        return wishRepository.findAllByIdSorted(user).stream().map(Wish::getPrice).reduce(0, ArithmeticUtils::addAndCheck);
-    }
-
-    @Override
-    public Integer getSumm4Prior(ArNoteUser user) {
-    public Integer getSumForPriorityWishes(LocalUser user) {
-        return wishRepository.getAllWithPriority1(user).stream().map(Wish::getPrice).reduce(0, ArithmeticUtils::addAndCheck);
-    }
-
-    @Override
-    public Optional<Integer> getImplementedSum(ArNoteUser user, int period) {
-        if (period == 1) {
-            return wishRepository.getImplementedSum4AllPeriod(user.getId());
-        } else {
-            return wishRepository.getImplementedSum4Month(user.getId());
-        }
-    }
-
-    @Override
-    public Salary saveSalary(Salary salary) {
-        return salaryRepository.saveAndFlush(salary);
-    }
-
-    @Override
-    public Salary getLastSalary(ArNoteUser user) {
-        return (salaryRepository.getLastSalaryListByUserDesc(user)).size() < 1 ? null :
-                (salaryRepository.getLastSalaryListByUserDesc(user)).get(0);
-    }
-
-    @Override
-    public Integer calculateImplementationPeriod(Integer summ, ArNoteUser ArNoteUser) {
-        return summ / (getLastSalary(ArNoteUser).getResidualSalary());
-    }
-
-
-    @Override
-    public ResponseParseResult parseCsv(MultipartFile file, ArNoteUser user) throws IOException {
-
-        CSVReader reader = new CSVReader(new InputStreamReader(file.getInputStream(), "UTF-8"),
-                ',', '"', 1);
-        List<String[]> allRows = reader.readAll();
-        Pattern pattern = Pattern.compile("^\\d{1,3}\\,");
-
-        allRows.stream()
-                .map(strings -> String.join(",", strings))
-                .filter(pattern.asPredicate())
-                .forEach(f -> {
-
-                    Pattern p = Pattern.compile("^\\d{1,3},(.*)(?=\\,,\\d)");
-                    Pattern p2 = Pattern.compile("(?:,,)(\\d.*)(р.)");
-                    Matcher m = p.matcher(f);
-                    Matcher m2 = p2.matcher(f);
-                    String localWish = "";
-                    Integer localPrice = 0;
-
-                    if (m.find()) {
-                        localWish = m.group(1);
-                    }
-
-                    if (m2.find()) {
-                        localPrice = Integer.parseInt(m2.group(1).replace(",", "").trim());
-                    }
-
-                    List<Wish> wishes = wishRepository.getWishesByName(localWish).orElseGet(ArrayList::new);
-
-                    if (wishes.size() < 1) {
-                        //нету? добавляем
-                        wishRepository.save(new Wish(localWish, localPrice, 1, 1,
-                                false, "from csv", "", user, new Date()));
-                        addCount++;
-                    }
-                });
-
-        return ResponseParseResult.builder().itemsAdded(addCount).status("Ok").okMessage("Парсинг успешно выполнен").build();
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/AlphavantageSearchRs.java	
+++ /dev/null	
@@ -1,47 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * Ответ сервиса Alphavantage по поиску бумаги.
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class AlphavantageSearchRs {
-
-    @JsonProperty("1. symbol")
-    private String symbol;
-
-    @JsonProperty("2. name")
-    private String name;
-
-    @JsonProperty("3. type")
-    private String type;
-
-    @JsonProperty("4. region")
-    private String region;
-
-    @JsonProperty("5. marketOpen")
-    private String marketOpen;
-
-    @JsonProperty("6. marketClose")
-    private String marketClose;
-
-    @JsonProperty("7. timezone")
-    private String timezone;
-
-    @JsonProperty("8. currency")
-    private String currency;
-
-    @JsonProperty("9. matchScore")
-    private String matchScore;
-
-
-
-}
Index: src/main/java/com/antonromanov/arnote/security/JWTLoginFilter.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/security/JWTLoginFilter.java b/src/main/java/com/antonromanov/arnote/security/JWTLoginFilter.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/security/JWTLoginFilter.java	
+++ /dev/null	
@@ -1,43 +0,0 @@
-package com.antonromanov.arnote.security;
-
-import java.io.IOException;
-import java.util.Collections;
-import javax.servlet.FilterChain;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
-
-public class JWTLoginFilter extends AbstractAuthenticationProcessingFilter {
-
-	public JWTLoginFilter(String url, AuthenticationManager authManager) {
-		super(new AntPathRequestMatcher(url));
-		setAuthenticationManager(authManager);
-	}
-
-	@Override
-	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
-			throws AuthenticationException, IOException, ServletException {
-
-		String username = request.getParameter("username");
-		String password = request.getParameter("password");
-
-		return getAuthenticationManager()
-				.authenticate(new UsernamePasswordAuthenticationToken(username, password, Collections.emptyList()));
-	}
-
-	@Override
-	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
-	                                        Authentication authResult) throws IOException, ServletException {
-
-		// Write Authorization to Headers of Response.
-		TokenAuthenticationService.addAuthentication(response, authResult.getName());
-		String authorizationString = response.getHeader("Authorization");
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/services/MainService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/MainService.java b/src/main/java/com/antonromanov/arnote/services/MainService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/MainService.java	
+++ /dev/null	
@@ -1,65 +0,0 @@
-package com.antonromanov.arnote.services;
-
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.model.*;
-import com.antonromanov.arnote.entity.common.Salary;
-import com.antonromanov.arnote.model.wish.SearchRq;
-import com.antonromanov.arnote.model.wish.Wish;
-import com.antonromanov.arnote.model.wish.WishDTOList;
-import org.springframework.web.multipart.MultipartFile;
-import java.util.List;
-import java.util.Optional;
-
-
-public interface MainService {
-
-	ResponseParseResult parseCsv(MultipartFile file, ArNoteUser localUser) throws Exception;
-
-	List<Wish> getAllWishesWithPriority1(ArNoteUser user); // todo: проверить - если реально нигде не испльзуется - то убрать
-	List<Wish> getAl();
-
-	int getMaxPriority(ArNoteUser user);
-
-	/**
-	 * Получить все желания с помесячной группировкой и детализованным наполнением.
-	 *
-	 */
-	List<WishDTOList> getAllWishesWithGroupPriority(ArNoteUser user);
-
-	void updateWish(Wish log);
-
-	Wish updateAndFlushWish(Wish log);
-
-	Wish addWish(Wish parseJsonToWish);
-
-	Optional<Wish> getWishById(int id); //todo: почему int ?????
-
-	Integer getSumm4All(ArNoteUser user); // todo: переименовать
-
-	Integer getSumm4Prior(ArNoteUser user); // todo: переименовать
-
-	Optional<Integer> getImplementedSum(ArNoteUser user, int period);
-
-	Salary saveSalary(Salary salary);
-
-	Salary getLastSalary(ArNoteUser localUser);
-
-	Integer calculateImplementationPeriod(Integer summ, ArNoteUser localUser);
-
-	List<Wish> getAllWishesByUserId(ArNoteUser user);
-
-	/**
-	 * Поиск желаний по имени.
-	 *
-	 * @param request
-	 * @param user
-	 * @return
-	 */
-	List<Wish> findAllWishesByWishName(SearchRq request, ArNoteUser user);
-
-	Optional<List<Wish>> getAllRealizedWishes(ArNoteUser user);
-
-	Wish updateMonthGroup(Wish wish) throws BadIncomeParameter;
-	Wish saveWish(Wish wish);
-
-}
Index: src/main/java/com/antonromanov/arnote/entity/finplan/Freeze.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/finplan/Freeze.java b/src/main/java/com/antonromanov/arnote/entity/finplan/Freeze.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/finplan/Freeze.java	
+++ /dev/null	
@@ -1,48 +0,0 @@
-package com.antonromanov.arnote.entity.finplan;
-
-import com.antonromanov.arnote.dto.rq.FreezeRq;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import javax.persistence.*;
-import java.time.LocalDate;
-import java.util.Date;
-import static com.antonromanov.arnote.utils.ArNoteUtils.localDateToDate;
-
-/**
- * Фриз - это когда нам не надо рассчитывать баланс по месяцу - просто задаем жестко-хардкодно итог по месяцу и храним.
- */
-@Entity
-@Builder
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "freeze_month")
-public class Freeze {
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "freeze_seq_gen")
-	@SequenceGenerator(name = "freeze_seq_gen", sequenceName ="freeze_id_seq", allocationSize = 1)
-	private Long id;
-
-	@Column(name = "amount", nullable = true)
-	private Integer amount; // Значение фриза
-
-	@Column(name = "start_date", nullable = true)
-	@Temporal(TemporalType.DATE)
-	private Date startDate; // Дата фриза.
-
-	@ManyToOne(cascade = CascadeType.REFRESH)
-	private ArNoteUser user;
-
-	public static Freeze $toDbEntity(FreezeRq rq, ArNoteUser user){
-		return Freeze.builder()
-				.amount(rq.getAmount())
-				.startDate(localDateToDate(LocalDate.of(rq.getYear(), rq.getMonth(), 1)))
-				.user(user)
-				.build();
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDataRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDataRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDataRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/currentquote/MoexDataRs.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.currentquote;
-
-import lombok.Data;
-import javax.xml.bind.annotation.*;
-import java.util.ArrayList;
-
-
-@XmlRootElement(name = "data")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-public class MoexDataRs {
-
-    @XmlElementWrapper(name = "rows")
-    @XmlElement(name = "row")
-    ArrayList<MoexRowsRs> row = new ArrayList <> ();
-
-}
Index: src/main/java/com/antonromanov/arnote/controller/UploadController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/UploadController.java b/src/main/java/com/antonromanov/arnote/controller/UploadController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/UploadController.java	
+++ /dev/null	
@@ -1,45 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.response.ResponseParseResult;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.web.multipart.MultipartFile;
-import java.security.Principal;
-
-/**
- * REST-контроллер работы с загрузкой csv-файлов.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/upload")
-@Slf4j
-@AllArgsConstructor
-@Data
-public class UploadController {
-
-    private final MainService mainService;
-    private final UsersRepo usersRepo;
-    private final Utils utils;
-
-    /**
-     * Загрузить csv-файл, распознать и добавить желания из него.
-     * @param principal
-     * @param csvFile
-     * @return
-     * @throws UserNotFoundException
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping("/parsecsv")
-    public ResponseParseResult parseCsv(Principal principal, @RequestParam(required = false, value = "csvfile")
-            MultipartFile csvFile) throws Exception {
-            LocalUser localUser = utils.getUserFromPrincipal(principal);
-            return mainService.parseCsv(csvFile, localUser);
-    }
-}
Index: src/main/java/com/antonromanov/arnote/entity/common/CalendarEntity.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/common/CalendarEntity.java b/src/main/java/com/antonromanov/arnote/entity/common/CalendarEntity.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/common/CalendarEntity.java	
+++ /dev/null	
@@ -1,30 +0,0 @@
-package com.antonromanov.arnote.entity.common;
-
-import lombok.*;
-import javax.persistence.*;
-import java.sql.Date;
-
-@Entity
-@Builder
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "calendar")
-public class CalendarEntity { //todo: нужно что-то решать, у нас есть DTO, есть модели под парсинг JSON-а, есть транспортные ДТОшки, ДТОшки реквеста-респонса, Энтити. Нужно навЕСТЬ ПОРЯДОК В ЭТОМ !!!!!!!
-
-
-    @Id
-    @Column(name="id", nullable = false)
-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "cal_entity_seq_gen")
-    @SequenceGenerator(name = "cal_entity_seq_gen", sequenceName ="cal_entity_id_seq", allocationSize = 1)
-    private Long id;
-
-    @Column
-  //  @Temporal(TemporalType.DATE)
-    Date date;
-
-    @Enumerated(EnumType.STRING)
-    com.antonromanov.arnote.model.common.enums.CalendarType type;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/enums/TinkoffDeltaFinalValuesType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/TinkoffDeltaFinalValuesType.java b/src/main/java/com/antonromanov/arnote/model/investing/response/enums/TinkoffDeltaFinalValuesType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/TinkoffDeltaFinalValuesType.java	
+++ /dev/null	
@@ -1,13 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Енум для возвращения рассчетных значений дельты по Тиньковским лекалам одной Мапой.
- */
-@AllArgsConstructor
-@Getter
-public enum TinkoffDeltaFinalValuesType {
-    DELTA_FINAL, DELTA_PERCENT;
-}
Index: src/main/java/com/antonromanov/arnote/security/UserDetailsServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/security/UserDetailsServiceImpl.java b/src/main/java/com/antonromanov/arnote/security/UserDetailsServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/security/UserDetailsServiceImpl.java	
+++ /dev/null	
@@ -1,30 +0,0 @@
-package com.antonromanov.arnote.security;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-@Service
-public class UserDetailsServiceImpl implements UserDetailsService {
-
-	@Autowired
-	UsersRepo userRepository;
-
-	@Override
-	@Transactional
-	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
-
-		ArNoteUser user = userRepository.findByLogin(username)
-				.orElseThrow(() ->
-						new UsernameNotFoundException("User Not Found with -> username or email : " + username));
-
-		return UserPrinciple.build(user);
-	}
-
-
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/PurchasesRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/PurchasesRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/PurchasesRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/PurchasesRepo.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.investing.Purchase;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
-
-@Repository
-public interface PurchasesRepo extends JpaRepository<Purchase, Long>{
-}
Index: src/main/java/com/antonromanov/arnote/security/TokenAuthenticationService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/security/TokenAuthenticationService.java b/src/main/java/com/antonromanov/arnote/security/TokenAuthenticationService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/security/TokenAuthenticationService.java	
+++ /dev/null	
@@ -1,41 +0,0 @@
-package com.antonromanov.arnote.security;
-
-import java.util.Collections;
-import java.util.Date;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.Authentication;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
-
-public class TokenAuthenticationService {
-
-	static final long EXPIRATIONTIME = 864_000_000; // 10 days
-
-	static final String SECRET = "ThisIsASecret";
-
-	static final String TOKEN_PREFIX = "Bearer";
-
-	static final String HEADER_STRING = "Authorization";
-
-	public static void addAuthentication(HttpServletResponse res, String username) {
-		String JWT = Jwts.builder().setSubject(username)
-				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATIONTIME))
-				.signWith(SignatureAlgorithm.HS512, SECRET).compact();
-		res.addHeader(HEADER_STRING, TOKEN_PREFIX + " " + JWT);
-	}
-
-	public static Authentication getAuthentication(HttpServletRequest request) {
-		String token = request.getHeader(HEADER_STRING);
-		if (token != null) {
-			// parse the token.
-			String user = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token.replace(TOKEN_PREFIX, "")).getBody()
-					.getSubject();
-
-			return user != null ? new UsernamePasswordAuthenticationToken(user, null, Collections.emptyList()) : null;
-		}
-		return null;
-	}
-
-}
Index: src/main/java/com/antonromanov/arnote/enums/SortMode.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/enums/SortMode.java b/src/main/java/com/antonromanov/arnote/enums/SortMode.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/enums/SortMode.java	
+++ /dev/null	
@@ -1,24 +0,0 @@
-package com.antonromanov.arnote.enums;
-
-import com.antonromanov.arnote.dto.response.WishResponse;
-import com.antonromanov.arnote.entity.Wish;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import java.util.Comparator;
-
-/**
- * Режим сортировки.
- */
-@AllArgsConstructor
-@Getter
-public enum SortMode { // todo: тут надо или сделать общий интерфейс, или везде отдавать WishResponse, или там где используется первый компаратор - использовать второй, а потом конвертить.
-    NAME(Comparator.comparing(WishResponse::getWish), Comparator.comparing(Wish::getWish)),
-    PRICE_ASC(Comparator.comparing(WishResponse::getPrice), Comparator.comparing(Wish::getPrice)),
-    PRICE_DESC(Comparator.comparing(WishResponse::getPrice).reversed(), Comparator.comparing(Wish::getPrice).reversed()),
-    ALL(Comparator.comparing(WishResponse::getId), Comparator.comparing(Wish::getId)),
-    DEFAULT(null, null);
-
-   private final Comparator<WishResponse> wishResponseComparator;
-   private final Comparator<Wish> wishComparator;
-}
-
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/MarketData.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/MarketData.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/MarketData.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/MarketData.java	
+++ /dev/null	
@@ -1,13 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.enums;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.UrlQueryParameters;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-@AllArgsConstructor
-@Getter
-public enum MarketData implements UrlQueryParameters {
-    SECID("SECID"), YIELD("YIELD"), DURATION("DURATION"), BOARDID("BOARDID"), LAST("LAST"),
-    UPDATETIME("UPDATETIME"), LASTCHANGE("LASTCHANGE"), LASTCHANGEPRCNT("LASTCHANGEPRCNT"), LCURRENTPRICE("LCURRENTPRICE");
-    private final String code;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/enums/Months.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Months.java b/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Months.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/enums/Months.java	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Месяца.
- */
-@AllArgsConstructor
-@Getter
-public enum Months {
-    JAN("January", "Январь", 1),
-    FEB("February", "Февраль", 2),
-    MAR("March", "Март", 3),
-    APR("April", "Апрель", 4),
-    MAY("May", "Май", 5),
-    JUN("June", "Июнь", 6),
-    JUL("July", "Июль", 7),
-    AUG("August", "Август", 8),
-    SEP("September", "Сентябрь", 9),
-    OCT("October", "Октябрь", 10),
-    NOV("November", "Ноябрь", 11),
-    DEC("December", "Декабрь", 12);
-
-    private final String englishName;
-    private final String russianName;
-    private final Integer number;
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarService.java b/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calendar/CalendarService.java	
+++ /dev/null	
@@ -1,26 +0,0 @@
-package com.antonromanov.arnote.services.investment.calendar;
-
-import com.antonromanov.arnote.model.investing.CalendarRs;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedInvestmentDataRs;
-import com.antonromanov.arnote.model.investing.response.ReturnsPerMonthRs;
-
-import java.util.List;
-
-public interface CalendarService {
-
-
-    /**
-     * Отдать календарь выплат
-     *
-     * @param user - текущий авторизовавшийся пользователь
-     * @return
-     */
-    CalendarRs getCalendar(ConsolidatedInvestmentDataRs user);
-
-    /**
-     * Собрать дивы / купоны упорядоченно.
-     * @return
-     */
-    List<ReturnsPerMonthRs> collectReturns(ConsolidatedInvestmentDataRs data, String p);
-
-}
Index: src/main/java/com/antonromanov/arnote/model/wish/SummEntity.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/wish/SummEntity.java b/src/main/java/com/antonromanov/arnote/model/wish/SummEntity.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/wish/SummEntity.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package com.antonromanov.arnote.model.wish;
-
-import lombok.Builder;
-
-@Builder
-public class SummEntity {
-	private Integer all;
-	private Integer priority;
-	private Integer allPeriodForImplementation;
-	private Integer priorityPeriodForImplementation;
-	private Integer lastSalary;
-	private int averageImplementationTime;
-	private int implemetedSummAllTime; // На сколько реализовали всего
-	private int implemetedSummMonth; // На сколько реализовали в этом месяце
-	private int littleWishes; // маленькие хотелки
-
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryElementRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryElementRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryElementRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuoteSummeryElementRs.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * ДТО для ответа по текущей ставке от Яху
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooQuoteSummeryElementRs {
-    private YahooQuotePriceInfoRs price;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceWithStatusRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceWithStatusRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceWithStatusRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/CurrentPriceWithStatusRs.java	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import java.time.LocalDate;
-import java.time.LocalTime;
-
-/**
- * Текущая цена и минимальный лот.
- */
-@Data
-@AllArgsConstructor
-@Builder
-@NoArgsConstructor
-public class CurrentPriceWithStatusRs { //todo: все это надо будет переделывать!!!! Придумать нормальные эксепшены и обертки!
-   @JsonSerialize(using = DoubleSerializer.class)
-   private Double currentPrice;
-   private String ticker;
-   private Currencies currency;
-   private LocalDate date; // дата торгов с которой взята цена
-   private String status;
-}
Index: src/main/java/com/antonromanov/arnote/security/JWTAuthenticationFilter.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/security/JWTAuthenticationFilter.java b/src/main/java/com/antonromanov/arnote/security/JWTAuthenticationFilter.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/security/JWTAuthenticationFilter.java	
+++ /dev/null	
@@ -1,34 +0,0 @@
-package com.antonromanov.arnote.security;
-
-import java.io.IOException;
-import javax.servlet.FilterChain;
-import javax.servlet.ServletException;
-import javax.servlet.ServletRequest;
-import javax.servlet.ServletResponse;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import io.jsonwebtoken.ExpiredJwtException;
-import org.slf4j.LoggerFactory;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.filter.GenericFilterBean;
-
-public class JWTAuthenticationFilter extends GenericFilterBean {
-
-	private static org.slf4j.Logger LOGGER = LoggerFactory.getLogger("console_logger");
-
-	@Override
-	public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
-			throws IOException, ServletException {
-
-		try {
-		Authentication authentication = TokenAuthenticationService.getAuthentication((HttpServletRequest) servletRequest);
-		SecurityContextHolder.getContext().setAuthentication(authentication);
-		filterChain.doFilter(servletRequest, servletResponse);
-		} catch (ExpiredJwtException eje)  {
-			LOGGER.info("Security exception for user {} - {}", eje.getClaims().getSubject(), eje.getMessage());
-			((HttpServletResponse) servletResponse).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
-			LOGGER.debug("Exception " + eje.getMessage(), eje);
-		}
-	}
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/GoalsRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/GoalsRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/GoalsRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/GoalsRepo.java	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.entity.finplan.Goal;
-import com.antonromanov.arnote.model.ArNoteUser;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Репозиторий трат.
- */
-@Repository
-public interface GoalsRepo extends JpaRepository<Goal, Long> {
-    List<Goal> findAllByUser(ArNoteUser user);
-
-    Optional<Goal> findGoalByIdAndUser(Long id, ArNoteUser user);
-
-    List<Goal> findAllByRepaymentAndUser(Long repayment, ArNoteUser user);
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuotePriceInfoRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuotePriceInfoRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuotePriceInfoRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/foreignstocks/yahoo/YahooQuotePriceInfoRs.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.foreignstocks.yahoo;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * ДТО для ответа по текущей ставке от Яху
- */
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class YahooQuotePriceInfoRs {
-    private YahooRegularMarketPriceRs regularMarketPrice;
-    private YahooRegularMarketPriceRs regularMarketChangePercent;
-    private YahooRegularMarketPriceRs regularMarketChange;
-    private String exchangeName; // биржа
-    private String marketState; // статус биржи: открыта / закрыта
-    private String quoteType; // тип бумаги, акция или облигация. EQUITY = акция
-    private String shortName; // короткое название
-    private String longName; // длинное название
-    private String currency; // валюта
-    private String currencySymbol; // символ валюты
-    private Long regularMarketTime; // тайстемп последней ставки
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/DeltaRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/DeltaRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/DeltaRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/DeltaRs.java	
+++ /dev/null	
@@ -1,65 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-/**
- * Дельта изменения цены бумаги за период истории доступный на бирже.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class DeltaRs {
-
-    /**
-     * Дельта изменения бумаги в рублях. Берутся данные с биржи за максимально доступный диапазон, берется самая
-     * ранняя ранняя бумага и ее цена. Потом считаем текущая цена минус самая ранняя
-     */
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double deltaInRubles; //todo: переименовать в более внятное на беке и фронте
-
-    /**
-     * Два варианта расчета в зависимости от переключателя deltaToggle у ArNoteUser:
-     *
-     * 1) TINKOFF_DELTA
-     *
-     * Дельта изменения бумаги в рублях по формуле как в приложении Тинькофф Инвестиции: (P*Sl)-(S(p*l)), где
-     *
-     *
-     * (S(p*l)) - сумма всех покупок, где цена покупки на момент покупки перемножена на размер лота
-     * P - текущая цена бумаги сейчас
-     * Sl - общий размер (сумма) приобретенных лотов
-     *
-     *
-     * 2) CANDLE_DELTA
-     *
-     * Формула расчета = (цена текущая - цена закрытия вчера) * кол-во акций в портфеле
-     *
-     */
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double tinkoffDelta; //todo: переименовать в более внятное на беке и фронте
-
-    /**
-     * tinkoffDelta в процентах от текущей цены.
-     */
-    @JsonProperty("percent")
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double tinkoffDeltaPercent; //todo: переименовать в более внятное на беке и фронте
-
-    /**
-     * Дельта изменения бумаги в рублях. Берутся данные с биржи за максимально доступный диапазон, берется самая
-     * ранняя ранняя бумага. Далее - количество дней в миллисекундах от текущей даты до найденной.
-     */
-    private final Long deltaPeriod; // todo: тоже путаешься с названием - это оказывается про время а не про деньги
-
-
-    /**
-     * Общий процент. То есть на сколько процентов произошло изменение с начала истории.
-     */
-    @JsonSerialize(using = DoubleSerializer.class)
-    private final Double totalPercent;
-}
Index: src/main/java/com/antonromanov/arnote/entity/finplan/Income.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/entity/finplan/Income.java b/src/main/java/com/antonromanov/arnote/entity/finplan/Income.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/entity/finplan/Income.java	
+++ /dev/null	
@@ -1,55 +0,0 @@
-package com.antonromanov.arnote.entity.finplan;
-
-import com.antonromanov.arnote.dto.rq.IncomeRq;
-import com.antonromanov.arnote.model.ArNoteUser;
-import lombok.*;
-import javax.persistence.*;
-import java.util.Date;
-
-/**
- * Доход.
- */
-@Entity
-@Builder
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString(exclude = "id")
-@EqualsAndHashCode
-@Table(name = "income")
-public class Income {
-
-	@Id
-	@Column(name="id", nullable = false)
-	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "income_seq_gen")
-	@SequenceGenerator(name = "income_seq_gen", sequenceName ="income_id_seq", allocationSize = 1)
-	private Long id;
-
-	@Column(name = "income", nullable = true)
-	private Integer income; // Сколько заработали в данный месяц
-
-	@Column(name = "income_date", nullable = true)
-	@Temporal(TemporalType.DATE)
-	private Date incomeDate; // Дата для понимания месяца и года прихода
-
-	@Column(name = "is_bonus", nullable = false, columnDefinition = "boolean default false")
-	private Boolean isBonus; // Это годовая премия?
-
-	@Column(name = "description", nullable = true)
-	private String description; // Описание
-
-	@ManyToOne(cascade = CascadeType.REFRESH)
-	private ArNoteUser user;
-
-	public static Income $toDbEntity(IncomeRq rq, ArNoteUser user){
-		return Income.builder()
-				.income(rq.getIncome())
-				.incomeDate(rq.getIncomeDate())
-				.isBonus(rq.getIsBonus())
-				.description(rq.getDesc())
-				.user(user)
-				.id(rq.getId())
-				.build();
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/BondType.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/BondType.java b/src/main/java/com/antonromanov/arnote/model/investing/BondType.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/BondType.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.model.investing;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-/**
- * Тип бумаги - фонд, акция, облигация
- */
-@AllArgsConstructor
-@Getter
-public enum BondType {
-    SHARE("Акция"), BOND("Облигация"), INDEX("Фонд");
-
-    private final String description;
-}
Index: src/main/java/com/antonromanov/arnote/service/MainService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/service/MainService.java b/src/main/java/com/antonromanov/arnote/service/MainService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/service/MainService.java	
+++ /dev/null	
@@ -1,79 +0,0 @@
-package com.antonromanov.arnote.service;
-
-import com.antonromanov.arnote.dto.response.ResponseParseResult;
-import com.antonromanov.arnote.dto.response.monthgroupping.GroupOfWishesForOneMonth;
-import com.antonromanov.arnote.entity.LocalUser;
-import com.antonromanov.arnote.entity.Salary;
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.enums.FilterMode;
-import com.antonromanov.arnote.enums.ListOfAllType;
-import com.antonromanov.arnote.enums.SortMode;
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.security.Principal;
-import java.util.List;
-import java.util.Optional;
-
-
-public interface MainService {
-
-	ResponseParseResult parseCsv(MultipartFile file, LocalUser localUser) throws Exception;
-
-	/**
-	 * Получить все желания с наивысшим приоритетом.
-	 *
-	 * @param user - пользак, по которому ищем желания.
-	 * @return - список желаний.
-	 */
-	List<Wish> getAllWishesWithPriority(LocalUser user);
-
-	List<Wish> getAllWishes(LocalUser user, FilterMode filterMode, SortMode sortType);
-
-	/**
-	 * Получить желания согласно переданным настройкам сортировки/фильтрации и сохранить их.
-	 * @param user - пользователь.
-	 * @param filterMode
-	 * @param sortType
-	 * @return
-	 */
-	List<Wish> getAllWishesAndUpdateUser(LocalUser user, FilterMode filterMode, SortMode sortType) throws UserNotFoundException;
-
-	int getMaxPriority(LocalUser user);
-
-	/**
-	 * Получить все желания с помесячной группировкой и детализованным наполнением.
-	 *
-	 */
-	Optional<List<GroupOfWishesForOneMonth>> getAllWishesWithGroupPriority(LocalUser user, SortMode sortType);
-
-	Wish updateWish(Wish log);
-
-	Wish updateAndFlushWish(Wish log);
-
-	Wish addWish(Wish wish);
-
-	Optional<Wish> getWishById(long id);
-
-	Integer getSumForAllWishes(LocalUser user);
-
-	Integer getSumForPriorityWishes(LocalUser user);
-
-	Optional<Integer> getImplementedSum(LocalUser user, int period);
-
-	Salary saveSalary(Salary salary);
-
-	Salary getLastSalary(LocalUser localUser);
-
-	Integer calculateImplementationPeriod(Integer summ, LocalUser localUser);
-
-	List<Wish> getAllWishesByUser(LocalUser user);
-
-	Optional<List<Wish>> findAllWishesByWish(Wish wish, LocalUser user);
-
-	List<Wish> getAllRealizedWishes(LocalUser user);
-
-	Wish updateMonthGroup(Wish wish) throws BadIncomeParameter;
-
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/BadTickerException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/BadTickerException.java b/src/main/java/com/antonromanov/arnote/exceptions/BadTickerException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/BadTickerException.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class BadTickerException extends RuntimeException {
-
-	private String message;
-
-	public BadTickerException(String ticker) {
-		this.message = "Попытка добавить инструмент по тикеру, который не существует! Тикер - " + ticker;
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/shares/common/CalculateFactory.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/common/CalculateFactory.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/common/CalculateFactory.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/shares/common/CalculateFactory.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.shares.common;
-
-import com.antonromanov.arnote.model.investing.response.enums.StockExchange;
-import com.antonromanov.arnote.services.investment.calc.shares.SharesCalcService;
-import org.springframework.stereotype.Service;
-
-/**
- * Фабрика для Сервис-Локатора, которая обеспечивает выбор, с методами какой имплементации сервиса калькуляции
- * акций работать: с имплементацией для MOEX (Московской Биржи) или с имплементацией для работы с данными,
- * запрашиваемыми из различных буржуйских API.
- */
-@Service
-public interface CalculateFactory {
-    SharesCalcService getCalculator(StockExchange se);
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/IncomeRepo.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/IncomeRepo.java b/src/main/java/com/antonromanov/arnote/repositoty/IncomeRepo.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/IncomeRepo.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.entity.finplan.Income;
-import com.antonromanov.arnote.model.ArNoteUser;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface IncomeRepo extends JpaRepository<Income, Long>{
-    List<Income> findAllByUserOrderByIncomeDateAsc(ArNoteUser user);
-    List<Income> findAllByUser(ArNoteUser user);
-    Optional<Income> findIncomeByUserAndId(ArNoteUser user, Long id);
-
-
-    @Query(value="select g from Income g where g.user = :user and " +
-            "g.incomeDate <> null and " +
-            "EXTRACT(YEAR from g.incomeDate) = :year and " +
-            "EXTRACT(MONTH from g.incomeDate) = :month")
-    List<Income> findIncomeByUserAndMonthAndYear(@Param("user") ArNoteUser user, @Param("year") int year,
-                                                         @Param("month") int month);
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/DivsDebug.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDebug.java b/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDebug.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/DivsDebug.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * Консолидированная таблица по доходности.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class DivsDebug {
-    private String ticker;
-    private List<DividendRs> divs;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/MonthDetailRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/MonthDetailRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/MonthDetailRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/MonthDetailRs.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.util.List;
-
-@Data
-@Builder
-@AllArgsConstructor
-public class MonthDetailRs {
-    private final String monthEnglishName;
-    private final String monthRussianName;
-    private final List<ReturnsPerMonthRs> data;
-}
Index: src/main/java/com/antonromanov/arnote/controller/MonthPriorityController.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/controller/MonthPriorityController.java b/src/main/java/com/antonromanov/arnote/controller/MonthPriorityController.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/controller/MonthPriorityController.java	
+++ /dev/null	
@@ -1,85 +0,0 @@
-package com.antonromanov.arnote.controller;
-
-import com.antonromanov.arnote.dto.request.MoveWishDto;
-import com.antonromanov.arnote.dto.response.monthgroupping.ListOfMonthsResponse;
-import com.antonromanov.arnote.entity.Wish;
-import com.antonromanov.arnote.enums.SortMode;
-import com.antonromanov.arnote.exceptions.BadIncomeParameter;
-import com.antonromanov.arnote.exceptions.NoDataYetException;
-import com.antonromanov.arnote.exceptions.UserNotFoundException;
-import com.antonromanov.arnote.repositoty.UsersRepo;
-import com.antonromanov.arnote.service.MainService;
-import com.antonromanov.arnote.utils.Utils;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.web.bind.annotation.*;
-import java.security.Principal;
-import static com.antonromanov.arnote.utils.Utils.parseMonthAndCalculatePriority;
-
-/**
- * REST-контроллер для работы с приоритетом по месяцам.
- */
-@CrossOrigin()
-@RestController
-@RequestMapping("/month-grouping")
-@Slf4j
-@AllArgsConstructor
-@Data
-public class MonthPriorityController {
-
-    private final MainService mainService;
-    private final UsersRepo usersRepo;
-    private final Utils utils;
-
-
-    /**
-     * Получить все желания с группировкой по месяцам.
-     *
-     * @param principal
-     * @param sortType
-     * @return
-     */
-    @CrossOrigin(origins = "*")
-    @GetMapping
-    public ListOfMonthsResponse getAllWishesWithMonthGrouping(Principal principal, @RequestParam SortMode sortType)
-            throws UserNotFoundException, NoDataYetException {
-
-            return ListOfMonthsResponse.builder()
-                    .list(mainService.getAllWishesWithGroupPriority(utils.getUserFromPrincipal(principal), sortType)
-                            .orElseThrow(()->new NoDataYetException(false)))
-                    .build();
-    }
-
-    /**
-     * Переместить желание по месяцам.
-     *
-     * @param principal - пользователь.
-     * @param payload   - ДТО с параметрами куда перемещать.
-     * @return - итоговое желание.
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping
-    public Wish changeMonthOrder(Principal principal, @RequestBody MoveWishDto payload) throws BadIncomeParameter {
-
-        Wish wish = mainService.getWishById(payload.getId()).orElseThrow(() ->
-                new BadIncomeParameter(BadIncomeParameter.ParameterKind.WISH_ID_SEARCH));
-        wish.setPriorityGroup(parseMonthAndCalculatePriority(payload.getMonth())); //todo: может добавить билдер в энтити или сделать отдельное ДТО для респонса с билдером
-        return mainService.updateAndFlushWish(wish);
-    }
-
-    /**
-     * Переместить желание по месяцам +/- на 1 месяц.
-     *
-     * @param principal - пользователь.
-     * @param payload   - ДТО с параметрами куда перемещать.
-     * @return - итоговое желание.
-     */
-    @CrossOrigin(origins = "*")
-    @PostMapping("/one-step")
-    public Wish changeMonth(Principal principal, @RequestBody MoveWishDto payload) throws BadIncomeParameter {
-        return mainService.getWishById(payload.getId())
-                .map(wish -> payload.getStep().getChangeMonthOrder().move(wish, mainService))
-                .orElseThrow(() -> new BadIncomeParameter(BadIncomeParameter.ParameterKind.WISH_ID_SEARCH));
-    }
-}
Index: src/main/java/com/antonromanov/arnote/model/common/enums/WorkCalendarSources.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/common/enums/WorkCalendarSources.java b/src/main/java/com/antonromanov/arnote/model/common/enums/WorkCalendarSources.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/common/enums/WorkCalendarSources.java	
+++ /dev/null	
@@ -1,40 +0,0 @@
-package com.antonromanov.arnote.model.common.enums;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-import java.util.Arrays;
-
-
-@AllArgsConstructor
-@Getter
-public enum WorkCalendarSources { //TODO: подумать как это вообще лучше хранить
-    CAL_2013(2013, "http://xmlcalendar.ru/data/ru/2013/calendar.xml"),
-    CAL_2014(2014, "http://xmlcalendar.ru/data/ru/2014/calendar.xml"),
-    CAL_2015(2015, "http://xmlcalendar.ru/data/ru/2015/calendar.xml"),
-    CAL_2016(2016, "http://xmlcalendar.ru/data/ru/2016/calendar.xml"),
-    CAL_2017(2017, "http://xmlcalendar.ru/data/ru/2017/calendar.xml"),
-    CAL_2018(2018, "http://xmlcalendar.ru/data/ru/2018/calendar.xml"),
-    CAL_2019(2019, "http://xmlcalendar.ru/data/ru/2019/calendar.xml"),
-    CAL_2020(2020, "http://xmlcalendar.ru/data/ru/2020/calendar.xml"),
-    CAL_2021(2021, "http://xmlcalendar.ru/data/ru/2021/calendar.xml"),
-    CAL_2022(2022, "http://xmlcalendar.ru/data/ru/2022/calendar.xml");
-
-
-    private final Integer year;
-    private final String url;
-
-    public static WorkCalendarSources searchURLByYear(Integer year){
-        return Arrays.stream(WorkCalendarSources.values())
-                .filter(e-> e.year.equals(year))
-                .findFirst()
-                .orElse(null);
-    }
-
-    public static Boolean checkYear(Integer year){
-        return Arrays.stream(WorkCalendarSources.values())
-                .anyMatch(e-> e.year.equals(year));
-    }
-
-
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondCalcService.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondCalcService.java b/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondCalcService.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/calc/bonds/BondCalcService.java	
+++ /dev/null	
@@ -1,91 +0,0 @@
-package com.antonromanov.arnote.services.investment.calc.bonds;
-
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.DividendRs;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Расчетный сервис с операциями по облигациям.
- */
-public interface BondCalcService {
-    /**
-     * Подготовить список купонов в формате списка дивидендов.
-     *
-     * @return
-     */
-    List<DividendRs> prepareCouponList(MoexRowsRs bondData);
-
-    /**
-     * Получить имя облигации.
-     *
-     * @param ticker
-     * @return
-     */
-    Optional<String> getBondName(String ticker);
-
-    /**
-     * Получить минимальный лот облигации или сколько куплено уже.
-     *
-     * @return
-     */
-    Integer getBondLot(Bond bond);
-
-    /**
-     * Получить купоны по облигации.
-     *
-     * @return
-     */
-    ConsolidatedDividendsRs getCoupons(Bond bond);
-
-    /**
-     * Получить текущую цену облигации
-     *
-     * @param ticker - тикер бумаги.
-     * @return
-     */
-    Double getCurrentBondPrice(String ticker);
-
-    /**
-     * Получить текущую валюту облигации
-     *
-     * @param ticker - тикер бумаги.
-     * @return
-     */
-    Currencies getBondCurrency(String ticker);
-
-    /**
-     * Запросить Облигации.
-     *
-     * @return
-     */
-    MoexDocumentRs getBondsByBoardGroup(String boardGroup);
-
-    /**
-     * Запросить Облигации по всем доскам сразу.
-     *
-     * @return
-     */
-    MoexDocumentRs getBonds();
-
-    /**
-     * Запросить Облигацию по тикеру.
-     *
-     * @param ticker - тикер
-     * @return
-     */
-    Optional<MoexRowsRs> getBondDataByTicker(String ticker);
-
-    /**
-     * Подготовить финальную цену (цена * лот).
-     *
-     * @param bond
-     * @param user
-     * @return
-     */
-    Integer calculateFinalPrice(Bond bond);
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/MoexRequestException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/MoexRequestException.java b/src/main/java/com/antonromanov/arnote/exceptions/MoexRequestException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/MoexRequestException.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class MoexRequestException extends RuntimeException {
-
-	private String message;
-
-	public MoexRequestException() {
-		this.message = "Ошибка отправки запроса к API биржи!";
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/FoundInstrumentRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/FoundInstrumentRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/FoundInstrumentRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/FoundInstrumentRs.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.BondType;
-import com.antonromanov.arnote.model.investing.response.enums.Currencies;
-import com.antonromanov.arnote.model.investing.response.enums.StockExchange;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-
-/**
- * Найденные по ключевому слову инструменты.
- */
-@AllArgsConstructor
-@Data
-@Builder
-public class FoundInstrumentRs {
-    private final String ticker;
-    private final String description;
-    private final Currencies currencies;
-    private final BondType type;
-    private final StockExchange stockExchange;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexRowsForBoardIdRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexRowsForBoardIdRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexRowsForBoardIdRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/boardid/MoexRowsForBoardIdRs.java	
+++ /dev/null	
@@ -1,29 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.boardid;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
-
-@XmlRootElement(name = "row")
-@XmlAccessorType(XmlAccessType.FIELD)
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class MoexRowsForBoardIdRs {
-
-        @XmlAttribute(name = "secid")
-        private String secid;
-
-        @XmlAttribute(name = "boardid")
-        private String boardId;
-
-        @XmlAttribute(name = "is_primary")
-        @XmlJavaTypeAdapter(BooleanAdapter.class)
-        private Boolean isPrimary;
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedDividendsRs.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedDividendsRs.java b/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedDividendsRs.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/ConsolidatedDividendsRs.java	
+++ /dev/null	
@@ -1,90 +0,0 @@
-package com.antonromanov.arnote.model.investing.response;
-
-import com.antonromanov.arnote.model.investing.response.serializers.DoubleSerializer;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;
-import com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import java.time.LocalDate;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Консолидированная инвест-таблица.
- */
-@Data
-@Builder
-@AllArgsConstructor
-public class ConsolidatedDividendsRs {
-    private final List<DividendRs> dividendList;
-
-    @JsonSerialize(using = DoubleSerializer.class)
-    private Double divSum; // Сумма дивидендов за прошлый год
-    @JsonSerialize(using = DoubleSerializer.class)
-    private Double percent;
-
-    /**
-     * Подсчитать сумму дивидендов.
-     */
-    public void calculateSum() {
-        if (this.getDividendList() != null && this.getDividendList().size() > 0) {
-            this.divSum = dividendList.stream()
-                    .filter(div -> (LocalDate.parse(div.getRegistryCloseDate())).getYear() == LocalDate.now().getYear() - 1)
-                    .map(DividendRs::getValue)
-                    .mapToDouble(Double::doubleValue).sum();
-        } else {
-            this.divSum = 0D;
-        }
-    }
-
-    /**
-     * Подсчитать проценты. То есть процент у нас это:
-     *
-     * Самый маленький див за прошлый год по отношению к цене акции по состоянию на эту дату.
-     *
-     * @param history - выборка по ставкам
-     */
-    public void calculatePercent(MoexDocumentRs history) {
-        if (this.getDividendList() != null && this.getDividendList().size() > 0 && !Double.isNaN(divSum)) {
-
-            Double v1 = dividendList.stream()
-                    .filter(div -> (LocalDate.parse(div.getRegistryCloseDate())).getYear() == LocalDate.now().getYear() - 1)
-                    .min(Comparator.comparing(DividendRs::getValue))
-                    .map(DividendRs::getValue).orElse(0D);
-
-            Double v2 = calculatePrice(history);
-
-            this.percent = v2==0D ? 0D : (((v1) * 100) / v2);
-        } else {
-            this.percent = 0D;
-        }
-    }
-
-
-    /**
-     * Подсчитать цену из истории.
-     *
-     * @param history - выборка по ставкам с биржи.
-     */
-    private Double calculatePrice(MoexDocumentRs history) {
-        /*
-         * Берем список дивов и выбираем любую дату из прошлого года.
-         */
-        Optional<LocalDate> dateOfDid = dividendList.stream()
-                .filter(div -> LocalDate.parse(div.getRegistryCloseDate()).getYear() == LocalDate.now().getYear() - 1)
-                .findFirst()
-                .map(d -> LocalDate.parse(d.getRegistryCloseDate()));
-
-        return dateOfDid.map(dat -> history.getData().getRow().stream()
-                .filter(r -> LocalDate.parse(r.getTradeDate()).isEqual(dat))
-                .findFirst()
-                .map(MoexRowsRs::getLegalClosePrice)
-                .orElse("0.0"))
-                .map(Double::valueOf)
-                .orElse(0D);
-    }
-
-}
Index: src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/DataBlock.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/DataBlock.java b/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/DataBlock.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/model/investing/response/xmlpart/enums/DataBlock.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.antonromanov.arnote.model.investing.response.xmlpart.enums;
-
-import com.antonromanov.arnote.model.investing.response.xmlpart.UrlQueryParameters;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-
-@Getter
-@AllArgsConstructor
-public enum DataBlock implements UrlQueryParameters {
-    SECURITIES("securities"), BOARDS("boards"), MARKETDATA("marketdata");
-    private final String code;
-}
Index: src/main/java/com/antonromanov/arnote/repositoty/IUserDAO.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/repositoty/IUserDAO.java b/src/main/java/com/antonromanov/arnote/repositoty/IUserDAO.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/repositoty/IUserDAO.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package com.antonromanov.arnote.repositoty;
-
-import com.antonromanov.arnote.model.wish.SearchCriteria;
-import com.antonromanov.arnote.model.wish.Wish;
-import java.util.List;
-
-public interface IUserDAO { //todo: на хера это нужно???? может удалим?
-	List<Wish> searchWish(List<SearchCriteria> params);
-}
Index: src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsServiceImpl.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsServiceImpl.java b/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/services/investment/returns/ReturnsServiceImpl.java	
+++ /dev/null	
@@ -1,166 +0,0 @@
-package com.antonromanov.arnote.services.investment.returns;
-
-import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.investing.Bond;
-import com.antonromanov.arnote.model.investing.BondType;
-import com.antonromanov.arnote.model.investing.response.ConsolidatedDividendsRs;
-import com.antonromanov.arnote.model.investing.response.DeltaRs;
-import com.antonromanov.arnote.model.investing.response.DividendRs;
-import com.antonromanov.arnote.model.investing.response.DivsDebug;
-import com.antonromanov.arnote.model.investing.response.enums.Targets;
-import com.antonromanov.arnote.repositoty.BondsRepo;
-import com.antonromanov.arnote.services.investment.calc.CommonService;
-import com.antonromanov.arnote.services.investment.calc.bonds.BondCalcService;
-import org.springframework.stereotype.Service;
-import java.util.*;
-import java.util.stream.Collectors;
-
-@Service
-public class ReturnsServiceImpl implements ReturnsService {
-
-    private final BondCalcService bondCalcService;
-    private final BondsRepo repo;
-    private final CommonService commonService;
-
-    public ReturnsServiceImpl(BondsRepo repo, BondCalcService bondCalcService, CommonService commonService) {
-        this.repo = repo;
-        this.bondCalcService = bondCalcService;
-        this.commonService = commonService;
-    }
-
-    /**
-     * Запросить общую сумму инвестированного.
-     * @param user - текущий авторизовавшийся пользователь
-     * @return
-     */
-    @Override
-    public Optional<Long> getTotalInvestment(ArNoteUser user) {
-        return Optional.of(repo.findAllByUser(user).stream()
-                .filter(Bond::getIsBought)
-                .map(b -> b.getPurchaseList().stream()
-                        .map(p -> p.getLot() * p.getPrice())
-                        .reduce((double) 0, Double::sum))
-                .reduce((double) 0, Double::sum)
-                .longValue());
-    }
-
-    /**
-     * Получить дельту по всем бумагам пользователя.
-     *
-     * @param user
-     * @return
-     */
-    @Override
-    public Optional<Double> getSharesDelta(ArNoteUser user) {
-        return Optional.of(repo.findAllByUser(user).stream()
-                .filter(bond->bond.getType()== BondType.SHARE)
-                .map(b -> {
-                    DeltaRs deltaRs = commonService.prepareDelta(b);
-                    return deltaRs==null ? 0 : deltaRs.getTinkoffDelta();
-                }).reduce((double) 0, Double::sum));
-    }
-
-    @Override
-    public Optional<Double> getSharesDeltaForBought(ArNoteUser user) {
-        return Optional.of(repo.findAllByUser(user).stream()
-                .filter(bond->bond.getType()== BondType.SHARE)
-                .filter(Bond::getIsBought)
-                .map(b -> {
-                    DeltaRs deltaRs = commonService.prepareDelta(b);
-                    return deltaRs==null ? 0 : deltaRs.getTinkoffDelta();
-                }).reduce((double) 0, Double::sum));
-    }
-
-    /**
-     * Получить общую доходность по дивидендам.
-     *
-     * @param user
-     * @return
-     */
-    @Override
-    public Optional<Long> getTotalDivsReturn(ArNoteUser user) {
-        return Optional.of(repo.findAllByUser(user).stream()
-                .filter(bond -> bond.getType()==BondType.SHARE)
-                .filter(Bond::getIsBought)
-                .map(b -> {
-                    ConsolidatedDividendsRs divs = commonService.getDivsOrCoupons(b);
-                    return divs.getDivSum();
-                })
-                .reduce((double) 0, Double::sum))
-                .map(Math::round);
-    }
-
-    @Override
-    public List<DivsDebug> getDivsDebug(ArNoteUser user) {
-        return repo.findAllByUser(user).stream()
-                .filter(bond -> bond.getType()==BondType.SHARE)
-                .filter(Bond::getIsBought)
-                .map(b -> {
-                    ConsolidatedDividendsRs divsData = commonService.getDivsOrCoupons(b);
-                    List<DividendRs> divList = new ArrayList<>();
-
-                    if (divsData!=null && divsData.getDividendList().size()>0) {
-
-                        divList.add(DividendRs.builder()
-                                .value(divsData.getDividendList().stream()
-                                        .map(DividendRs::getValue)
-                                        .reduce((double) 0, Double::sum))
-                                .currencyId(divsData.getDividendList().get(0).getCurrencyId())
-                                .build());
-                    }
-                    return DivsDebug.builder()
-                            .ticker(b.getTicker())
-                            .divs(divList)
-                            .build();
-                }).collect(Collectors.toList());
-
-
-
-    }
-
-    /**
-     * Посчитать сколько надо вложить для получения заданной ежемесячной прибыли.
-     *
-     * @param user
-     * @return
-     */
-    @Override
-    public Long calculateRequiredInvestments(ArNoteUser user, Targets target) {
-        try {
-            return (getTotalInvestment(user).orElse(0L) * (target.getValue() * 12)) / calculateTotalReturns(user);
-        } catch (Exception e){
-            return 0L;
-        }
-    }
-
-    /**
-     * Посчитать общую сумму прибыли: рост по акциям + купоны облигаций + дивиденды.
-     *
-     * @param user
-     * @return
-     */
-    @Override
-    public Long calculateTotalReturns(ArNoteUser user) {
-        return (getSharesDeltaForBought(user).map(Double::longValue).orElse(0L)) +
-                getTotalBondsReturns(user).orElse(0L) +
-                getTotalDivsReturn(user).orElse(0L);
-    }
-
-    /**
-     * Получить общий купонный доход по всем облигациям пользователя.
-     * @param user
-     * @return
-     */
-    @Override
-    public Optional<Long> getTotalBondsReturns(ArNoteUser user) {
-        return Optional.of(repo.findAllByUser(user).stream()
-                .filter(bond -> bond.getType()==BondType.BOND)
-                .filter(Bond::getIsBought)
-                .map(b -> {
-                    ConsolidatedDividendsRs divs = bondCalcService.getCoupons(b);
-                    return divs.getDivSum();
-                })
-                .reduce((double) 0, Double::sum))
-                .map(Math::round);
-    }
-}
Index: src/main/java/com/antonromanov/arnote/exceptions/FinPlanningException.java
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/exceptions/FinPlanningException.java b/src/main/java/com/antonromanov/arnote/exceptions/FinPlanningException.java
deleted file mode 100644
--- a/src/main/java/com/antonromanov/arnote/exceptions/FinPlanningException.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.antonromanov.arnote.exceptions;
-
-public class FinPlanningException extends RuntimeException {
-
-	private String message;
-
-	public FinPlanningException() {
-		this.message = "Ошибка построения консолидированной таблицы фин-планирования!";
-	}
-
-	public String getMessage() {
-		return message;
-	}
-}
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomesForDeleteRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * DTO для добавления нового дохода&.\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class IncomesForDeleteRq {\n    private List<IdListRq> idList; // Список айдюков для удаления.\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomesForDeleteRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomesForDeleteRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomesForDeleteRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomesForDeleteRq.java	
@@ -1,11 +1,10 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.Date;
 import java.util.List;
 
 /**
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomeRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n/**\n * DTO для добавления нового дохода\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class IncomeRq {\n    private Integer income; // Сколько заработали в данный месяц / размер бонуса\n    private Boolean isBonus; // Это годовая премия?\n    private Date incomeDate; //  Дата для понимания месяца и года прихода\n    private String desc; // Описание\n    private Long id;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomeRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomeRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomeRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IncomeRq.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/FreezeRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\n\n/**\n * DTO для добавления нового фриза.\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FreezeRq {\n    private Integer amount;\n    private Integer year;\n    private Integer month;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/FreezeRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/FreezeRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/FreezeRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/FreezeRq.java	
@@ -1,11 +1,9 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 
-import java.util.Date;
-
 /**
  * DTO для добавления нового фриза.
  */
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/FinPlanController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.controller;\n\nimport com.antonromanov.arnote.dto.rq.*;\nimport com.antonromanov.arnote.dto.rs.*;\nimport com.antonromanov.arnote.exceptions.UserNotFoundException;\nimport com.antonromanov.arnote.services.FinPlanService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.constraints.NotNull;\nimport java.security.Principal;\n\n\n/**\n * API для фин-планами.\n */\n@CrossOrigin()\n@RestController\n@RequestMapping(\"/finplanning\")\n@Slf4j\npublic class FinPlanController {\n\n    @Autowired\n    private final FinPlanService service;\n\n    public FinPlanController(FinPlanService service) {\n        this.service = service;\n    }\n\n    /**\n     * Запросить консолидированную таблицу из кэша.\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/consolidated\")\n    public FinPlanListRs getFinPlanTableFromCache(Principal principal) throws Exception {\n        log.info(\"Get Consolidated List From Cache...\");\n        return service.getFinPlanTableFromCache(principal);\n    }\n\n    /**\n     * Запросить консолидированную таблицу из БД.\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/consolidated/db\")\n    public FinPlanListRs getFinPlanTableFromDb(Principal principal) throws Exception {\n        log.info(\"Get Consolidated List From DB...\");\n        return service.getFinPlanTableFromDb(principal);\n    }\n\n    /**\n     * Пытаемся запихнуть получение консолдированной таблы в поток\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/consolidated/thread/start\")\n    public SingleOperationRs getFinPlanTableFromDbStart(Principal principal) throws Exception {\n        log.info(\"Get Consolidated List From DB. Start calculation in Thread...\");\n        service.startCalculation(principal);\n        return SingleOperationRs.builder()\n                .status(ResponseStatusRs.builder()\n                        .status(\"Thread Started\")\n                        .description(\"Thread Started\")\n                        .code(200)\n                        .build())\n                .build();\n    }\n\n    /**\n     * Получить статус потока\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/consolidated/thread/get\")\n    public SingleOperationRs getThreadStatus(Principal principal) throws Exception {\n        log.info(\"Get Thread Status\");\n\n        return SingleOperationRs.builder()\n                .status(ResponseStatusRs.builder()\n                        .status(\"INT = \" + service.getThreadStatus())\n                        .description(\"Thread Status gained\")\n                        .code(200)\n                        .build())\n                .build();\n    }\n\n    /**\n     * Добавить кредит.\n     *\n     * @param principal\n     * @param request\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/loan\")\n    public AddCreditRs addLoan(Principal principal, @RequestBody CreditRq request) throws UserNotFoundException {\n        log.info(\"Add loan: {}\", request);\n        return service.addCredit(principal, request);\n    }\n\n    /**\n     * Удалить кредит.\n     *\n     * @param principal - пользак\n     * @param id        - id кредита\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @DeleteMapping(\"/loan\")\n    public AddCreditRs deleteLoan(Principal principal, @RequestParam @NotNull Long id) {\n        log.info(\"Delete loan: {}\", id);\n        return service.deleteLoan(principal, id);\n    }\n\n    /**\n     * Запросить полный список кредитов.\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/loan/list\")\n    public FullLoansListRs creditList(Principal principal) throws UserNotFoundException {\n        log.info(\"============== Credit list ============== \");\n        return service.getFullLoansList(principal);\n    }\n\n    /**\n     * Запросить свободные слоты по кредитам.\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/loan/slots\")\n    public FreeLoanSlotsRs getLoansSlots(Principal principal, @RequestBody LoanByDateRq payload) throws UserNotFoundException {\n        log.info(\"Free Loans Slots by Date = {}\", payload);\n        return service.getLoansSlots(principal, payload);\n    }\n\n\n    /**\n     * Запросить кредит по дате.\n     *\n     * @param principal\n     * @return\n     * @throws Exception\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/loan/bydate\")\n    public FullLoansListRs loanByDate(Principal principal, @RequestBody LoanByDateRq payload) {\n        log.info(\"Credit by Date = {}\", payload);\n        return service.getLoanByDate(payload, principal);\n    }\n\n    /**\n     * Запросить данные по кредиту по его ID.\n     *\n     * @param principal\n     * @param id\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/loan\")\n    public CreditRs getLoanById(Principal principal, @RequestParam @NotNull Long id) throws UserNotFoundException { // todo: надо отдельную ДТО с респонсом или как-то научиться заворачивать их (враппить)\n        log.info(\"Get loan by id: {}\", id);\n        return service.getLoanById(id, principal);\n    }\n\n    /**\n     * Редактировать кредит.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PutMapping(\"/loan\")\n    public AddCreditRs editLoan(Principal principal, @RequestBody CreditRq payload) throws UserNotFoundException {\n        log.info(\"Edit loan: {}\", payload);\n        return service.editLoan(payload, principal);\n    }\n\n    /**\n     * Добавить доход.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/income\")\n    public SingleOperationRs addIncome(Principal principal, @RequestBody IncomeRq payload) throws UserNotFoundException {\n        log.info(\"Add income: {}\", payload);\n        return service.addIncome(payload, principal);\n    }\n\n    /**\n     * Удалить доход.\n     *\n     * @param principal - пользак\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/income/delete\")\n    public SingleOperationRs deleteIncome(Principal principal, @RequestBody IncomesForDeleteRq payload) throws UserNotFoundException {\n        log.info(\"Delete incomes: {}\", payload);\n        return service.deleteIncome(principal, payload);\n    }\n\n    /**\n     * Редактировать доход.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PutMapping(\"/income\")\n    public SingleOperationRs editIncome(Principal principal, @RequestBody IncomeRq payload) throws UserNotFoundException {\n        log.info(\"Edit income: {}\", payload);\n        return service.editIncome(payload, principal);\n    }\n\n    /**\n     * Деталка по остаткам.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/remains\")\n    public FinalBalanceCalculationsRs getRemainsDetailInfo(Principal principal, @RequestBody GetRemainsDetailInfoRq payload)\n            throws UserNotFoundException {\n        log.info(\"Get Remains Detail Info: {}\", payload);\n        return service.getRemainsDetailInfo(payload, principal);\n    }\n\n    /**\n     * Добавить расход / цель.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/goal\")\n    public SingleOperationRs addGoal(Principal principal, @RequestBody GoalRq payload) throws UserNotFoundException {\n        log.info(\"Add goal: {}\", payload);\n        return service.addGoal(payload, principal);\n    }\n\n    /**\n     * Редактировать расход / цель.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PutMapping(\"/goal\")\n    public SingleOperationRs editGoal(Principal principal, @RequestBody GoalRq payload) throws UserNotFoundException {\n        log.info(\"Edit goal: {}\", payload);\n        return service.editGoal(payload, principal);\n    }\n\n    /**\n     * Удалить цель.\n     *\n     * @param principal - пользак\n     * @param id        - id кредита\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @DeleteMapping(\"/goal\")\n    public AddCreditRs deleteGoal(Principal principal, @RequestParam @NotNull Long id) throws UserNotFoundException {\n        log.info(\"Delete goal: {}\", id);\n        return service.deleteGoal(principal, id);\n    }\n\n    /**\n     * Запросить все зарплаты.\n     *\n     * @param principal - пользак\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @GetMapping(\"/salary\")\n    public SalaryListRs getAllSalaries(Principal principal) throws UserNotFoundException {\n        log.info(\"Getting salaries list...\");\n        return service.getSalariesList(principal);\n    }\n\n    /**\n     * Запросить все зарплаты.\n     *\n     * @param principal - пользак\n     * @return\n     */\n    @CrossOrigin(origins = \"*\")\n    @PutMapping(\"/salary\")\n    public SingleOperationRs editSalary(Principal principal, @RequestBody SalaryRq payload) throws UserNotFoundException {\n        log.info(\"Edit salary {}\", payload);\n        return service.editSalary(principal, payload);\n    }\n\n    /**\n     * Добавить новую ЗП.\n     *\n     * @param principal\n     * @param payload\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/salary\")\n    public SingleOperationRs addSalary(Principal principal, @RequestBody SalaryRq payload) throws UserNotFoundException {\n        log.info(\"Add salary {}\", payload);\n        return service.addSalary(principal, payload);\n    }\n\n    /**\n     * Удалить ЗП.\n     *\n     * @param principal\n     * @param id\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @DeleteMapping(\"/salary\")\n    public SingleOperationRs deleteSalary(Principal principal, @RequestParam @NotNull Long id) {\n        log.info(\"Delete salary: {}\", id);\n        return service.deleteSalary(principal, id);\n    }\n\n    /**\n     * Добавить фриз.\n     *\n     * @param principal\n     * @param request\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @PostMapping(\"/freeze\")\n    public SingleOperationRs addFreeze(Principal principal, @RequestBody FreezeRq request) {\n        log.info(\"Add freeze: {}\", request);\n        return service.addFreeze(principal, request);\n    }\n\n    /**\n     * Удалить фриз.\n     *\n     * @param principal\n     * @param\n     * @return\n     * @throws UserNotFoundException\n     */\n    @CrossOrigin(origins = \"*\")\n    @DeleteMapping(\"/freeze\")\n    public SingleOperationRs deleteFreeze(Principal principal, @RequestParam @NotNull Long year, @RequestParam @NotNull Long month) {\n        log.info(\"Delete freeze\");\n        return service.deleteFreeze(principal, year, month);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/FinPlanController.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/FinPlanController.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/FinPlanController.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/controller/FinPlanController.java	
@@ -1,7 +1,7 @@
-package com.antonromanov.arnote.controller;
+package com.antonromanov.arnote.sbdfvjbsdf.controller;
 
-import com.antonromanov.arnote.dto.rq.*;
-import com.antonromanov.arnote.dto.rs.*;
+import com.antonromanov.arnote.sbdfvjbsdf.dto.rq.*;
+import com.antonromanov.arnote.sbdfvjbsdf.dto.rs.*;
 import com.antonromanov.arnote.exceptions.UserNotFoundException;
 import com.antonromanov.arnote.services.FinPlanService;
 import lombok.extern.slf4j.Slf4j;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/CreditRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n/**\n * DTO для добавления нового кредита\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class CreditRq {\n    private Integer startAmount; // Общая сумма кредита\n    private Integer fullPayPerMonth; // Общий платеж по кредиту\n    private Integer realPayPerMonth; // Сколько уходит на погашение кредита после вычета процентов\n    private Date startDate; // Дата взятия кредита\n    private String desc; // Описание чтобы как-то отличать кредиты\n    private Long id;\n    private Integer slotNumber;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/CreditRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/CreditRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/CreditRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/CreditRq.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GetRemainsDetailInfoRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\n\n/**\n * DTO для запроса деталки по остаткам.\n */\n@Data\n@AllArgsConstructor\npublic class GetRemainsDetailInfoRq {\n    private Integer month; // Месяц\n    private Integer year; // Год\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GetRemainsDetailInfoRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GetRemainsDetailInfoRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GetRemainsDetailInfoRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GetRemainsDetailInfoRq.java	
@@ -1,11 +1,8 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
-import lombok.Builder;
 import lombok.Data;
 
-import java.util.Date;
-
 /**
  * DTO для запроса деталки по остаткам.
  */
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/LoanByDateRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Date;\n\n/**\n * DTO для запроса кредита по дате.\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class LoanByDateRq {\n    private Date startDate; // Дата взятия кредита\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/LoanByDateRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/LoanByDateRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/LoanByDateRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/LoanByDateRq.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/Bot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot;\n\nimport com.antonromanov.arnote.bot.reciever.UpdateReceiver;\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.exceptions.UserNotFoundException;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.model.wish.Wish;\nimport com.antonromanov.arnote.repositoty.UsersRepo;\nimport com.antonromanov.arnote.services.MainService;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.env.Environment;\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\n@Slf4j\n@AllArgsConstructor\npublic class Bot extends TelegramLongPollingBot {\n\n    private final MainService dataService;\n    private final UsersRepo usersRepo;\n    private final Environment env;\n\n    @Override\n    public void onUpdateReceived(Update update) {\n\n        Message inMessage = getMessage(update);\n        try {\n            String arUser = env.getProperty(\"ar.user\");\n            ArNoteUser user = usersRepo.findByLogin(arUser).orElseThrow(UserNotFoundException::new);\n            log.info(\"=====================================================\");\n\n            UserData userData = UserData.getInstance();\n            UpdateReceiver updateReceiver = new UpdateReceiver();\n            List<PartialBotApiMethod<? extends Serializable>> messagesToSend = updateReceiver.handle(update, dataService, user);\n\n            if (messagesToSend != null && !messagesToSend.isEmpty()) {\n                messagesToSend.forEach(response -> {\n                    if (response instanceof SendMessage) {\n                        vbdk((SendMessage) response, null);\n                        log.info(\"Текущий статус пользователя ?:   {}\", userData.getState());\n                    }\n                });\n            }\n\n\n        } catch (UnsupportedOperationException uoe) {\n            log.error(\"Вызвана операция, которая не предусмотрена для бота: {}\", uoe.getMessage());\n            Long chatId;\n            if (inMessage == null || inMessage.getChat().getId() == null) {\n                chatId = update.getCallbackQuery().getMessage().getChatId();\n            } else {\n                chatId = inMessage.getChat().getId();\n            }\n            fireMessage(chatId, \"Я не знаю такой команды\");\n        } catch (Exception e) {\n            log.error(\"Ошибка получения пользовательских данных: {}\", e.getMessage());\n        }\n    }\n\n    private Message getMessage(Update update) {\n        return update.getMessage();\n    }\n\n    public static SendMessage createMessageTemplate(String chatId) {\n\n        SendMessage outMessage = new SendMessage();\n        outMessage.enableMarkdownV2(true);\n        outMessage.setChatId(chatId);\n        return outMessage;\n    }\n\n    public static Boolean fvdvdrgvd(List<UserGlobalStateafdvsfdcvsedf> statesList, String query) {\n        return statesList.stream().anyMatch(r -> r.getCommand().stream().anyMatch(w->w.startsWith(query)));\n    }\n\n\n    public static List<InlineKeyboardButton> createInlineKeyboardButtonFromEnum(UserGlobalStateafdvsfdcvsedf state) {\n        return state.getReply().stream()\n                .map(v -> createInlineKeyboardButton(v.getText(), v.getCommand()))\n                .collect(Collectors.toList());\n    }\n\n\n    public static InlineKeyboardButton createInlineKeyboardButton(String text, String command) {\n        InlineKeyboardButton ib = new InlineKeyboardButton();\n        ib.setText(text);\n        ib.setCallbackData(command);\n        return ib;\n    }\n\n    private void vbdk(SendMessage msg, InlineKeyboardMarkup inlineKeyboardMarkup) {\n\n        try {\n            execute(msg);\n        } catch (TelegramApiException e) {\n            log.error(\"Ошибка отправки сообщения пользователю: {}\", e.getMessage());\n        }\n\n    }\n\n\n    private void fireMessage(Long chanelId, String msg) {\n        try {\n            SendMessage outMessage = new SendMessage();\n            outMessage.enableMarkdownV2(true);\n            outMessage.setChatId(chanelId.toString());\n            outMessage.setText(msg);\n            execute(outMessage);\n        } catch (TelegramApiException e) {\n            log.error(\"Ошибка отправки сообщения пользователю: {}\", e.getMessage());\n        }\n\n    }\n\n    @Override\n    public String getBotUsername() {\n        return \"arNote_bot\";\n    }\n\n    @Override\n    public String getBotToken() {\n        //  return \"649537355:AAHlbvfkZbqPHuNRUlRYCFsfIRPXuKXr0co\";\n        return \"5363458470:AAF_Bfytk7p9VMUHEuORXOG6UiP0XLL7GGE\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/Bot.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/Bot.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/Bot.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/Bot.java	
@@ -1,11 +1,10 @@
-package com.antonromanov.arnote.bot;
+package com.antonromanov.arnote.sbdfvjbsdf.bot;
 
-import com.antonromanov.arnote.bot.reciever.UpdateReceiver;
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.reciever.UpdateReceiver;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.exceptions.UserNotFoundException;
 import com.antonromanov.arnote.model.ArNoteUser;
-import com.antonromanov.arnote.model.wish.Wish;
 import com.antonromanov.arnote.repositoty.UsersRepo;
 import com.antonromanov.arnote.services.MainService;
 import lombok.AllArgsConstructor;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IdListRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Date;\n\n\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class IdListRq {\n    private Long id;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IdListRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IdListRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IdListRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/IdListRq.java	
@@ -1,12 +1,10 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.Date;
-
 
 @Data
 @Builder
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/SalaryRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\n\n/**\n * DTO с данными по ЗП для фронта.\n */\n\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SalaryRq {\n    private Long id;\n    private Integer fullSalary; // полная зарплата\n    private Integer residualSalary; // зарплата после трат различных\n    private Integer livingExpenses; // траты на жизнь: расходы на еду, транспорт и прочее\n    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\")\n    private Date salaryDate; // траты на жизнь: расходы на еду, транспорт и прочее\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/SalaryRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/SalaryRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/SalaryRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/SalaryRq.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonInclude;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GoalRq.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rq;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\n\n/**\n * DTO для добавления нового расхода / цели\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class GoalRq {\n    private String description; // Описание\n    private Integer price; // Стоимость\n    private Date startDate; //  Дата покупки\n    private Long repayment; // ID кредита по которому выполняется досрочное погашение.\n    private Long id; // ID расхода.\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GoalRq.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GoalRq.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GoalRq.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rq/GoalRq.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rq;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rq;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/test/com/antonromanov/arnote/ArNoteUtilsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote;\n\nimport com.antonromanov.arnote.model.investing.Bond;\nimport com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;\nimport com.antonromanov.arnote.model.investing.response.enums.StockExchange;\nimport com.antonromanov.arnote.repositoty.BondsRepo;\nimport com.antonromanov.arnote.repositoty.UsersRepo;\nimport com.antonromanov.arnote.services.investment.calc.CommonService;\nimport com.antonromanov.arnote.services.investment.requestservice.RequestService;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static com.antonromanov.arnote.utils.ArNoteUtils.prepareUrl;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\n\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ArNoteUtilsTest {\n\n    @Autowired\n    private RequestService client;\n\n    @Autowired\n    UsersRepo repo;\n\n    @Autowired\n    BondsRepo bondsRepo;\n\n    @Value(\"${moexUrl}\")\n    public String MOEX_URL;\n\n    @Autowired\n    private CommonService commonService;\n\n\n    @Test\n    public void testCalcFactory() {\n        Bond b = new Bond();\n        b.setStockExchange(StockExchange.MOEX);\n        assertNull(commonService.prepareCurrentPrice(b));\n    }\n\n    @Test\n    public void getUrlTest() {\n\n        Map<String, String> m = new HashMap<>();\n        m.put(\"p1\", \"1\");\n        m.put(\"p2\", \"2\");\n\n        String url = prepareUrl(MOEX_URL,\n                MoexRestTemplateOperation.GET_DIVS_MOEX,\n                client.serializeObjectToMVMap(MoexRestTemplateOperation.GET_LAST_QUOTE_MOEX.getRequestParams().convertByAdapter()), m);\n\n        String urlToCheck = url.substring(\"http://\".length() + MOEX_URL.length());\n\n\n        assertEquals(\"/securities/1/dividends.xml?iss.meta=off&iss.dp=comma&iss.\" +\n                \"only=securities&securities.columns=SECID,PREVADMITTEDQUOTE,COUPONPERIOD\", urlToCheck);\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/com/antonromanov/arnote/ArNoteUtilsTest.java b/src/test/com/antonromanov/arnote/ArNoteUtilsTest.java
--- a/src/test/com/antonromanov/arnote/ArNoteUtilsTest.java	
+++ b/src/test/com/antonromanov/arnote/ArNoteUtilsTest.java	
@@ -15,7 +15,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 import java.util.HashMap;
 import java.util.Map;
-import static com.antonromanov.arnote.utils.ArNoteUtils.prepareUrl;
+import static com.antonromanov.arnote.sbdfvjbsdf.utils.ArNoteUtils.prepareUrl;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/TimeSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonPrimitive;\nimport com.google.gson.JsonSerializationContext;\nimport com.google.gson.JsonSerializer;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\npublic class TimeSerializer implements JsonSerializer {\n\t@Override\n\tpublic JsonElement serialize(Object src, Type type, JsonSerializationContext jsonSerializationContext) {\n\n\t\tDateFormat format = new SimpleDateFormat(\"hh:mm:ss a\");\n\t\tString result = LocalTime.parse(format.format((java.sql.Time)src) , DateTimeFormatter.ofPattern(\"hh:mm:ss a\" , Locale.US))\n\t\t\t\t.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n\n\t\treturn new JsonPrimitive(result);\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/TimeSerializer.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/TimeSerializer.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/TimeSerializer.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/TimeSerializer.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import com.google.gson.JsonElement;
 import com.google.gson.JsonPrimitive;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/WishSearchQueryCriteriaConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport com.antonromanov.arnote.model.wish.SearchCriteria;\nimport lombok.Getter;\nimport javax.persistence.criteria.*;\nimport java.util.function.Consumer;\n\npublic class WishSearchQueryCriteriaConsumer implements Consumer<SearchCriteria> {\n\n\t@Getter\n\tprivate Predicate predicate;\n\tprivate CriteriaBuilder builder;\n\tprivate Root r;\n\n\tpublic WishSearchQueryCriteriaConsumer(Predicate predicate, CriteriaBuilder builder, Root r) {\n\t\tthis.predicate = predicate;\n\t\tthis.builder = builder;\n\t\tthis.r = r;\n\t}\n\n\n\n\t@Override\n\tpublic void accept(SearchCriteria param) {\n\n\t\tif (param.getOperation().equalsIgnoreCase(\">\")) {\n\t\t\tpredicate = builder.and(predicate, builder\n\t\t\t\t\t.greaterThanOrEqualTo(r.get(param.getKey()), param.getValue().toString()));\n\t\t} else if (param.getOperation().equalsIgnoreCase(\"<\")) {\n\t\t\tpredicate = builder.and(predicate, builder.lessThanOrEqualTo(\n\t\t\t\t\tr.get(param.getKey()), param.getValue().toString()));\n\t\t} else if (param.getOperation().equalsIgnoreCase(\":\")) {\n\t\t\tif (r.get(param.getKey()).getJavaType() == String.class) {\n\t\t\t\tpredicate = builder.and(predicate, builder.like(\n\t\t\t\t\t\tr.get(param.getKey()), \"%\" + param.getValue() + \"%\"));\n\t\t\t} else {\n\t\t\t\tpredicate = builder.and(predicate, builder.equal(\n\t\t\t\t\t\tr.get(param.getKey()), param.getValue()));\n\t\t\t}\n\t\t}\n\n\n\t}\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/WishSearchQueryCriteriaConsumer.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/WishSearchQueryCriteriaConsumer.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/WishSearchQueryCriteriaConsumer.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/WishSearchQueryCriteriaConsumer.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import com.antonromanov.arnote.model.wish.SearchCriteria;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/AopService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport com.antonromanov.arnote.model.LocalUser;\nimport com.antonromanov.arnote.repositoty.UsersRepo;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport java.security.Principal;\nimport java.time.LocalDateTime;\nimport static com.antonromanov.arnote.utils.ArNoteUtils.defineUserActionByMethodSignature;\n\n@Aspect\n@Component\npublic class AopService {\n\n\t@Autowired\n\tUsersRepo usersRepo;\n\n\t@Before(\"execution(* com.antonromanov.arnote.controller.MainRestController.*(..)) && args(principal,..)\")\n\tpublic void beforeAdvice(JoinPoint joinPoint, Principal principal) {\n\n\t\tif (principal != null) {\n\t\t\tif (usersRepo.findByLogin(principal.getName()).isPresent()) {\n\t\t\t\tArNoteUser localUser = usersRepo.findByLogin(principal.getName()).get();\n\t\t\t\tlocalUser.setLastOperation(defineUserActionByMethodSignature(joinPoint.getSignature()));\n\t\t\t\tlocalUser.setLastOperationTime(LocalDateTime.now());\n\t\t\t\tusersRepo.save(localUser);\n\t\t\t}\n\t\t}\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/AopService.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/AopService.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/AopService.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/AopService.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import com.antonromanov.arnote.model.LocalUser;
 import com.antonromanov.arnote.repositoty.UsersRepo;
@@ -9,7 +9,7 @@
 import org.springframework.stereotype.Component;
 import java.security.Principal;
 import java.time.LocalDateTime;
-import static com.antonromanov.arnote.utils.ArNoteUtils.defineUserActionByMethodSignature;
+import static com.antonromanov.arnote.sbdfvjbsdf.utils.ArNoteUtils.defineUserActionByMethodSignature;
 
 @Aspect
 @Component
@@ -18,7 +18,7 @@
 	@Autowired
 	UsersRepo usersRepo;
 
-	@Before("execution(* com.antonromanov.arnote.controller.MainRestController.*(..)) && args(principal,..)")
+	@Before("execution(* com.antonromanov.arnote.sbdfvjbsdf.controller.MainRestController.*(..)) && args(principal,..)")
 	public void beforeAdvice(JoinPoint joinPoint, Principal principal) {
 
 		if (principal != null) {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/MyPair.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class MyPair {\nprivate String year;\nprivate String month;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/MyPair.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/MyPair.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/MyPair.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/MyPair.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ControllerBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport com.antonromanov.arnote.exceptions.JsonNullException;\nimport com.antonromanov.arnote.exceptions.JsonParseException;\nimport com.antonromanov.arnote.exceptions.SaveNewWishException;\nimport com.antonromanov.arnote.exceptions.enums.ErrorCodes;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.*;\nimport org.springframework.http.server.ServletServerHttpResponse;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.security.Principal;\n\n@Slf4j\npublic class ControllerBase { //todo: Юзера то лучше здесь один раз определить\n\n    protected <T, E> T $do(SomeProcess<T, E> process, E s, Principal user, ArNoteUtils.OperationType operationType, HttpServletResponse response) {\n        try {\n            return process.aplly(s);\n        } catch (Exception ex) {\n            log.error(ex.getMessage());\n            prepareError(ex, response);\n            return null;\n        }\n    }\n\n    protected ResponseEntity<String> $prepareResponse(String responseBody) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        headers.setCacheControl(\"no-cache\");\n        ResponseEntity<String> responseEntity = new ResponseEntity<String>(responseBody, headers, HttpStatus.OK);\n        return responseEntity;\n    }\n\n    protected ResponseEntity<String> $prepareBadResponse(String responseBody) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        headers.setCacheControl(\"no-cache\");\n\n        ResponseEntity<String> responseEntity = new ResponseEntity<String>(responseBody, headers, HttpStatus.BAD_REQUEST);\n        log.error(\"RESPONSE: \" + responseEntity.toString());\n        return responseEntity;\n    }\n\n    protected ResponseEntity<String> $prepareNoDataYetErrorResponse(Boolean switcher) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        headers.setCacheControl(\"no-cache\");\n\n        ResponseEntity<String> responseEntity;\n\n        if (switcher) {\n            responseEntity = new ResponseEntity<String>(\"ERR-01\", headers, HttpStatus.BAD_REQUEST);\n        } else {\n            responseEntity = new ResponseEntity<String>(\"ERR-02\", headers, HttpStatus.BAD_REQUEST);\n        }\n        //\tLOGGER.info(\"RESPONSE: \" + responseEntity.toString());\n        return responseEntity;\n    }\n\n\n    public static void prepareError(Exception ex, HttpOutputMessage outputMessage) {\n        prepareError(ex, ((ServletServerHttpResponse) outputMessage).getServletResponse());\n    }\n\n    private static void prepareError(Exception ex, HttpServletResponse response) {\n        //\tLOGGER.error(ex.getMessage(),ex);\n        response.setStatus(520);\n\n        if (ex instanceof SaveNewWishException)\n            response.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n        if (ex instanceof JsonParseException || ex instanceof JsonNullException)\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n\n        response.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\n        try (PrintWriter pw = response.getWriter()) {\n            pw.write(ex.getMessage() == null ? \"Ошибка сохранения нового желания! \" : ex.getMessage());\n        } catch (IOException ioe) {\n            //\t\tLOGGER.error(\"Не могу записать ошибку в Response\", ex);\n        }\n    }\n\n\n    protected interface SomeProcess<T, E> {\n        T aplly(E req) throws Exception;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ControllerBase.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ControllerBase.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ControllerBase.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ControllerBase.java	
@@ -1,9 +1,8 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import com.antonromanov.arnote.exceptions.JsonNullException;
 import com.antonromanov.arnote.exceptions.JsonParseException;
 import com.antonromanov.arnote.exceptions.SaveNewWishException;
-import com.antonromanov.arnote.exceptions.enums.ErrorCodes;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.http.*;
 import org.springframework.http.server.ServletServerHttpResponse;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response;\n\nimport lombok.Builder;\nimport lombok.Getter;\n\n@Builder\npublic class WishResponse {\n\n    @Getter\n    private final long id;\n    @Getter\n    private final String wish;\n    @Getter\n    private final Integer price;\n    private final Integer priority;\n    private final Boolean ac;\n    private final String description;\n    private final String url;\n    private final Integer priorityGroup;\n    private final Integer priorityGroupOrder;\n    private final String month;\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishResponse.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishResponse.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishResponse.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishResponse.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.response;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response;
 
 import lombok.Builder;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishListResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response;\n\nimport com.antonromanov.arnote.entity.Wish;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * DTO со списком желаний, который отдаем на фронт.\n */\n@Data\n@Builder\npublic class WishListResponse {\n    private List<Wish> list;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishListResponse.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishListResponse.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishListResponse.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/WishListResponse.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.response;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response;
 
 import com.antonromanov.arnote.entity.Wish;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/ListOfMonthsResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response.monthgroupping;\n\nimport com.antonromanov.arnote.dto.response.monthgroupping.GroupOfWishesForOneMonth;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * Response-список месяцов с желаниями внутри.\n */\n@Data\n@Builder\npublic class ListOfMonthsResponse {\n    private List<GroupOfWishesForOneMonth> list;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/ListOfMonthsResponse.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/ListOfMonthsResponse.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/ListOfMonthsResponse.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/ListOfMonthsResponse.java	
@@ -1,6 +1,5 @@
-package com.antonromanov.arnote.dto.response.monthgroupping;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response.monthgroupping;
 
-import com.antonromanov.arnote.dto.response.monthgroupping.GroupOfWishesForOneMonth;
 import lombok.Builder;
 import lombok.Data;
 import java.util.List;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/GroupOfWishesForOneMonth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.response.monthgroupping;\n\nimport com.antonromanov.arnote.dto.response.WishResponse;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n\n/**\n * Группа желаний в рамках одного месяца.\n */\n@Builder\n@Data\npublic class GroupOfWishesForOneMonth {\n\n    private List<WishResponse> wishList;\n    private String monthName;\n    private String year;\n    private int monthNumber;\n    private int colspan;\n    private int sum;\n    private boolean overflow;\n    private String colorClass;\n    private boolean expanded;\n    private int balance; // набегающий баланс\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/GroupOfWishesForOneMonth.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/GroupOfWishesForOneMonth.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/GroupOfWishesForOneMonth.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/response/monthgroupping/GroupOfWishesForOneMonth.java	
@@ -1,6 +1,6 @@
-package com.antonromanov.arnote.dto.response.monthgroupping;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.response.monthgroupping;
 
-import com.antonromanov.arnote.dto.response.WishResponse;
+import com.antonromanov.arnote.sbdfvjbsdf.dto.response.WishResponse;
 import lombok.Builder;
 import lombok.Data;
 import java.util.List;
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>ТЕСТ ХУЕСТ БЛЯТЬ\n\n\n# arNote\n1. Сервис хранения желаний, планирования трат.\n2. Сервис анализа инвестиций\n3. Сервис финансового планирования\n\n# Сервис хранения желаний\nДоступен в сайдбаре в пункте \"Список желаний\". Предоставляет возможность добавления желаний (они же  - цели, финансовые планы, хотелки). Добавление организовано для каждого конкретного пользователя. Желание представляет собой финансовую цель с наименованием, подробным описанием, ссылкой URL, где можно посмотреть или купить, стоимостью и приоритетом. Желания представлены в общей таблице. Можно фильтровать по приоритету (Первичный или общий) и сортировать по цене или имени. Желания можно удалять и редактировать. \nСуществует возможность задать зарплату (причем задается и зарплата и реальная сумма, сколько пользователь может тратить в месяц) и тем самым получить расчет, сколько времени потребуется на реализацию всех задач / приоритетных.\nТак же в меню фильтрация добавлен отдельный пункт \"помесячная группировка\". Этот пункт позволяет задать альтернативную группировку, с помощью которой система сортирует желания по месяцам. Можно двигать желания туда-сюда и понимать, сколько всего в том или ином месяце вы собираетесь потратить. \n\n# Сервис анализа инвестиций \nСервис, который я выкатил в прод только 10.02.2021. Сервис \"ходит\" с помощью REST-запросов в API Московской биржи и буржуйские API (AlphaAdvantag, Yahoo), запрашивает оттуда все доступные данные: котировки акции с промежутком 15 минут, описание бумаги, купоны, дивиденды, исторические данные по годам. Можно добавлять бумаги по тикеру, добавлять даты и объем покупки. После чего можно мониторить рост бумаги, прогнозировать потребные затраты в зависимости от текущего дохода и желаемого, получать календарь ближайших выплат. \n \n\n# Долгосрочное планирование бюджетов и трат\nСервис, который позволяет планировать сроки выплат кредитов и рассчитывать свои финансовые планы. Грубо говоря - сколько лет понадобится на реализацию тех или иных личных проектов с учетом каждодневных трат, вашей зарплаты и платежам по кредитам.\n\n\n# URL сервиса\nhttp://84.201.163.22:8080/\n\n# Запуск на проде\n-Dspring.profiles.active=prod\n\n# Сборка на локале\n ~/Maven/bin/mvn package -P local\n\n# Что сделали:\n* Теперь если выбрана дата по которой нет продаж - выходной или праздник - бумагу добавить нельзя.\n* Еще раз проверить, что точно работает изменение по месяацам\n\n\n# Баги\n\n## Максимальный приоритет:\n\n* Я хочу менять размер выплат по кредиту после досрочных погашений\n* Большой РЕФАКТОРИНГ!\n* Опять не работает изменение помесячного приоритета\n* Тесты для изменения помесячного приоритета\n* Проверить кейс - бумага была в Плане, а я решил ее купить - как онО отыграет?\n* НоваяТиньковскаяДельта - для иностранных бумаг\n* Опять при протухании токена, если идешь на какое-нибудь /finplaning ни фига не открывается\n* Подключить Бинанс АПИ\n* ТЕЛЕГРАМ-БОТ: сохранять режим отображения (Мобильный / Десктоп)\n* ТЕЛЕГРАМ-БОТ: Фин-Планы\n* ТЕЛЕГРАМ-БОТ: Месячный приоритет\n* ТЕЛЕГРАМ-БОТ: Поиск желаний\n* ТЕЛЕГРАМ-БОТ: Отображение всех желаний\n* ТЕЛЕГРАМ-БОТ: URL и Дескрипшн в редактирование желаний\n* ТЕЛЕГРАМ-БОТ: Редактирование через Кнопки (CallBacks + LayOuts)\n* getClosePositionForTomorrow - в ArNoteUtils - а если вчера было воскресенье?????\n* Отчеты и структура портфеля по инвестированию(типа каких бумаг больше - акций или облигаций)\n* Если вместо \".\" указать \",\" в сумме при добавлении бумаги - запрос валится. Нужно валидировать это.\n* Подсчет дельты для наших и иностранных бумаг - может унифицировать и вынести в Утилс?\n* Календарь покупок с фильтром / поиском по бумагам\n* Если я бумагу удаляю, покупки по ней тоже удаляются? Может быть, сделать статус (ПРОДАНА?)\n* Нужно продумать комментарии к бумаге и как отдельно выделять бумаги, который я коплю на налог (цвет, флажк, группы?)\n* Почему-то при поиске бумаги делается 2 одинаковых запроса к альфа-адвантедж \n* Место, где я стучусь в буржуйские АПИ и если они не отвечают, возвращаю null - не красиво сделано. Надо порефакторить, подумать как исправить. Может быть, сделать типа запрос-пинг. И если он вернул false, то просто не дергать все остальные запросы буржуйские.\n* Обновить данные по бумагам\n* Вообще надо решить вопрос со столбцами Минимальный Лот / Куплено. Например для ПЛАН не нужно показывать сколько куплено. Это путает. Нужно подумать как это лучше сделать.\n* Когда стучишься из под корпоративной сети, он не может достучаться до Яху - нужен серт. И валится весь консолидированный запрос. Такого быть не должно. Такие бумаги по которым запрос свалился надо уметь просто пропускать.\n* Вот я добавляю продажу по бумаге. А в какой валюте сумма?????\n* Уже нужен фильтр/поиск по бумагам\n* Я хочу видеть формулу расчета дельты прямо на фронте\n* Нужно убрать доступы к БД из Гита. Сменить пароли в удаленной БД. Локальные все эти пароли, адреса хранить на локальной машине только.\n* Свечи с буржуйских сайтов\n* Я хочу либо отключать пока предыдущих лет в Фин-планах, либо регулировать диапазон\n\n\n## Ближайшие срочные мелкие косяки и баги:\n\n* Я хочу видеть баланс портфеля при работе с бумагами в основном окне (сколько куплено, динамика)\n* Нужно будет сделать где-то на фронте кнопочку, по которой отображается подсвет формул расчета\n* Мое самописное кеширование попробовать запихать в аннотацию \n* В классе com.antonromanov.arnote.model.investing.response.DeltaRs (+ И НА ФРОНТЕ!) переименовать поля deltaInRubles, tinkoffDelta, tinkoffDeltaPercent согласно их реально назначения\n* Кнопка \"Доходы\" должна быть заблочена если идет отрицательная прибыль или купленых бумаг нет\n* С ArNoteUtils надо что-то делать - там под 1000 строк уже\n* Календарь заблочен должен быть если нет купленых бумаг\n* Я хочу посмотреть деталку по бумаге и свои покупки по ней.\n* Бага: я решил добавить бумагу. Произошел поиск на фронте, заполнился список, а потом второй раз я захожу добавлять новую бумагу - а там опять этот же заполненный список. Его надо чистить!\n* Я хочу чтобы тот факт, что фильтр включен по бумагам как то отображалось на фронте\n* возможно есть какой-то компонент с драг-энд-дропом. Может его использовать в планировании по месяцам? Так же туда может быть добавить филтры и поиск, управление сортировкой? Ну и вообще это надо комплексно переделывать. Сейчас этим пользоваться откровенно не удобно\n* Я хочу чтобы где-то (подумать как лучше) отображалось: сколько у меня валюты / сколько акций / сколько облиг / сколько ETF\n* Я хочу, чтобы мы умели точно определять отрицательный баланс портфеля и это как как-то отображалось каким-то алармом и не работал при этом прогноз дохода\n* Я хочу видеть курс бакса в основном окне\n* По ETF надо не 0 отображать в дивах, а что-то другое. И соответственно с бека возможно не надо этот блок передавать вообще?\n* Я хочу видеть отчеты. Например, такие: диаграмма состава буржуйских бумаг к российским, диаграмма сколько процентов у меня акций, сколько облиг, сколько ETF, баланс портфеля по годам и месяцам.\n* Слишком долго грузятся инвестиции. Надо пихать в поток \n* Группы\n* ФРОНТ: При изменении кол-ва записей на странице любое добавление рушит табличку - она приходит пустой.\n* Прогресс бар при загрузке бумаг\n* Графики бумаг\n* Статус кеша при загрузке бумаг\n* Статус кешей/мап при подсчете консолидированной таблице по фин-планам на фронте\n* Почему я все время должен отключать поиск?\n* Все модалБоксы на фронте почикать\n* Все на фронте на асинхрон\n* Консолидированная табла по фин-планам в потоке с прогрессбаром на фронте\n* Надпись ArNote в заголовке для мобилки убрать - не лезет\n* Не пишется дата создания при создании желания\n* Разные помники для Прома и Дева\n* Возможность переключения валюты текущей (для все бумаг и всех показателей должна быть одна валюта - все рассчеты в одной валюте)\n* Разобраться с фигней, когда переходишь на страничку - а она не отображается (выявить причины: не поднялся сервис, протух токен)\n* Вынести пользовательские методы в отдельный контроллер и сделать отдельный метод для сохранения режима получения, отдельный для получения\n* Придумать и написать тест для перемещения\n* Сделать бейдж NEW в помесячной группировке для только что добавленных желаний\n* Сделать сохранение фильтрации и сортировки для помесячной группировки\n* Сделать поиск в помесячной группировке\n* Надо убрать РеспонсЭнтити и возвращать нормальные ДТО-объекты, а не этот пиздец\n* Сделать какой-то учет текущей суммы\n* Перестали сохранять последнюю операцию. Почему?\n* Почему бы не кешировать поиск (речь о ценных бамагах и вкладке Инвестиции)(подумать как)? И вообще подумать на счет поиска. Варианты: \n\n1) С кнопкой.\n    1.1 самый тупой - кнопка внизу\n    1.2 посложнее - ставим новый Ангуляр и пробуем новые поля с кнопкой\n\n\n2) кеш поиска (поисковых запросов) + блочим поле пока ответ не придет / либо очередь запросов.\n* Для инвестиций: подумать над отображением графиков\n* Для инвестиций: подумать над добавлением алармов (и сбросов их в инсту)\n* Для инвестиций: подумать над добавлением алармов с информацией об удачном времени покупки / продажи, например о том, что бумага идет к ее историческому минимуму / перешла его, пробила новый (то же самое по максимуму). И не плохо было бы вообще показывать где-то исторический минимум / максимум. Например сделать деталку по бумаге.\n* Сделать отображение текущих режимов сортировки и фильтрации\n* Вынести вкладку помесячной группировки на сайдбар\n* Добавить вкладку групп (так же вынести в сайдбар)\n* Написать тесты\n* Сейчас мы считаем просто сколько вложили за все время и делим на купоны / рост / дивы за все время. А по хорошему надо считать или за прошлый год или вообще какую-то сложную логику по годам или вообще разный подсчет выдавать, например: всего / по последнему году / по среднему / по минимальному / по максимальному.\n* Прокинуть интерцепторы\n* Общий ЭксепшнХендлер\n* Сделать само-отключение поиска\n* Нормальный DNS для сайта\n* Показывать более развернутую статистику: реализованное и все такое\n* При щелчке на желании показывать в каком оно месяце при всех видах отображения\n* Надо организовать еще списки подсчетов с исключением определенных записей (типа микро-сметы)\n* Надо чтобы нельзя было добавлять одинаковые желания\n* Написать статью на AntonRomanov.com о сервисе\n* Починить фигню с тем что надо щелкнуть, чтобы табличка подгрузилась\n* Починить фигню с 401-й странице\n* Решить тему с протухающим токеном\n* Подсмотреть как сделан шедулинг проверки протухания токена с выводом алерта.\n* Фавикон\n* Выделение и перемещение по месяцам нескольких желаний\n* Кнопочки Реализовать / Удалить / Редактировать при нажатии на желание в помесячно-групповом режиме\n* Кнопочки \"Вернуться в табличный режим\" и \"Обновить\" заменить для мобилы\n* Избавиться от $Do и всего такого.\n* Провести общий большой рефакторинг\n* Пагинация\n* Фин-планы слишком долго отвечают. Надо разобраться почему?\n* Опять не работает поиск\n* Зачем в выдаче списка желаний для каждого желания блок user ????\n* По-хорошему надо хранить покупки в разных валютах. Вдруг курс как-то изменится. \n* Не добавляются буржуйские бумаги\n* Как быть - если ценник бумаги в баксах и нужно задать ценник на конкретную дату? В каких единицах я задаю на фронте?\n* Не запрашиваются цены бумаги по дате\n* Нужно сделать расчет для 120 000 в месяц, 200 000 руб.\n* TRCN - не нашли цену в LAST - берем откуда-то еще\n* При поиске на мобилке соседняя кнопка почему-то загорается то же красным?\n* Порешать автовыключение-режима поиска уже\n* Добавить мапстракт\n* Привести всю тему с ошибками, их перехватом и выдачей на фронт к одному виду по всему проекту\n* В календаре отображаются дивы однотипные по 4 раза. Одно и то же. Почему?\n* Менять версии в помнике, чтобы скрипт как-то умел их подхватывать и чтобы они в ГИТе отображались\n* Надо ходить в историю и смотреть какую самую раннюю дату можем запросить. И как-то блочить возможность запрашивать даты раньше на фронте.\n* Не влезающие описания и названия облигаций\n* Перенести код настроек Дженкинса сюда\n* Может добавление бумаги сделать на беке асинхронно? Типа если свалилось с ошибкой - какое-то время еще долбится\n* Если описание не удалось достать - сходить для буржуйской бумаги за описанием бумаги еще куда-нибудь\n* Проверить, что  у купонов / дивов в разделе доход (календарь) - туда  не попадает план. И в доходе тоже\n* Зачем нам грузить именно всю историю? Для чего?\n* Наверное, стоит научиться показывать прогресс загрузки данных. И в идеале надо сначала показать типа только тикеры, а потом в отдельном потоке\n   запускать подгрузку в кеш всех остальных данных, чтобы фронт опрашивал поток и он типа отвечал что сделано, какой процент и сколько еще\n   осталось, типа сколько бумаг уже загружено, сколько в кеше. Ну и по хорошему, надо типа посмотреть сколько в среднем занимает\n   этот процесс, чисто эмпирически и примерно показывать сколько осталось времени.\n\n\n## Что надо сделать еще:\n\n* Надо что-то делать с датой, если она пуста при реализации желания\n* Убрать крипторежим\n* Убрать ненужные кнопки не с админской странички. И выключать кнопки когда не нужно (в т.ч. в диалоговых окнах)\n* В фильтрацию добавить < / > какой-то суммы, и так же добавить фильтрацию по дате\n* Привести в порядок форму парсинга csv\n* Нормальный поиск (эвент при нажатии каждой клавиши)\n* Надо подумать на хера мне вообще MainService. Что он делает?\n* Подумать над реализации Калькулятора строительства, то есть отображения как в Гугл-Таблицах\n* Надо сделать чтобы можно было сметы сохранять (типа хранение таких как бы табличек, с разными ячейками, кодом ячейки, на который можно ссылаться, ну и так далее...)\n* Возможность просматривать реализованные желания и проводить какие-то операции с ними\n* Сделать обрезку wish-name в датагриде на фронте по длине и еще и наложить ограничения при добавлении по длине\n* Надо бы обработать на беке тему с протуханием токенов (примеры я видел)\n* Сделать чтобы уже при вводе логина при редактировании пользователя осуществлялся запрос при каждом нажатии и поиск - есть такой юзер или нет\n* Домик и сайдбар почистили, но теперь \"оно\" вообще никогда не отображается.\n* Надо все правки желаний утащить в один метод\n* В перспективе надо сделать такой дашбоард с виджетом статистики. Типа добавлено в этом месяце, реализовано, удалено, изменено, добавлено на сумму и так далее....\n* Почистить код на фронте. Там пиздец просто....\n* Группы\n* Разные помники для Прома и Дева\n* Возможность переключения валюты текущей (для все бумаг и всех показателей должна быть одна валюта - все рассчеты в одной валюте)\n* Разобраться с фигней, когда переходишь на страничку - а она не отображается (выявить причины: не поднялся сервис, протух токен)\n* Вынести пользовательские методы в отдельный контроллер и сделать отдельный метод для сохранения режима получения, отдельный для получения\n* Придумать и написать тест для перемещения\n* Сделать бейдж NEW в помесячной группировке для только что добавленных желаний\n* Сделать сохранение фильтрации и сортировки для помесячной группировки\n* Сделать поиск в помесячной группировке\n* Надо убрать РеспонсЭнтити и возвращать нормальные ДТО-объекты, а не этот пиздец\n* Сделать какой-то учет текущей суммы\n* Сделать отображение текущих режимов сортировки и фильтрации\n* Вынести вкладку помесячной группировки на сайдбар\n* Добавить вкладку групп (так же вынести в сайдбар)\n* Написать тесты\n* Сейчас мы считаем просто сколько вложили за все время и делим на купоны / рост / дивы за все время. А по хорошему надо считать или за прошлый год или вообще какую-то сложную логику по годам или вообще разный подсчет выдавать, например: всего / по последнему году / по среднему / по минимальному / по максимальному.\n* Прокинуть интерцепторы\n* Общий ЭксепшнХендлер\n* Сделать само-отключение поиска\n* Нормальный DNS для сайта\n* Показывать более развернутую статистику: реализованное и все такое\n* При щелчке на желании показывать в каком оно месяце при всех видах отображения\n* Надо организовать еще списки подсчетов с исключением определенных записей (типа микро-сметы)\n* Надо чтобы нельзя было добавлять одинаковые желания\n* Написать статью на AntonRomanov.com о сервисе\n* Починить фигню с тем что надо щелкнуть, чтобы табличка подгрузилась\n* Починить фигню с 401-й странице\n* Решить тему с протухающим токеном\n* Подсмотреть как сделан шедулинг проверки протухания токена с выводом алерта.\n* Фавикон\n* Выделение и перемещение по месяцам нескольких желаний\n* Кнопочки Реализовать / Удалить / Редактировать при нажатии на желание в помесячно-групповом режиме\n* Кнопочки \"Вернуться в табличный режим\" и \"Обновить\" заменить для мобилы\n* Избавиться от $Do и всего такого.\n\n## Отдаленные планы:\n\n* Ссылки\n* Публичные списки\n* Блог\n* Чат\n* Трекер багов с номерами, чтобы не хранить это в ридми\n* Разные списки\n* Файловое облако\n\n\n\n# Вспомогательные SQL:\n\n-- Сумма мелких и важных желаний без реализованных и архивных\nselect sum(p.price) from (select * from\n  arnote.wishes w WHERE\n  (w.id NOT IN (327, 311, 326, 328, 308, 373, 299, 300, 307, 335, 303, 259, 309, 333, 331, 313, 312, 330, 304))) p\nWHERE NOT p.archive AND (p.realized=false or p.realized ISNULL );\n\n\n-- Сумма реализованного\nselect sum(p.price) from (select * from\n  arnote.wishes w WHERE\n  (w.id NOT IN (311))) p\nWHERE NOT p.archive AND (p.realized=true);\n\n\n-- Реализованное\nselect * from (select * from\n  arnote.wishes w WHERE\n  (w.id NOT IN (311))) p\nWHERE NOT p.archive AND (p.realized=true);\n\n-- Сумма реализованного (за месяц)\nselect sum(p.price) from (select * from\n  arnote.wishes w WHERE\n  (w.id NOT IN (311) and extract(month FROM w.realization_date) = 10)) p\nWHERE NOT p.archive AND (p.realized=true);\n\n-- Вьюшка для удобного представления таблицы Желания\nCREATE VIEW wishes_view_not_realized AS\n  SELECT\n    w.id,\n    w.wish,\n    w.price,\n    w.priority,\n    w.priority_group\n  FROM arnote.public.wishes AS w WHERE w.user_id = 2 AND (w.realized  = FALSE OR w.realized ISNULL) ;\n\n\n# Скрипты\n\nСкрипты для сборки проекта в облаке:\n\n**arnote.sh**\n\n#!/bin/sh\n\n# Copy arNote jar script\n\n<pre><code>\necho  \"Удаляем директорию...\"  \nsudo rm -Rfv /home/admin/arnote  \necho \"Директория удалена. Создаем заново....\"  \nsudo mkdir /home/admin/arnote  \necho \"Директория создана успешно. Копируем файлы....\"  \nsudo cp -a /var/lib/jenkins/workspace/arNote/* /home/admin/arnote/  \necho \"Подменяем properties-файл для профиля prod\"  \nsudo cp -f /home/admin/application-prod.properties /home/admin/arnote/src/main/resources/  \necho \"Пытаемся вызвать Maven и собрать проект...\"  \nsudo mvn -f /home/admin/arnote/pom.xml clean package  \necho \"Скрипт выполнен!!!\"  \n</code></pre>  \n\n**arnote-wrapper.sh**\n\n#!/bin/sh\n# Restart arNote script-wrapper\n\n<pre><code>\necho  \" * * *   REBUILD AND RESTART ARNOTE SCRIPT   * * * \"  \necho \"Пытаемся остановить unit\"  \nsudo systemctl restart arnote  \necho \"Unit успешно остановлен\"  \necho \"Пытаемся запустить скрипт удаления старых файлов и пересборки сервиса Maven'ом\"  \n. /home/admin/arnote.sh  \n\necho \"========= !!! Скрипт-wrapper успешно выполнен!!! ===========\"  \necho \"Пытемся снова запустить Unit\"  \nsudo systemctl start arnote  \necho \"Unit успешно запущен!\"  \n</code></pre>\n\n\n \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	
+++ b/README.md	
@@ -1,6 +1,3 @@
-ТЕСТ ХУЕСТ БЛЯТЬ
-
-
 # arNote
 1. Сервис хранения желаний, планирования трат.
 2. Сервис анализа инвестиций
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n\n/**\n * Один месяц фин-планов\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FinPlanRs {\n    private String month; // текущий месяц\n    private Integer monthNumber; // номер текущего месяца\n    private Integer year; // текущий год\n    @JsonUnwrapped\n    private CreditListRs credits; // расклад по кредитам - разрешено не более 5-ти\n    private Integer allCredits; // сумма всех кредитов\n    private ConsolidatedPurchasesRs purchasePlan; // план покупок\n    private Integer remains; // доходы и остатки\n    private Boolean freeze; // это фриз?\n    private String color; // цвет строки\n    private String fontColor; // цвет шрифта\n    private String borderWidth; // толщина границы\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import lombok.AllArgsConstructor;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/JSONTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.gson.*;\n\npublic final class JSONTemplate {\n\tprivate static Gson gson = new Gson();\n\tprivate JsonObject json = new JsonObject();\n\n\tprivate JSONTemplate() {}\n\n\tpublic static JSONTemplate create() {\n\t\treturn new JSONTemplate();\n\t}\n\n\tpublic JSONTemplate add(String propertyName, String value) {\n\t\tjson.addProperty(propertyName, value);\n\t\treturn this;\n\t}\n\n\tpublic JSONTemplate add(String propertyName, Number value) {\n\t\tjson.addProperty(propertyName, value);\n\t\treturn this;\n\t}\n\n\tpublic JSONTemplate add(String propertyName, Boolean value) {\n\t\tjson.addProperty(propertyName, value);\n\t\treturn this;\n\t}\n\n\tpublic JSONTemplate add(String propertyName, Character value) {\n\t\tjson.addProperty(propertyName, value);\n\t\treturn this;\n\t}\n\n\tpublic JSONTemplate add(String propertyName, String... list) {\n\t\tJsonArray arr = new JsonArray();\n\t\tArrays.asList(list).stream().forEach(l -> arr.add(new JsonPrimitive(l)));\n\t\tjson.add(propertyName, arr);\n\t\treturn this;\n\t}\n\n\tpublic JsonObject getJson() {\n\t\treturn json;\n\t}\n\n\tpublic Gson getGson() {\n\t\treturn gson;\n\t}\n\n\tpublic static JsonObject fromString(String json) {\n\t\treturn gson.fromJson(json, JsonObject.class);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getJson().toString();\n\t}\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/JSONTemplate.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/JSONTemplate.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/JSONTemplate.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/JSONTemplate.java	
@@ -1,7 +1,6 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import java.util.Arrays;
-import java.util.List;
 
 import com.google.gson.*;
 
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/ClosedLoanTr.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.transfer;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n\n/**\n * Кредит закрытый\n *\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class ClosedLoanTr {\n    LocalDate startDate;\n    LocalDate closeDate; // дата закрытия\n    Integer loanNumber;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/ClosedLoanTr.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/ClosedLoanTr.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/ClosedLoanTr.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/ClosedLoanTr.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.transfer;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.transfer;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditDict.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport java.util.stream.Stream;\n\n@Getter\n@AllArgsConstructor\npublic enum CreditDict {\n    FIRST_CREDIT(1),\n    SECOND_CREDIT(2),\n    THIRD_CREDIT(3),\n    FOURTH_CREDIT(4),\n    FIFTH_CREDIT(5);\n\n    private final Integer num;\n\n   public static CreditDict getValByNumber(Integer number){\n       return Stream.of(CreditDict.values())\n               .filter(v->v.getNum().equals(number))\n               .findFirst()\n               .orElse(CreditDict.FIRST_CREDIT);\n   }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditDict.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditDict.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditDict.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditDict.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SingleOperationRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n/**\n * Ответ при одиночной операции с доходом\n */\n\n@Data\n@Builder\n@AllArgsConstructor\npublic class SingleOperationRs {\n    private Long id;\n    ResponseStatusRs status;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SingleOperationRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SingleOperationRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SingleOperationRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SingleOperationRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanTr.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.transfer;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n\n\n/**\n * Кредит\n *\n */\n\n@Data\n@Builder\n@AllArgsConstructor\npublic class LoanTr {\n    Long loanId;\n    Integer amount;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanTr.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanTr.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanTr.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanTr.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.transfer;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.transfer;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanListTr.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.transfer;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.ArrayList;\n\n\n/**\n * Список кредитов.\n *\n */\n\n@Data\n@Builder\n@AllArgsConstructor\npublic class LoanListTr {\n    private ArrayList<LoanTr> loanList;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanListTr.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanListTr.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanListTr.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/LoanListTr.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.transfer;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.transfer;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/CalculatedLoansTableTr.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.transfer;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.LinkedHashMap;\nimport java.util.List;\n\n/**\n * Консолидированное хранилище кредитов.\n *\n */\n\n@Data\n@Builder\n@AllArgsConstructor\npublic class CalculatedLoansTableTr {\n    List<LinkedHashMap<LocalDate, LoanListTr>> calculatedLoansList;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/CalculatedLoansTableTr.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/CalculatedLoansTableTr.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/CalculatedLoansTableTr.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/transfer/CalculatedLoansTableTr.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.transfer;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.transfer;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ArNoteUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.utils;\n\nimport com.antonromanov.arnote.entity.common.Salary;\nimport com.antonromanov.arnote.exceptions.*;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.model.investing.BondType;\nimport com.antonromanov.arnote.model.investing.InvestingFilterMode;\nimport com.antonromanov.arnote.model.investing.Purchase;\nimport com.antonromanov.arnote.model.investing.external.requests.ForeignRequests;\nimport com.antonromanov.arnote.model.investing.external.requests.MoexRestTemplateOperation;\nimport com.antonromanov.arnote.model.investing.response.BondRs;\nimport com.antonromanov.arnote.model.investing.response.FoundInstrumentRs;\nimport com.antonromanov.arnote.model.investing.response.enums.Currencies;\nimport com.antonromanov.arnote.model.investing.response.enums.StockExchange;\nimport com.antonromanov.arnote.model.investing.response.enums.TinkoffDeltaFinalValuesType;\nimport com.antonromanov.arnote.model.investing.response.xmlpart.common.CommonMoexDoc;\nimport com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexDocumentRs;\nimport com.antonromanov.arnote.model.investing.response.xmlpart.currentquote.MoexRowsRs;\nimport com.antonromanov.arnote.model.wish.Wish;\nimport com.antonromanov.arnote.model.wish.WishDTO;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.TypeAdapter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.aspectj.lang.Signature;\nimport org.joda.time.DateTime;\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.PasswordGenerator;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.util.UriComponents;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport java.io.*;\nimport java.net.URL;\nimport java.time.*;\nimport java.time.format.TextStyle;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\n\n/**\n * Тут собраны основные утилиты.\n */\n@Slf4j\npublic class ArNoteUtils { //todo: надо будет разнести отдельно wish-утилиты и инвест-утилиты\n\n\n    private final static String DIGITAL_PATTERN = \"([0-9]+)\";\n    private final static String XML_SPECIAL_DATE_PATTERN = \"^(0[1-9]|1[0-2]).(0[1-9]|[12][0-9]|3[01])$\";\n    private final static String WORK_CALENDAR_URL = \"http://xmlcalendar.ru/data/ru/%s/calendar.xml\";\n\n    public enum ParseType {ADD, EDIT}\n\n    public enum OperationType {\n        ADD_WISH, EDIT_WISH, DELETE_WISH, ADD_SALARY, GET_SUMS, GET_ALL_WISHES, GET_GROUP_WISHES,\n        UP_PRIORITY, DOWN_PRIORITY, UP_MONTH, DOWN_MONTH, LOGIN, TOGGLE_MODE, GET_USER_INFO,\n        UPDATE_USER, GET_CURRENT_USER, TOGGLE_USER_MODE\n    }\n\n    private static HashMap<Integer, String> colorClasses;\n\n\n    /**\n     * Определяет лежит ли указанное время между двумя заданными.\n     *\n     * @param candidate\n     * @param start\n     * @param end\n     * @return\n     */\n    public static boolean isBetween(LocalTime candidate, LocalTime start, LocalTime end) {\n        return !candidate.isBefore(start) && !candidate.isAfter(end);\n    }\n\n    /**\n     * Преобразование ключа для последующего поиска минимальной или максимальной даты.\n     *\n     * @param v\n     * @return\n     */\n    private static AbstractMap.SimpleEntry<DateTime, Double> mapKeyToFindMinOrMax(MoexRowsRs v) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\n        DateTime convertedDateTime = DateTime.parse(v.getEnd(), dateTimeFormatter);\n\n        return new AbstractMap.SimpleEntry<>(convertedDateTime, Double.parseDouble(v.getClose()));\n    }\n\n    /**\n     * Конвертим SQL-TIME в LOCALTIME\n     *\n     * @param time\n     * @return\n     */\n    public static LocalTime toLocalTime(java.sql.Time time) {\n        return time.toLocalTime();\n    }\n\n    /**\n     * Создаем gson builder\n     */\n    public static Gson createGsonBuilder() {\n\n        Gson gson = new GsonBuilder()\n                .serializeNulls()\n                .setDateFormat(\"dd/MM/yyyy\")\n                .registerTypeAdapter(java.sql.Time.class, new TimeSerializer())\n                .create();\n\n        return gson;\n    }\n\n    public static Gson createNullableGsonBuilder() {\n\n        Gson gson = new GsonBuilder().setDateFormat(\"dd/MM/yyyy\").create();\n        TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n        TypeAdapter<Date> safeDateTypeAdapter = dateTypeAdapter.nullSafe();\n\n        return new GsonBuilder()\n                .registerTypeAdapter(Date.class, safeDateTypeAdapter)\n                .create();\n    }\n\n    public static int getCurrentYear(Integer priority) {\n        Date date = new Date();\n        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n        int month = localDate.getMonthValue();\n        return (month + (priority - 1)) > 12 ? localDate.getYear() + 1 : localDate.getYear();\n    }\n\n\n    /**\n     * Конвертим пришедший json в нового пользака и валидируем\n     */\n    public static ArNoteUser parseJsonToUserAndValidate(String json) throws Exception {\n\n        if (JSONTemplate.fromString(json).getAsJsonObject().size() == 0) {\n            throw new JsonNullException(\"JSON - пустой\");\n        }\n\n        ArNoteUser localUser;\n        Date currentDate = new Date();\n\n\n        try {\n            // ------------------ Валидация -------------------------\n\n            if (isBlank(JSONTemplate.fromString(json).get(\"login\").getAsString())) throw new JsonParseException(json);\n\n            ArNoteUser.Role userRole;\n\n            if ((\"USER\".equals(JSONTemplate.fromString(json).get(\"userRole\").getAsString())) ||\n                    (\"ADMIN\".equals(JSONTemplate.fromString(json).get(\"userRole\").getAsString()))) {\n                userRole = ArNoteUser.Role.valueOf(JSONTemplate.fromString(json).get(\"userRole\").getAsString());\n            } else {\n                userRole = ArNoteUser.Role.USER;\n            }\n\n            if (JSONTemplate.fromString(json).get(\"userCryptoMode\") == null) throw new JsonParseException(json);\n            if (JSONTemplate.fromString(json).get(\"pwd\") == null) throw new JsonParseException(json);\n            if (JSONTemplate.fromString(json).get(\"email\") == null) throw new JsonParseException(json);\n            if (JSONTemplate.fromString(json).get(\"fullname\") == null) throw new JsonParseException(json);\n\n\n            localUser = new ArNoteUser(\n                    JSONTemplate.fromString(json).get(\"login\").getAsString(),\n                    userRole,\n                    JSONTemplate.fromString(json).get(\"pwd\").getAsString(),\n                    JSONTemplate.fromString(json).get(\"userCryptoMode\").getAsBoolean(),\n                    JSONTemplate.fromString(json).get(\"email\").getAsString(),\n                    JSONTemplate.fromString(json).get(\"fullname\").getAsString()\n            );\n\n            localUser.setCreationDate(currentDate);\n\n        } catch (Exception e) {\n            throw new JsonParseException(json);\n        }\n        return localUser;\n    }\n\n\n    /**\n     * Конвертим пришедший json в новую Salary\n     */\n    public static Salary parseJsonToSalary(String json, ArNoteUser user) throws Exception {\n\n        if (JSONTemplate.fromString(json).getAsJsonObject().size() == 0) {\n            throw new JsonNullException(\"JSON - пустой\");\n        }\n\n        Salary salary;\n        Date currentDate = new Date();\n\n        try {\n            salary = new Salary(\n                    JSONTemplate.fromString(json).get(\"fullsalary\").getAsInt(),\n                    JSONTemplate.fromString(json).get(\"residualSalary\").getAsInt()\n            );\n            salary.setSalarydate(currentDate);\n            LocalDateTime currentTimestamp = LocalDateTime.now();\n            salary.setSalaryTimeStamp(currentTimestamp);\n\n            salary.setUser(user);\n        } catch (Exception e) {\n            throw new JsonParseException(json);\n        }\n        return salary;\n    }\n\n    /**\n     * Конвертим пришедший json в новую Salary\n     */\n    public static Date localDateToDate(LocalDate date) {\n        ZoneId defaultZoneId = ZoneId.systemDefault();\n        return Date.from(date.atStartOfDay(defaultZoneId).toInstant());\n    }\n\n    public static java.sql.Date localDateToSqlDate(LocalDate date) {\n        return java.sql.Date.valueOf(date);\n    }\n\n\n    /**\n     * Конвертим пришедший json в новый WISH\n     */\n    public static Wish parseJsonToWish(ParseType parseType, String json, ArNoteUser user) throws Exception {\n\n        if (JSONTemplate.fromString(json).getAsJsonObject().size() == 0) {\n            throw new JsonNullException(\"JSON - пустой\");\n        }\n\n        Wish wishAfterParse;\n        Date currentDate = new Date();\n\n        try {\n\n            if (parseType == ParseType.EDIT) {\n                wishAfterParse = new Wish(\n                        JSONTemplate.fromString(json).get(\"id\").getAsLong(),\n                        JSONTemplate.fromString(json).get(\"wish\").getAsString(),\n                        JSONTemplate.fromString(json).get(\"price\").getAsInt(),\n                        JSONTemplate.fromString(json).get(\"priority\").getAsInt(),\n                        JSONTemplate.fromString(json).get(\"archive\").getAsBoolean(),\n                        JSONTemplate.fromString(json).get(\"description\").getAsString(),\n                        JSONTemplate.fromString(json).get(\"url\").getAsString(),\n                        user);\n\n                boolean realizedWish = JSONTemplate.fromString(json).get(\"realized\").getAsBoolean();\n                if (realizedWish) {\n                    wishAfterParse.setRealized(true);\n                    wishAfterParse.setRealizationDate(new Date());\n                }\n\n            } else {\n                wishAfterParse = new Wish(\n                        JSONTemplate.fromString(json).get(\"wish\").getAsString(),\n                        JSONTemplate.fromString(json).get(\"price\").getAsInt(),\n                        JSONTemplate.fromString(json).get(\"priority\").getAsInt(),\n                        JSONTemplate.fromString(json).get(\"archive\").getAsBoolean(),\n                        JSONTemplate.fromString(json).get(\"description\").getAsString(),\n                        JSONTemplate.fromString(json).get(\"url\").getAsString(),\n                        user\n                );\n\n                wishAfterParse.setCreationDate(currentDate);\n\n            }\n        } catch (Exception e) {\n            throw new JsonParseException(json);\n        }\n\n        return wishAfterParse;\n    }\n\n    public static String generateRandomPassword() {\n\n        List rules = Arrays.asList(new CharacterRule(EnglishCharacterData.UpperCase, 1),\n                new CharacterRule(EnglishCharacterData.LowerCase, 1), new CharacterRule(EnglishCharacterData.Digit, 1), new CharacterRule(EnglishCharacterData.Special, 1));\n\n        PasswordGenerator generator = new PasswordGenerator();\n        String password = generator.generatePassword(8, rules);\n        return password;\n    }\n\n    public static String computerMonth(Integer proirity) {\n        Date date = new Date();\n        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n        int month = localDate.getMonthValue();\n\n        Locale currentLocale = Locale.getDefault();\n        return Month.of((month + (proirity - 1)) > 12 ?\n                (month + (proirity - 1)) - 12 :\n                (month + (proirity - 1))).getDisplayName(TextStyle.FULL_STANDALONE, currentLocale);\n    }\n\n    public static String getMonthByNumber(Integer montNumber) {\n        Locale currentLocale = Locale.getDefault();\n        return Month.of((montNumber)).getDisplayName(TextStyle.FULL_STANDALONE, currentLocale);\n    }\n\n    public static int computerMonthNumber(Integer priority) {\n        Date date = new Date();\n        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n        int month = localDate.getMonthValue();\n        return Month.of((month + (priority - 1)) > 12 ? (month + (priority - 1)) - 12 : (month + (priority - 1))).getValue();\n    }\n\n    public static WishDTO prepareWishDTO(Wish w, int maxPrior) {\n        return WishDTO.builder()\n                .id(w.getId())\n                .wish(w.getWish())\n                .price(w.getPrice())\n                .priority(w.getPriority())\n                .ac(w.getAc())\n                .description(w.getDescription())\n                .url(w.getUrl())\n                .priorityGroup(w.getPriorityGroup())\n                .priorityGroupOrder(w.getPriorityGroupOrder())\n                .month(computerMonth(w.getPriorityGroup() == null ? maxPrior : w.getPriorityGroup()))\n                .build();\n    }\n\n    public static String getClassColorByMonth(int month, boolean overdraft) {\n\n        colorClasses = new HashMap<>();\n        colorClasses.put(1, \"label label-purple\");\n        colorClasses.put(2, \"label label-blue\");\n        colorClasses.put(3, \"label label-light-blue\");\n        colorClasses.put(4, \"label label-orange\");\n        colorClasses.put(5, \"label label-success\");\n        colorClasses.put(6, \"label label-purple\");\n        colorClasses.put(7, \"label label-blue\");\n        colorClasses.put(8, \"label label-light-blue\");\n        colorClasses.put(9, \"label label-orange\");\n        colorClasses.put(10, \"label label-success\");\n        colorClasses.put(11, \"label label-purple\");\n        colorClasses.put(12, \"label label-blue\");\n        colorClasses.put(13, \"label label-danger\");\n\n        if (!overdraft) {\n            if (month == 0) {\n                return colorClasses.get(1);\n            } else {\n                return colorClasses.get(month);\n            }\n        } else {\n            return colorClasses.get(13);\n        }\n    }\n\n    public static String defineUserActionByMethodSignature(Signature signature) {\n\n        String action = \"UNKNOWN\";\n\n        switch (signature.getName()) {\n            case \"getSumm\":\n                action = \"GET_SUM\";\n                break;\n            case \"findAll\":\n                action = \"GET_ALL\";\n                break;\n            case \"gelAllWishes\":\n                action = \"GET_ALL_WISHES\";\n                break;\n            case \"updateWish\":\n                action = \"UPDATE_WISH\";\n                break;\n            case \"addWish\":\n                action = \"ADD_NEW_WISH\";\n                break;\n            case \"deleteWish\":\n                action = \"DELETE_WISH\";\n                break;\n            case \"getLastSalary\":\n                action = \"GET_LAST_SALARY\";\n                break;\n            case \"addSalary\":\n                action = \"ADD_SALARY\";\n                break;\n            case \"parseCsv\":\n                action = \"PARSE_CSV_FILE\";\n                break;\n            case \"changePriority\":\n                action = \"CHANGE_WISH_PRIORITY\";\n                break;\n            case \"changeMonth\":\n                action = \"CHANGE_MONTH\";\n                break;\n            case \"addUser\":\n                action = \"ADD_NEW_USER\";\n                break;\n            case \"deleteUser\":\n                action = \"DELETE_USER\";\n                break;\n            case \"editUser\":\n                action = \"EDIT_USER\";\n                break;\n            case \"toggleUserMode\":\n                action = \"TOGGLE_USER_VIEW_MODE\";\n                break;\n            case \"getAllUsers\":\n                action = \"GET_ALL_USERS\";\n                break;\n            case \"getCurrentUser\":\n                action = \"GET_CURRENT_USER\";\n                break;\n            case \"returnUserPassword\":\n                action = \"RETURN_USER_PASSWORD\";\n                break;\n            case \"resetUserPasswordByAdmin\":\n                action = \"RETURN_USER_PASSWORD_BY_ADMIN\";\n                break;\n        }\n\n\n        return action;\n    }\n\n    public static boolean isInteger(String value) {\n        try {\n            Integer.parseInt(value);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    public static int monthNameToNumber(String value) {\n        int result = 0;\n        switch (value) {\n            case \"Январь\":\n                result = 1;\n                break;\n            case \"Февраль\":\n                result = 2;\n                break;\n            case \"Март\":\n                result = 3;\n                break;\n            case \"Апрель\":\n                result = 4;\n                break;\n            case \"Май\":\n                result = 5;\n                break;\n            case \"Июнь\":\n                result = 6;\n                break;\n            case \"Июль\":\n                result = 7;\n                break;\n            case \"Август\":\n                result = 8;\n                break;\n            case \"Сентябрь\":\n                result = 9;\n                break;\n            case \"Октябрь\":\n                result = 10;\n                break;\n            case \"Ноябрь\":\n                result = 11;\n                break;\n            case \"Декабрь\":\n                result = 12;\n                break;\n        }\n        return result;\n    }\n\n    private static Pattern getPattern(String regex) {\n        return Pattern.compile(regex, Pattern.MULTILINE);\n    }\n\n    private static Matcher getMatcher(Pattern pattern, String stringToMatch) {\n        return pattern.matcher(stringToMatch);\n    }\n\n\n    private static MyPair getYearAndMonth(String monthAndYear) {\n        final Matcher matcher = getMatcher(getPattern(DIGITAL_PATTERN), monthAndYear);\n        String year = \"\";\n        String month = \"\";\n\n        while (matcher.find()) {\n            year = matcher.group(1);\n            month = monthAndYear.substring(0, matcher.start(1)).trim();\n        }\n\n        return new MyPair(year, month);\n    }\n\n    public static int parseMonthAndCalculatePriority(String monthAndYear) throws BadIncomeParameter {\n\n        if (Pattern.compile(\"[А-Яа-я]+ [0-9]+\").matcher(monthAndYear).find()) {\n\n            String year = getYearAndMonth(monthAndYear).getYear();\n            String month = getYearAndMonth(monthAndYear).getMonth();\n\n            log.info(\"Обнаружена дата в русской раскладке\");\n            log.info(\"Год: {}\", year);\n            log.info(\"Месяц: {}\", month);\n\n            if (isBlank(year) && isInteger(year)) {\n                log.error(\"Ошибка парсинга даты: {}\", monthAndYear);\n                throw new BadIncomeParameter(BadIncomeParameter.ParameterKind.WRONG_MONTH);\n            } else {\n\n\n                return 1 + Math.toIntExact((ChronoUnit.MONTHS.between(LocalDate.now(), LocalDate.of(Integer.parseInt(year),\n                        monthNameToNumber(month), 1))));\n            }\n        } else if (Pattern.compile(\"[A-Za-z]+ [0-9]+\").matcher(monthAndYear).find()) {\n\n            String year = getYearAndMonth(monthAndYear).getYear();\n            String month = getYearAndMonth(monthAndYear).getMonth();\n\n            log.info(\"Обнаружена дата в английской раскладке\");\n            log.info(\"Год: {}\", year);\n            log.info(\"Месяц: {}\", month);\n\n            if (isBlank(year) && isInteger(year)) {\n                log.error(\"Ошибка парсинга даты: {}\", monthAndYear);\n                throw new BadIncomeParameter(BadIncomeParameter.ParameterKind.WRONG_MONTH);\n            } else {\n                // log.info(\"Ставим. Текущая дата + 1 мес: {}\", month);\n                return 1 + Math.toIntExact((ChronoUnit.MONTHS.between(LocalDate.now(), LocalDate.of(Integer.parseInt(year),\n                        monthNameToNumber(convertEnglishNames(month)), 1))));\n            }\n\n        } else {\n            throw new BadIncomeParameter(BadIncomeParameter.ParameterKind.WRONG_MONTH);\n        }\n    }\n\n    private static String convertEnglishNames(String monthAndYear) throws BadIncomeParameter {\n        String returnMonth = monthAndYear;\n        switch (monthAndYear) {\n            case \"January\":\n                returnMonth = \"Январь\";\n                break;\n            case \"February\":\n                returnMonth = \"Февраль\";\n                break;\n            case \"March\":\n                returnMonth = \"Март\";\n                break;\n            case \"April\":\n                returnMonth = \"Апрель\";\n                break;\n            case \"May\":\n                returnMonth = \"Май\";\n                break;\n            case \"June\":\n                returnMonth = \"Июнь\";\n                break;\n            case \"July\":\n                returnMonth = \"Июль\";\n                break;\n            case \"August\":\n                returnMonth = \"Август\";\n                break;\n            case \"September\":\n                returnMonth = \"Сентябрь\";\n                break;\n            case \"October\":\n                returnMonth = \"Октябрь\";\n                break;\n            case \"November\":\n                returnMonth = \"Ноябрь\";\n                break;\n            case \"December\":\n                returnMonth = \"Декабрь\";\n                break;\n            default:\n                throw new BadIncomeParameter(BadIncomeParameter.ParameterKind.WRONG_MONTH);\n        }\n        log.info(\"Перевели месяц на русский язык: {}\", returnMonth);\n        return returnMonth;\n    }\n\n    /**\n     * Сформировать специальный URL для запроса истории.\n     *\n     * @return\n     */\n    public static String prepareUrlForHistory(String urlBase, MoexRestTemplateOperation operation, MultiValueMap<String, String> queryParameters,\n                                              Map<String, String> pathParams, String dateFrom, String dateTill, int start) { //todo: почему тут пустой dateFrom ???? Зачем он тогда?\n\n\n        queryParameters.put(\"start\", Collections.singletonList(String.valueOf(start)));\n        queryParameters.put(\"till\", Collections.singletonList(dateTill));\n        queryParameters.put(\"from\", Collections.singletonList(dateFrom));\n\n        UriComponents uriComponents = UriComponentsBuilder\n                .newInstance()\n                .scheme(\"http\")\n                .host(urlBase)\n                .path(operation.getUrl())\n                .queryParams(queryParameters)\n                .buildAndExpand(pathParams);\n\n\n        return uriComponents.toString();\n    }\n\n    /**\n     * Сформировать специальный URL для запроса истории.\n     *\n     * @return\n     */\n    public static String prepareUrlForCandles(String urlBase, MoexRestTemplateOperation operation, MultiValueMap<String, String> queryParameters,\n                                              Map<String, String> pathParams, String dateFrom, String dateTill, int start) { //todo: объединить с prepareUrlForHistory\n\n\n        queryParameters.put(\"start\", Collections.singletonList(String.valueOf(start)));\n        queryParameters.put(\"till\", Collections.singletonList(dateTill));\n        queryParameters.put(\"from\", Collections.singletonList(dateFrom));\n\n        UriComponents uriComponents = UriComponentsBuilder\n                .newInstance()\n                .scheme(\"http\")\n                .host(urlBase)\n                .path(operation.getUrl())\n                .queryParams(queryParameters)\n                .buildAndExpand(pathParams);\n\n\n        return uriComponents.toString();\n    }\n\n\n    /**\n     * Предикат distinctBy для выкидывания одинаковых тикеров (дублей) при поиске.\n     *\n     * @param keyExtractor\n     * @param <T>\n     * @return\n     */\n    public static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {\n\n        Map<Object, Boolean> seen = new ConcurrentHashMap<>();\n        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n    }\n\n    /**\n     * Предикат для фильтра по ключевому слову при поиске инструмента.\n     *\n     * @return\n     */\n    public static Predicate<MoexRowsRs> filterByKeyword(String keyword) {\n        return s -> (s.getSecName().toLowerCase().contains(keyword.toLowerCase()) ||\n                s.getSecid().toLowerCase().contains(keyword.toLowerCase()));\n    }\n\n    /**\n     * Предикат для универсального фильтра.\n     *\n     * @return\n     */\n    public static Predicate<BondRs> complexPredicate(Map<String, String> investingFilterMode) {\n\n        List<Predicate<BondRs>> arr = investingFilterMode.values().stream()\n                .map(s -> InvestingFilterMode.valueOf(s).getFilter())\n                .collect(Collectors.toList());\n\n        if (arr.size() == 1) {\n            return arr.get(0);\n        } else {\n            return arr.stream().reduce(t -> true, Predicate::and);\n        }\n    }\n\n\n    /**\n     * Подготовить список инструментов\n     *\n     * @return\n     */\n    public static List<FoundInstrumentRs> prepareInstruments(List<MoexRowsRs> list, BondType type, StockExchange stockExchange) {\n        return list.stream()\n                .map(r -> FoundInstrumentRs.builder()\n                        .ticker(r.getSecid())\n                        .currencies(Currencies.search(r.getCurrencyId()))\n                        .description(r.getSecName())\n                        .stockExchange(stockExchange)\n                        .type(type)\n                        .build())\n                .filter(distinctByKey(FoundInstrumentRs::getTicker))\n                .limit(5)\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Подготовить URL для буржуйских API.\n     *\n     * @return\n     */\n    public static String prepareForeignUrl(ForeignRequests req, MultiValueMap<String, String> queryParameters,\n                                           Map<String, String> pathParams) {\n\n        UriComponents uriComponents = UriComponentsBuilder\n                .newInstance()\n                .scheme(req.getSchema().getSchema())\n                .host(req.getHost().getUrl())\n                .path(req.getConstantPart())\n                .queryParams(queryParameters)\n                .buildAndExpand(pathParams);\n\n        return uriComponents.toString();\n    }\n\n\n    /**\n     * Подставить ключевик в URL (например, тикер) и отдать готовый URL.\n     *\n     * @return\n     */\n    public static String prepareUrl(String urlBase, MoexRestTemplateOperation operation, MultiValueMap<String, String> queryParameters,\n                                    Map<String, String> pathParams) {\n\n        UriComponents uriComponents = UriComponentsBuilder\n                .newInstance()\n                .scheme(\"http\")\n                .host(urlBase)\n                .path(operation.getUrl())\n                .queryParams(queryParameters)\n                .buildAndExpand(pathParams);\n\n        return uriComponents.toString();\n    }\n\n    /**\n     * Преобразовать строковой epoch-mil в LocalDate.\n     *\n     * @return\n     */\n    public static LocalDate parseStringEpochMilDate(String epochMil) {\n        long milInLong = Long.parseLong(epochMil);\n        return LocalDate.from(LocalDateTime.ofInstant(Instant.ofEpochSecond(milInLong), ZoneId.systemDefault()));\n    }\n\n    /**\n     * Преобразовать epoch-mil и получить время.\n     *\n     * @return\n     */\n    public static LocalTime parseEpochMilToTime(Long epochMil) {\n        return LocalTime.from(LocalDateTime.ofInstant(Instant.ofEpochSecond(epochMil), ZoneId.systemDefault()));\n    }\n\n    /**\n     * Рассчитываем Тиньковские дельты.\n     *\n     * @return\n     */\n    public static Map<TinkoffDeltaFinalValuesType, Double> getTcsDeltaValues(List<Purchase> purchaseList,\n                                                                             Double currentStockPrice) {\n        Map<TinkoffDeltaFinalValuesType, Double> resultMap = new HashMap<>();\n        if (purchaseList != null && purchaseList.size() > 0) {\n            /*\n             * Считаем среднюю цену покупки (сумма цена * лот)\n             */\n            Double tkcAveragePurchasePrice = purchaseList.stream()\n                    .map(p -> p.getPrice() * p.getLot())\n                    .reduce((double) 0, Double::sum);\n\n            double tinkoffSameLotButNewPrice = (purchaseList.stream()\n                    .map(Purchase::getLot)\n                    .reduce(0, Integer::sum)) * currentStockPrice;\n\n            double tcsDeltaFinal = tinkoffSameLotButNewPrice - tkcAveragePurchasePrice;\n            resultMap.put(TinkoffDeltaFinalValuesType.DELTA_FINAL, tcsDeltaFinal);\n            resultMap.put(TinkoffDeltaFinalValuesType.DELTA_PERCENT, ((tcsDeltaFinal * 100) / tinkoffSameLotButNewPrice));\n        } else {\n            resultMap.put(TinkoffDeltaFinalValuesType.DELTA_FINAL, 0.0D);\n            resultMap.put(TinkoffDeltaFinalValuesType.DELTA_PERCENT, 0.0D);\n        }\n        return resultMap;\n    }\n\n    /**\n     * Вытаскиваем позицию (цену) закрытия бумаги за вчерашний день.\n     *\n     * @param doc\n     * @return\n     */\n    public static Double getClosePositionForTomorrow(MoexDocumentRs doc) {\n        if (doc.getData() != null && doc.getData().getRow().size() > 0) {\n\n            return doc.getData().getRow().stream()\n                    .map(v -> {\n\n                        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\n                        DateTime convertedDateTime = DateTime.parse(v.getEnd(), dateTimeFormatter);\n\n                        return new AbstractMap.SimpleEntry<>(convertedDateTime, Double.parseDouble(v.getClose()));\n                    })\n                    .filter(d -> jodaToJavaLocalDateTime(d.getKey()).toLocalDate().isBefore(LocalDate.now()))\n                    .max(Map.Entry.comparingByKey())\n                    .map(AbstractMap.SimpleEntry::getValue)\n                    .orElse(0D);\n\n        } else {\n            return (0d);\n        }\n    }\n\n    /**\n     * Рассчитываем дневную дельту из Свечей.\n     *\n     * @return\n     */\n    public static Double getDayDeltaFromCandle(MoexDocumentRs doc) {\n        if (doc.getData() != null && doc.getData().getRow().size() > 0) {\n\n            Double currentDayValue = doc.getData().getRow().stream()\n                    .map(ArNoteUtils::mapKeyToFindMinOrMax)\n                    .max(Map.Entry.comparingByKey())\n                    .map(AbstractMap.SimpleEntry::getValue)\n                    .orElse(0D);\n\n            return currentDayValue - getClosePositionForTomorrow(doc);\n        } else {\n            return (0d);\n        }\n    }\n\n    /**\n     * JodaTime to Java LocalDateTime.\n     *\n     * @param dateTime\n     * @return\n     */\n    public static LocalDateTime jodaToJavaLocalDateTime(DateTime dateTime) {\n        return Instant.ofEpochMilli(dateTime.getMillis())\n                .atZone(ZoneId.systemDefault())\n                .toLocalDateTime();\n\n\n    }\n\n    /**\n     * Взять покупки, кол-во купленных акций перемножить на стоимость и все это просуммировать.\n     *\n     * @param\n     * @return\n     */\n    public static Double getCostOfAllPurchasesOfSecurityInPortfolio(List<Purchase> purchaseList) {\n        return purchaseList.stream()\n                .map(v -> v.getLot() * v.getPrice())\n                .reduce(Double::sum)\n                .orElse(0.0D);\n\n\n    }\n\n\n    /**\n     * Рассчитываем  доход из Свечей по всем купленным бумагам.\n     * <p>\n     * Формула расчета ((Сt*CP)-(Sp[...]))\n     * где:\n     * <p>\n     * Ct - кол-во купленных бумаг (акций)\n     * CP - текущая цена\n     * Sp[...] - сумма покупок. То есть 10-апреля купили например 10 по цене 1.5, 11 мая купили 10 по цене 2.0,\n     * значит получаем: (10 * 1.5) + (10 * 2.0) = ....\n     *\n     * @return\n     */\n    public static Double getIncomeForAllPurchasesFromCandle(MoexDocumentRs candles, MoexDocumentRs history,\n                                                            Double currentStockPrice,\n                                                            List<Purchase> purchaseList) {\n        if (history.getData() != null && history.getData().getRow().size() > 0) {\n\n            Double currentDayValue = (candles.getData() == null || candles.getData().getRow() == null ||\n                    candles.getData().getRow().size() < 1) ? 0.0D : (candles.getData().getRow().stream()\n                    .map(ArNoteUtils::mapKeyToFindMinOrMax)\n                    .max(Map.Entry.comparingByKey())\n                    .map(AbstractMap.SimpleEntry::getValue)\n                    .orElse(currentStockPrice));\n\n            Integer instrumentsCount = purchaseList.stream()\n                    .map(Purchase::getLot)\n                    .reduce(Integer::sum)\n                    .orElse(0); // считаем кол-во бумаг в портфеле //todo: в отдельный метод в Утилс\n\n\n            return (currentDayValue * instrumentsCount) - getCostOfAllPurchasesOfSecurityInPortfolio(purchaseList);\n        } else {\n            return (0d);\n        }\n    }\n\n    /**\n     * Вариант метода getIncomeForAllPurchasesFromCandle, но считающий результат данного метода в процентах.\n     *\n     * Формула расчета:\n     *\n     * Сколько_процентов_составляет(Х от Y).\n     * где:\n     *\n     * X - результат метода getIncomeForAllPurchasesFromCandle\n     * Y - Sp[...]\n     * Sp[...] - сумма покупок. То есть 10-апреля купили например 10 по цене 1.5, 11 мая купили 10 по цене 2.0,\n     * значит получаем: (10 * 1.5) + (10 * 2.0) = ....\n     *\n     * @return\n     */\n    public static Double getIncomeForAllPurchasesInPercents(Double income, List<Purchase> purchaseList) {\n        if (income != 0) {\n\n            double coef = getCostOfAllPurchasesOfSecurityInPortfolio(purchaseList) / income;\n\n            return coef == 0 ? 0.0D : 100 / coef;\n        } else {\n            return 0.0D;\n        }\n    }\n\n\n    /**\n     * Достать ближайшую дату к заданной.\n     *\n     * @param dates\n     * @param currentDate\n     * @return\n     */\n    public static Long getNearestDate(Map<Long, LocalDate> dates, LocalDate currentDate) {\n\n        NavigableSet<LocalDate> datesInSet = new TreeSet<>(dates.values());\n        LocalDate minDate = datesInSet.lower(currentDate);\n\n        if (minDate != null) {\n            return dates.entrySet()\n                    .stream()\n                    .filter(w -> w.getValue().isEqual(minDate))\n                    .findFirst()\n                    .map(Map.Entry::getKey).orElse(0L);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Достаем курсы перевода валют.\n     *\n     * @return\n     */\n    public static double calculateCurrencyMultiplier(CommonMoexDoc doc, String currency) {\n\n        if (Currencies.getTransferByCodes(currency) == null) {\n            return (1d);\n        } else {\n            return Optional.ofNullable(doc)\n                    .map(MoexDocumentRs.class::cast)\n                    .orElseThrow(() -> new MoexXmlResponseMappingException(\"курсы валют\"))\n                    .getData()\n                    .getRow()\n                    .stream()\n                    .filter(curr -> curr.getCurrencyExchangeType().equals(Currencies.getTransferByCodes(currency)))\n                    .findFirst()\n                    .map(MoexRowsRs::getRate)\n                    .map(Double::valueOf)\n                    .orElse(Double.valueOf(\"1\"));\n        }\n    }\n\n    /**\n     * Грузим производственный календарь по ссылке.\n     *\n     * @return\n     */\n    public static Optional<com.antonromanov.arnote.model.common.Calendar> getWorkCalendar(Integer year) {\n\n        String path = String.format(WORK_CALENDAR_URL, year);\n\n        try (BufferedInputStream in = new BufferedInputStream(new URL(path).openStream())) {\n            return Optional.of(unmarshall(in));\n        } catch (IOException e) {\n            log.error(\"Не удалось, найти файл xml производственного календаря или спарсить его!\");\n            return Optional.empty();\n        }\n    }\n\n\n    /**\n     * Грузим производственный календарь по ссылке.\n     *\n     * @return\n     */\n    public static java.sql.Date getSqlDateFromXmlCalendar(String year, String xmlDate) {\n        if (isBlank(year) || isBlank(xmlDate)) {\n            return null;\n        } else {\n\n            Matcher matcher = getMatcher(getPattern(XML_SPECIAL_DATE_PATTERN), xmlDate);\n            LocalDate tempDate = null;\n            while (matcher.find()) {\n                 tempDate = LocalDate.of(Integer.parseInt(year),\n                        Integer.parseInt(matcher.group(1)),\n                        Integer.parseInt(matcher.group(2)));\n\n            }\n\n            return localDateToSqlDate(tempDate);\n        }\n    }\n\n    public static com.antonromanov.arnote.model.common.Calendar unmarshall(InputStream response) {\n        try {\n            JAXBContext jaxbContext = JAXBContext.newInstance(com.antonromanov.arnote.model.common.Calendar.class);\n            Unmarshaller un = jaxbContext.createUnmarshaller();\n            return (com.antonromanov.arnote.model.common.Calendar) un.unmarshal(response);\n        } catch (JAXBException e) {\n            log.error(\"Ошибка анмаршелинга: {}\", e.getMessage());\n            throw new MoexXmlResponseMarshalingException();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ArNoteUtils.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ArNoteUtils.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ArNoteUtils.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/utils/ArNoteUtils.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.utils;
+package com.antonromanov.arnote.sbdfvjbsdf.utils;
 
 import com.antonromanov.arnote.entity.common.Salary;
 import com.antonromanov.arnote.exceptions.*;
@@ -22,7 +22,6 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.TypeAdapter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang3.StringUtils;
 import org.aspectj.lang.Signature;
 import org.joda.time.DateTime;
 import org.passay.CharacterRule;
@@ -35,7 +34,6 @@
 import java.net.URL;
 import java.time.*;
 import java.time.format.TextStyle;
-import java.time.temporal.ChronoField;
 import java.time.temporal.ChronoUnit;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/DateIsPossibleRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\n\n\n/**\n * Информация, что на заданную дату возможно добавление бумаги\n *\n *\n */\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.ALWAYS)\npublic class DateIsPossibleRs {\n    Boolean isPossible;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/DateIsPossibleRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/DateIsPossibleRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/DateIsPossibleRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/DateIsPossibleRs.java	
@@ -1,12 +1,10 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 
-import java.util.Date;
-
 
 /**
  * Информация, что на заданную дату возможно добавление бумаги
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/FirstHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.userdata.DisplayType;\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static com.antonromanov.arnote.bot.Bot.*;\n\npublic class FirstHandler implements BotHandler {\n\n\n    private final UserGlobalStateafdvsfdcvsedf MESSAGE_HANDLER_STATE = UserGlobalStateafdvsfdcvsedf.START;\n    private final UserGlobalStateafdvsfdcvsedf CALLBACK_STATE = UserGlobalStateafdvsfdcvsedf.DOMAIN_SELECT;\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user) {\n\n        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();\n        inlineKeyboardMarkup.setKeyboard(Arrays.asList(createInlineKeyboardButtonFromEnum(MESSAGE_HANDLER_STATE)));\n        SendMessage messageToSend = createMessageTemplate(update.getMessage().getChatId().toString());\n        messageToSend.setText(MESSAGE_HANDLER_STATE.getReplyMessageText());\n        messageToSend.setReplyMarkup(inlineKeyboardMarkup);\n\n        return Arrays.asList(messageToSend);\n    }\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService, ArNoteUser user) {\n        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();\n        UserData userData = UserData.getInstance();\n        userData.setState(CALLBACK_STATE);\n\n        if (UserGlobalStateafdvsfdcvsedf.START.getReply().get(0).getCommand().equals(update.getCallbackQuery().getData())){\n            userData.setDisplayType(DisplayType.MOBILE);\n        } else{\n            userData.setDisplayType(DisplayType.DESKTOP);\n        }\n\n        inlineKeyboardMarkup.setKeyboard(Collections.singletonList(createInlineKeyboardButtonFromEnum(CALLBACK_STATE)));\n        SendMessage messageToSend = createMessageTemplate(update.getCallbackQuery().getMessage().getChatId().toString());\n        messageToSend.setText(CALLBACK_STATE.getReplyMessageText());\n        messageToSend.setReplyMarkup(inlineKeyboardMarkup);\n\n        return Collections.singletonList(messageToSend);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedBotState() {\n        return Collections.singletonList(MESSAGE_HANDLER_STATE);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery() {\n        return Collections.singletonList(CALLBACK_STATE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/FirstHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/FirstHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/FirstHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/FirstHandler.java	
@@ -1,8 +1,8 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.userdata.DisplayType;
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.DisplayType;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
@@ -13,7 +13,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import static com.antonromanov.arnote.bot.Bot.*;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.*;
 
 public class FirstHandler implements BotHandler {
 
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/EditWishHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.Update;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static com.antonromanov.arnote.bot.Bot.createMessageTemplate;\n\n\npublic class EditWishHandler implements BotHandler {\n\n    private final UserGlobalStateafdvsfdcvsedf MESSAGE_HANDLER_STATE = UserGlobalStateafdvsfdcvsedf.WISH_EDIT;\n\n\n    @Override //todo: когда пользак вводит id желания для редактирования нужно проверять что такое желание вообще есть и в случае если нет - выкидывать на начало с соответствующим сообщением\n    public List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user) {\n        UserData userData = UserData.getInstance();\n        Message msg = update.getMessage();\n\n        // todo: нужно вынести поиск по введенному тексту в зависимости от статуса в отдельный хендлер\n        if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_EDIT) { //todo: весь этот блок подумать как отрефакторить. Может паттерн какой применить\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRICE);\n            int wishId = Integer.parseInt(msg.getText());\n            userData.setWishToEdit(dataService.getWishById(wishId).get()); // todo: обработать этот кейс. Если не найдено - то стоп и выходим на /start\n            return printMessage(msg.getChatId().toString(),\n                    UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRICE.getReplyMessageText() +\n                            \" [\" + userData.getWishToEdit().getPrice() + \"]\"); // заменить на formatString %s\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRICE) {\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRIOR);\n            userData.getWishToEdit().setPrice(Integer.parseInt(msg.getText())); //todo: проверка что не пустое??? А проверка на число?\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRIOR.getReplyMessageText());\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRIOR) {\n            userData.getWishToEdit().setPriority(Integer.parseInt(msg.getText())); //todo: проверка что не пустое??? А проверка на число?\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DELETE);\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DELETE.getReplyMessageText());\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DELETE) {\n            userData.getWishToEdit().setAc(\"Y\".equals(msg.getText()));\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DONE);\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DONE.getReplyMessageText());\n       // } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DONE) {\n          //  return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.STOP.getReplyMessageText());\n        } else {\n\n            userData.getWishToEdit().setRealized(\"Y\".equals(msg.getText()));\n            userData.setState(UserGlobalStateafdvsfdcvsedf.STOP); //todo: поменять название UserGlobalStateafdvsfdcvsedf\n            dataService.saveWish(userData.getWishToEdit());\n            userData.clear();\n            String chatId = msg.getChatId().toString();\n            Long wishId = userData.getWishToEdit().getId();\n            String text = \"Изменили и сохранили желание с ID \" + wishId.toString();\n            return printMessage(chatId, text );\n        }\n    }\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService,\n                                                                            ArNoteUser user) {\n        UserData userData = UserData.getInstance();\n        userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_EDIT);\n        return printMessage(update.getCallbackQuery().getMessage().getChatId().toString(),\n                MESSAGE_HANDLER_STATE.getReplyMessageText());\n    }\n\n    private List<PartialBotApiMethod<? extends Serializable>> printMessage(String chatId, String text) {\n        SendMessage messageToSend = createMessageTemplate(chatId);\n        messageToSend.setText(text);\n        return Collections.singletonList(messageToSend);\n    }\n\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedBotState() {\n        return Arrays.asList(UserGlobalStateafdvsfdcvsedf.WISH_EDIT,\n                UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DONE,\n                UserGlobalStateafdvsfdcvsedf.WISH_EDIT_DELETE,\n                UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRICE,\n                UserGlobalStateafdvsfdcvsedf.WISH_EDIT_PRIOR);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery() {\n        return Collections.singletonList(MESSAGE_HANDLER_STATE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/EditWishHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/EditWishHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/EditWishHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/EditWishHandler.java	
@@ -1,7 +1,7 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
@@ -14,7 +14,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static com.antonromanov.arnote.bot.Bot.createMessageTemplate;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.createMessageTemplate;
 
 
 public class EditWishHandler implements BotHandler {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanListRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * Консолидированные фин.планы.\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FinPlanListRs {\n    private List<FinPlanRs> finPlans;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanListRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanListRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanListRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinPlanListRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/BotHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport java.io.Serializable;\nimport java.util.List;\n\npublic interface BotHandler {\n    List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user);\n    List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService, ArNoteUser user);\n    List<UserGlobalStateafdvsfdcvsedf> operatedBotState();\n    List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/BotHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/BotHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/BotHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/BotHandler.java	
@@ -1,6 +1,6 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoanRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n/**\n * DTO для выдачи списка кредитов на фронт.\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FullLoanRs {\n    private Long id;\n    private String description;\n    private Integer fullPayPerMonth; // Общий платеж по кредиту\n    private Integer realPayPerMonth; // Сколько уходит на погашение кредита после вычета процентов\n    private Date startDate; // Дата взятия кредита\n    private Integer startAmount; // Дата взятия кредита\n    private Integer number; // номер кредита\n\n    public static FullLoanRs $fromCredit(CreditRs loan){\n        return FullLoanRs.builder()\n                .startAmount(loan.getAmount())\n                .startDate(loan.getStartDate())\n                .realPayPerMonth(loan.getRealPayPerMonth())\n                .fullPayPerMonth(loan.getFullPayPerMonth())\n                .description(loan.getDescription())\n                .id(loan.getId())\n                .number(loan.getNumber())\n                .build();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoanRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoanRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoanRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoanRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/AddWishHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static com.antonromanov.arnote.bot.Bot.createMessageTemplate;\n\n\npublic class AddWishHandler implements BotHandler {\n\n    private final UserGlobalStateafdvsfdcvsedf MESSAGE_HANDLER_STATE = UserGlobalStateafdvsfdcvsedf.WISH_ADD;\n\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user) {\n        UserData userData = UserData.getInstance();\n        Message msg = update.getMessage();\n\n\n        // todo: нужно вынести поиск по введенному тексту в зависимости от статуса в отдельный хендлер\n        if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_ADD) { //todo: весь этот блок подумать как отрефакторить. Может паттерн какой применить\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRICE);\n            userData.getWish().setWish(msg.getText()); //todo: проверка что не пустое???\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRICE.getReplyMessageText());\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRICE) {\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_ADD_URL);\n            userData.getWish().setPrice(Integer.parseInt(msg.getText())); //todo: проверка что не пустое??? А проверка на число?\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_ADD_URL.getReplyMessageText());\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_ADD_URL) {\n            userData.getWish().setUrl(msg.getText());\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_ADD_DESC);\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_ADD_DESC.getReplyMessageText());\n        } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_ADD_DESC) {\n            userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRIOR);\n            userData.getWish().setDescription(msg.getText());\n            return printMessage(msg.getChatId().toString(), UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRIOR.getReplyMessageText());\n       // } else if (userData.getState() == UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRIOR) {\n        } else {\n            userData.setState(UserGlobalStateafdvsfdcvsedf.STOP);\n            userData.getWish().setPriority(Integer.parseInt(msg.getText())); //todo: проверка что не пустое??? А проверка на число?\n            userData.getWish().setUser(user);\n            long wishId = dataService.saveWish(userData.getWish()).getId();\n            userData.clear();\n            return printMessage(msg.getChatId().toString(), \"Сохранили желание с ID \" + wishId);\n        }\n    }\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService,\n                                                                            ArNoteUser user) {\n        UserData userData = UserData.getInstance();\n        userData.setState(UserGlobalStateafdvsfdcvsedf.WISH_ADD);\n        return printMessage(update.getCallbackQuery().getMessage().getChatId().toString(),\n                MESSAGE_HANDLER_STATE.getReplyMessageText());\n    }\n\n    private List<PartialBotApiMethod<? extends Serializable>> printMessage(String chatId, String text) {\n        SendMessage messageToSend = createMessageTemplate(chatId);\n        messageToSend.setText(text);\n        return Collections.singletonList(messageToSend);\n    }\n\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedBotState() {\n        return Arrays.asList(UserGlobalStateafdvsfdcvsedf.WISH_ADD,\n                UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRICE,\n                UserGlobalStateafdvsfdcvsedf.WISH_ADD_URL,\n                UserGlobalStateafdvsfdcvsedf.WISH_ADD_DESC,\n                UserGlobalStateafdvsfdcvsedf.WISH_ADD_PRIOR);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery() {\n        return Collections.singletonList(MESSAGE_HANDLER_STATE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/AddWishHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/AddWishHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/AddWishHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/AddWishHandler.java	
@@ -1,7 +1,7 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
@@ -12,7 +12,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import static com.antonromanov.arnote.bot.Bot.createMessageTemplate;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.createMessageTemplate;
 
 
 public class AddWishHandler implements BotHandler {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ConsolidatedPurchasesRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n *  План расходов\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class ConsolidatedPurchasesRs {\n    private String longDescription; // описание длинное\n    private String shortDescription; // описание короткое (20 символов)\n    private Integer price; // стоимость общая\n    private List<PurchasesRs> purchasePlan; // план покупок\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ConsolidatedPurchasesRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ConsolidatedPurchasesRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ConsolidatedPurchasesRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ConsolidatedPurchasesRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FreeLoanSlotsRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * DTO для выдачи свободных слотов по кредитам.\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FreeLoanSlotsRs {\n    private Integer allLoansCount; // всего кредитов\n    private List<Integer> openSlots; // открытые слоты - список номеров, куда можно вписаться.\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FreeLoanSlotsRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FreeLoanSlotsRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FreeLoanSlotsRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FreeLoanSlotsRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/prettytable/PrettyTablePrinter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.prettytable;\n\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.model.wish.Wish;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sk.PrettyTable;\nimport java.util.List;\n\npublic class PrettyTablePrinter {\n\n    public String prepareWishTable(List<Wish> wishList) {\n        PrettyTable table = new PrettyTable(\"ID\", \"Имя\", \"$\");\n        UserData userData = UserData.getInstance();\n        Integer maxWidth = userData.getDisplayType() == null ? 15 : userData.getDisplayType().getMaxWidth();\n\n        wishList.forEach(e -> table.addRow(String.valueOf(e.getId()),\n                StringUtils.abbreviate(String.valueOf(e.getWish()), maxWidth),\n                        String.valueOf(e.getPrice())));\n        return table.toString();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/prettytable/PrettyTablePrinter.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/prettytable/PrettyTablePrinter.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/prettytable/PrettyTablePrinter.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/prettytable/PrettyTablePrinter.java	
@@ -1,6 +1,6 @@
-package com.antonromanov.arnote.bot.prettytable;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.prettytable;
 
-import com.antonromanov.arnote.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
 import com.antonromanov.arnote.model.wish.Wish;
 import org.apache.commons.lang3.StringUtils;
 import org.sk.PrettyTable;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/PurchasesRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\nimport java.util.Map;\n\n/**\n *  План расходов\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class PurchasesRs {\n    private String description; // описание\n    private Integer price; // стоимость\n    private Long id; // id\n    private Long loanId; // id кредита, если это досрочное погашение\n    private Date startDate;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/PurchasesRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/PurchasesRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/PurchasesRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/PurchasesRs.java	
@@ -1,11 +1,10 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 
 import java.util.Date;
-import java.util.Map;
 
 /**
  *  План расходов
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishLstHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.prettytable.PrettyTablePrinter;\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.model.wish.Wish;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport static com.antonromanov.arnote.bot.Bot.createMessageTemplate;\n\n\npublic class WishLstHandler implements BotHandler {\n\n    private final UserGlobalStateafdvsfdcvsedf MESSAGE_HANDLER_STATE = UserGlobalStateafdvsfdcvsedf.WISH_LIST;\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user) {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService, ArNoteUser user) {\n        UserData userData = UserData.getInstance();\n        PrettyTablePrinter printerService = new PrettyTablePrinter();\n        userData.setState(UserGlobalStateafdvsfdcvsedf.STOP);\n        SendMessage messageToSend = createMessageTemplate(update.getCallbackQuery().getMessage().getChatId().toString());\n        List<Wish> wishes = dataService.getAllWishesWithPriority1(user);\n        messageToSend.setText(\"```\" + printerService.prepareWishTable(wishes) + \"```\");\n        return Collections.singletonList(messageToSend);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedBotState() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery() {\n        return Collections.singletonList(MESSAGE_HANDLER_STATE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishLstHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishLstHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishLstHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishLstHandler.java	
@@ -1,8 +1,8 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.prettytable.PrettyTablePrinter;
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.prettytable.PrettyTablePrinter;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.model.wish.Wish;
 import com.antonromanov.arnote.services.MainService;
@@ -12,7 +12,7 @@
 import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
-import static com.antonromanov.arnote.bot.Bot.createMessageTemplate;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.createMessageTemplate;
 
 
 public class WishLstHandler implements BotHandler {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/IncomeRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n\n/**\n * Деталка по доходам.\n *\n *\n */\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.ALWAYS)\npublic class IncomeRs {\n    Long id; // income ID\n    String incomeDescription; // описание\n    Boolean isBonus; // Бонус?\n    Date incomeDate; // дата платежа\n    Integer amount; // дата платежа\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/IncomeRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/IncomeRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/IncomeRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/IncomeRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n/**\n * DTO с данными по ЗП для фронта.\n */\n\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SalaryRs {\n    private Long id;\n    private Integer fullSalary; // полная зарплата\n    private Integer residualSalary; // зарплата после трат различных\n    private Integer livingExpenses; // траты на жизнь: расходы на еду, транспорт и прочее\n    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\")\n    private Date salaryDate; // траты на жизнь: расходы на еду, транспорт и прочее\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonInclude;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.BotHandler;\n\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport static com.antonromanov.arnote.bot.Bot.createInlineKeyboardButtonFromEnum;\nimport static com.antonromanov.arnote.bot.Bot.createMessageTemplate;\n\n\npublic class WishHandler implements BotHandler {\n\n    private final UserGlobalStateafdvsfdcvsedf MESSAGE_HANDLER_STATE = UserGlobalStateafdvsfdcvsedf.WISH_DOMAIN;\n    private final UserGlobalStateafdvsfdcvsedf CALLBACK_STATE = UserGlobalStateafdvsfdcvsedf.WISH_DOMAIN;\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleMessage(Update update, MainService dataService, ArNoteUser user) {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<PartialBotApiMethod<? extends Serializable>> handleCallback(Update update, MainService dataService, ArNoteUser user) {\n        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();\n        UserData userData = UserData.getInstance();\n        userData.setState(CALLBACK_STATE);\n\n        inlineKeyboardMarkup.setKeyboard(Collections.singletonList(createInlineKeyboardButtonFromEnum(CALLBACK_STATE)));\n        SendMessage messageToSend = createMessageTemplate(update.getCallbackQuery().getMessage().getChatId().toString());\n        messageToSend.setText(CALLBACK_STATE.getReplyMessageText());\n        messageToSend.setReplyMarkup(inlineKeyboardMarkup);\n        return Collections.singletonList(messageToSend);\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedBotState() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<UserGlobalStateafdvsfdcvsedf> operatedCallBackQuery() {\n        return Collections.singletonList(MESSAGE_HANDLER_STATE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishHandler.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishHandler.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishHandler.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/BotHandler/WishHandler.java	
@@ -1,7 +1,7 @@
-package com.antonromanov.arnote.bot.BotHandler;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler;
 
-import com.antonromanov.arnote.bot.userdata.UserData;
-import com.antonromanov.arnote.bot.userdata.UserGlobalStateafdvsfdcvsedf;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserGlobalStateafdvsfdcvsedf;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
@@ -11,8 +11,8 @@
 import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
-import static com.antonromanov.arnote.bot.Bot.createInlineKeyboardButtonFromEnum;
-import static com.antonromanov.arnote.bot.Bot.createMessageTemplate;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.createInlineKeyboardButtonFromEnum;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.createMessageTemplate;
 
 
 public class WishHandler implements BotHandler {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryListRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * DTO с данными по ЗП для фронта.\n */\n\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SalaryListRs {\n    private List<SalaryRs> salariesList;\n    ResponseStatusRs status;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryListRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryListRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryListRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/SalaryListRs.java	
@@ -1,11 +1,10 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 
-import java.util.Date;
 import java.util.List;
 
 /**
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalStateafdvsfdcvsedf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n@AllArgsConstructor\n@Getter\npublic enum UserGlobalStateafdvsfdcvsedf {\n\n    START(Collections.singletonList(\"/start\"), \"Начало сессии и выбор режима\", 0, 1,\n            Arrays.asList(BotReply.builder().text(\"Мобильный\").command(\"/domain_with_mobile\").build(),\n                    BotReply.builder().text(\"Десктоп\").command(\"/domain_with_desktop\").build()), \"Выберите тип устройства\"),\n    DOMAIN_SELECT(Arrays.asList(\"/domain_with_mobile\", \"/domain_with_desktop\"), \"Выбор домена\", 1, 2,\n            Arrays.asList(BotReply.builder().text(\"Желания\").command(\"/wishes_domain_select\").build(),\n            BotReply.builder().text(\"Фин.Планы\").command(\"/fin_planning_domain_select\").build()),\n            \"С какой сущностью будем работать?\"),\n    WISH_DOMAIN(Collections.singletonList(\"/wishes_domain_select\"), \"Работа с желаниями\", 2, 3,\n            Arrays.asList(BotReply.builder().text(\"Список желаний\").command(\"/wishlist\").build(),\n                    BotReply.builder().text(\"Добавить желание\").command(\"/addwish\").build(),\n                    BotReply.builder().text(\"Редактировать желание\").command(\"/editwish\").build()),\n            \"Работа с желаниями\"),\n    WISH_LIST(Collections.singletonList(\"/wishlist\"), \"Список желаний\", 3, 4, null,\n            \"Список желаний\"),\n    WISH_ADD(Collections.singletonList(\"/addwish\"), \"Добавить желание\", 3, 5,\n            null,\n            \"Введите желание\"),\n    WISH_EDIT(Collections.singletonList(\"/editwish\"), \"Редактировать желание\", 3, 5,\n            null,\n            \"Введите id желания\"),\n    WISH_ADD_PRICE(Collections.singletonList(\"/addwishprice\"), \"Добавить желание\", 3, 6, null,\n            \"Цена желания\"),\n    WISH_EDIT_PRICE(Collections.singletonList(\"/editwishprice\"), \"Редактировать желание\", 3, 6, null,\n            \"Цена желания\"),\n    WISH_EDIT_PRIOR(Collections.singletonList(\"/editwishprior\"), \"Редактировать приоритет желания\", 3, 6, null,\n            \"Редактировать приоритет желания\"),\n    WISH_EDIT_DELETE(Collections.singletonList(\"/editwishdelete\"), \"Редактировать желание\", 3, 6, null,\n            \"Удалить? [Y/N]\"),\n    WISH_EDIT_DONE(Collections.singletonList(\"/editwishsetdone\"), \"Редактировать желание\", 3, 6, null,\n            \"Реализовано? [Y/N]\"),\n    WISH_ADD_URL(Collections.singletonList(\"/addwishurl\"), \"Добавить желание\", 3, 7, null,\n            \"URL\"),\n    WISH_ADD_DESC(Collections.singletonList(\"/addwishdesc\"), \"Добавить желание\", 3, 8, null,\n            \"Описание\"),\n    WISH_ADD_PRIOR(Collections.singletonList(\"/addwishprior\"), \"Добавить желание\", 3, 9, null,\n            \"Приоритет\"),\n    STOP(Collections.singletonList(\"/stop\"), \"Окончание сессии\", 0, 3, null,\n            null);\n\n    private final List<String> command;\n    private final String description;\n    private final int parentCode; // todo: удалить эти коды надо, только путают\n    private final int code;\n    private final List<BotReply> reply;\n    private final String replyMessageText;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalStateafdvsfdcvsedf.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalStateafdvsfdcvsedf.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalStateafdvsfdcvsedf.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalStateafdvsfdcvsedf.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/SubDomain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport java.util.List;\n\n@AllArgsConstructor\n@Getter\npublic enum SubDomain {\n\n    WISH(\"/wish\", \"Желание\", null), FINPLANNING(\"/fp\", \"ФинПланы\", null);\n\n    private final String command;\n    private final String description;\n    private final List<DisplayType> displayTypes;\n\n   /* public static CalendarType handle(String id){\n        return Arrays.stream(CalendarType.values())\n                .filter(e->e.id == Integer.parseInt(id))\n                .findFirst()\n                .orElse(null);\n    }*/\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/SubDomain.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/SubDomain.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/SubDomain.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/SubDomain.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinalBalanceCalculationsRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.Date;\n\n\n/**\n * Транспортная ДТО для для подсчета финального построчного баланса / остатков.\n *\n *\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FinalBalanceCalculationsRs {\n    Integer balance; // итого\n    Integer previousIncome; // предыдущий доход\n    Integer previousExpense; // минус предыдущий расход\n    Integer monthlySpending;  // минус среднемесячный расход\n    Integer loanPayments; // минус покрытие кредитов\n    Integer currentIncome; // + ежемесячная зарплата.\n    CurrentIncomeRs currentIncomeDetail; // деталка по доходам\n    String date; // дата\n    Date dateInDateFormat; // дата\n    Boolean freeze; // фриз-фикс есть по этой дате?\n    Boolean emptyCalculations; // флаг того, что пользак только начал и карта расчетов у него - все по нулям (null)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinalBalanceCalculationsRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinalBalanceCalculationsRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinalBalanceCalculationsRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FinalBalanceCalculationsRs.java	
@@ -1,6 +1,5 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
-import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ResponseStatusRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\n@AllArgsConstructor\npublic class ResponseStatusRs {\n    private int code;\n    private String description;\n    private String status;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ResponseStatusRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ResponseStatusRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ResponseStatusRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/ResponseStatusRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/reciever/UpdateReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.reciever;\n\nimport com.antonromanov.arnote.bot.BotHandler.*;\nimport com.antonromanov.arnote.bot.userdata.UserData;\nimport com.antonromanov.arnote.model.ArNoteUser;\nimport com.antonromanov.arnote.services.MainService;\nimport org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;\nimport org.telegram.telegrambots.meta.api.objects.CallbackQuery;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport static com.antonromanov.arnote.bot.Bot.fvdvdrgvd;\n\n\npublic class UpdateReceiver {\n\n    private final List<BotHandler> handlers;\n    UserData userData;\n\n    public UpdateReceiver() {\n        FirstHandler fh = new FirstHandler();\n        WishHandler wh = new WishHandler();\n        WishLstHandler wlh = new WishLstHandler();\n        AddWishHandler awh = new AddWishHandler();\n        EditWishHandler ewh = new EditWishHandler();\n        userData = UserData.getInstance();\n        this.handlers = Arrays.asList(fh, wh, wlh, awh, ewh);\n    }\n\n    public List<PartialBotApiMethod<? extends Serializable>> handle(Update update, MainService dataService, ArNoteUser user)\n            throws UnsupportedOperationException { //todo: это не дело что мы сквозь все сервисы прокидываем MainService и ArNoteUser. Подумать как это разрешить?\n\n        if (isMessageWithText(update)) {\n            final Message message = update.getMessage();\n            BotHandler handler = getHandlerByState(message.getText());\n            return handler.handleMessage(update, dataService, user);\n        } else if (update.hasCallbackQuery()) {\n            final CallbackQuery callbackQuery = update.getCallbackQuery();\n            BotHandler bh = getHandlerByCallBackQuery(callbackQuery.getData());\n            return bh.handleCallback(update, dataService, user);\n        }\n        throw new UnsupportedOperationException();\n    }\n\n    private boolean isMessageWithText(Update update) {\n        return !update.hasCallbackQuery() && update.hasMessage() && update.getMessage().hasText();\n    }\n\n    private BotHandler getHandlerByCallBackQuery(String query) {\n        return handlers.stream()\n                .filter(h -> h.operatedCallBackQuery() != null)\n                .filter(h -> fvdvdrgvd(h.operatedCallBackQuery(), query))\n                .findAny()\n                .orElseThrow(UnsupportedOperationException::new);\n    }\n\n\n    private BotHandler getHandlerByState(String messageText) {\n\n        Optional<BotHandler> handler = handlers.stream()\n                .filter(h -> h.operatedBotState() != null)\n                .filter(h -> h.operatedBotState().stream().anyMatch(r -> r.getCommand().stream().anyMatch(w -> w.startsWith(messageText))))\n                .findAny();\n        BotHandler temp = handler.orElseGet(this::processTextMessages);\n        return temp; // todo: нужно вынести поиск по введенному тексту в зависимости от статуса в отдельный хендлер\n    }\n\n    private BotHandler processTextMessages() {\n        if (userData.getState() != null) {\n\n            return handlers.stream()\n                    .filter(h -> h.operatedBotState().stream().anyMatch(r -> r == userData.getState()))\n                    .findAny()\n                    .orElseThrow(UnsupportedOperationException::new);\n        } else {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/reciever/UpdateReceiver.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/reciever/UpdateReceiver.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/reciever/UpdateReceiver.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/reciever/UpdateReceiver.java	
@@ -1,7 +1,7 @@
-package com.antonromanov.arnote.bot.reciever;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.reciever;
 
-import com.antonromanov.arnote.bot.BotHandler.*;
-import com.antonromanov.arnote.bot.userdata.UserData;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.BotHandler.*;
+import com.antonromanov.arnote.sbdfvjbsdf.bot.userdata.UserData;
 import com.antonromanov.arnote.model.ArNoteUser;
 import com.antonromanov.arnote.services.MainService;
 import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
@@ -12,7 +12,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
-import static com.antonromanov.arnote.bot.Bot.fvdvdrgvd;
+import static com.antonromanov.arnote.sbdfvjbsdf.bot.Bot.fvdvdrgvd;
 
 
 public class UpdateReceiver {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CurrentIncomeRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n\n/**\n * Деталка по доходам.\n *\n *\n */\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.ALWAYS)\npublic class CurrentIncomeRs {\n    Integer salary; // итого\n    List<IncomeRs> incomeList; // список доходов\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CurrentIncomeRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CurrentIncomeRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CurrentIncomeRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CurrentIncomeRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/BotReply.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\n@Builder\npublic class BotReply {\n    private String text;\n    private String command;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/BotReply.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/BotReply.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/BotReply.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/BotReply.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/AddCreditRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\n/**\n * Ответ при добавлении кредита.\n */\n\n@Data\n@Builder\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class AddCreditRs {\n    private int creditsCount;\n    private int creditNumber;\n    ResponseStatusRs status;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/AddCreditRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/AddCreditRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/AddCreditRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/AddCreditRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport com.antonromanov.arnote.model.wish.Wish;\nimport lombok.Getter;\nimport lombok.Setter;\nimport java.util.Date;\n\n\npublic final class UserData {\n    private static UserData INSTANCE;\n\n    @Getter\n    @Setter\n    private UserGlobalStateafdvsfdcvsedf state;\n\n    @Getter\n    @Setter\n    private DisplayType displayType;\n\n    private Wish newWish;\n\n    @Setter\n    @Getter\n    private Wish wishToEdit;\n\n    private UserData() {}\n\n    public static UserData getInstance() {\n        if(INSTANCE == null) {\n            INSTANCE = new UserData();\n        }\n        return INSTANCE;\n    }\n\n    public  Wish getWish() {\n        if(newWish == null) {\n            newWish = new Wish();\n            newWish.setAc(false);\n            newWish.setRealized(false);\n            newWish.setCreationDate(new Date());\n            newWish.setDescription(\"Создано с помощью Телеграмм-Бота\");\n        }\n        return newWish;\n    }\n\n    public void clear() {\n        newWish = null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserData.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserData.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserData.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserData.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import com.antonromanov.arnote.model.wish.Wish;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * Данные по кредитам\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class CreditRs {\n    private Long id;\n    private Integer number;\n    private Integer amount;\n    private String description;\n    private Date startDate;\n    private Integer fullPayPerMonth; // Общий платеж по кредиту\n    private Integer realPayPerMonth; // Сколько уходит на погашение кредита после вычета процентов\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditRs.java	
@@ -1,11 +1,10 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 
 import java.util.Date;
-import java.util.List;
 
 /**
  * Данные по кредитам
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport java.util.List;\n\n@AllArgsConstructor\n@Getter\npublic enum UserGlobalState {\n\n    START(\"/start\", \"Начало сессии и выбор режима\", null), DOMAIN(\"/domain\", \"Выбор домена\", null), STOP(\"/stop\", \"Окончание сессии\", null);\n\n    private final String command;\n    private final String description;\n    private final List <UserDomainState> domains;\n\n   /* public static CalendarType handle(String id){\n        return Arrays.stream(CalendarType.values())\n                .filter(e->e.id == Integer.parseInt(id))\n                .findFirst()\n                .orElse(null);\n    }*/\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalState.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalState.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalState.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserGlobalState.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/DisplayType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport java.util.List;\n\n@AllArgsConstructor\n@Getter\npublic enum DisplayType {\n\n    MOBILE(15), DESKTOP(35);\n\n    private final Integer maxWidth;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/DisplayType.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/DisplayType.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/DisplayType.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/DisplayType.java	
@@ -1,10 +1,8 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 
-import java.util.List;
-
 @AllArgsConstructor
 @Getter
 public enum DisplayType {
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoansListRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\n\n/**\n * DTO для выдачи списка кредитов на фронт.\n */\n@Data\n@Builder\n@AllArgsConstructor\npublic class FullLoansListRs {\n    private List<FullLoanRs> loansList;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoansListRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoansListRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoansListRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/FullLoansListRs.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditListRs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.dto.rs;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Данные по кредитам\n */\n@Data\n@Builder\n@AllArgsConstructor\n// @JsonInclude(JsonInclude.Include.NON_EMPTY)\npublic class CreditListRs {\n    Integer credit1;\n    Integer credit2;\n    Integer credit3;\n    Integer credit4;\n    Integer credit5;\n    private List<CreditRs> credits;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditListRs.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditListRs.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditListRs.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/dto/rs/CreditListRs.java	
@@ -1,11 +1,9 @@
-package com.antonromanov.arnote.dto.rs;
+package com.antonromanov.arnote.sbdfvjbsdf.dto.rs;
 
-import com.fasterxml.jackson.annotation.JsonInclude;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Данные по кредитам
Index: src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserDomainState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.antonromanov.arnote.bot.userdata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport java.util.List;\n\n@AllArgsConstructor\n@Getter\npublic enum UserDomainState {\n    WISHES(\"/wishes\", \"Работа с желаниями\", null), FINPLANNING(\"/fp\", \"ФинПланы\", null);\n\n\n    private final String command;\n    private final String description;\n    private final List<SubDomain> subDomains;\n\n   /* public static CalendarType handle(String id){\n        return Arrays.stream(CalendarType.values())\n                .filter(e->e.id == Integer.parseInt(id))\n                .findFirst()\n                .orElse(null);\n    }*/\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserDomainState.java b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserDomainState.java
--- a/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserDomainState.java	
+++ b/src/main/java/com/antonromanov/arnote/sbdfvjbsdf/bot/userdata/UserDomainState.java	
@@ -1,4 +1,4 @@
-package com.antonromanov.arnote.bot.userdata;
+package com.antonromanov.arnote.sbdfvjbsdf.bot.userdata;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
